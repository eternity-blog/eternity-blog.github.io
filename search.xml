<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>数学知识</title>
      <link href="/AcWing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/%E6%95%B0%E5%AD%A6%E7%9F%A5%E8%AF%86/%E6%95%B0%E5%AD%A6%E7%9F%A5%E8%AF%86/"/>
      <url>/AcWing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/%E6%95%B0%E5%AD%A6%E7%9F%A5%E8%AF%86/%E6%95%B0%E5%AD%A6%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h1 id="数学知识"><a href="#数学知识" class="headerlink" title="数学知识"></a>数学知识</h1><p>[toc]</p><h2 id="质数"><a href="#质数" class="headerlink" title="质数"></a>质数</h2><p><strong>在大于1的整数中</strong>，如果只包含1和本身这两个约数，就被称为质数，或者叫素数</p><h3 id="质数的判定"><a href="#质数的判定" class="headerlink" title="质数的判定"></a>质数的判定</h3><h4 id="试除法"><a href="#试除法" class="headerlink" title="试除法"></a>试除法</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//最暴力解法，时间复杂度：O（n）</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">is_prime</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">2</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt; n; ++ i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n % i == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于约数成对出现，所以可以通过只枚举一对约数中较小的一个，来优化算法。</p><p>即已知：d | n ，n&#x2F;d | n  </p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240226214546201.png" alt="image-20240226214546201"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//优化，时间复杂度：O（sqrt(n)),一定是！</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">is_prime</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">2</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n / i; ++ i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n % i == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/20250213162106.png"></p><h4 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">is_prime</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">2</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n / i; ++ i)</span><br><span class="line">        <span class="keyword">if</span> (n % i == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">while</span> ( n -- ) &#123;</span><br><span class="line">        <span class="type">int</span> tmp = <span class="number">0</span>;</span><br><span class="line">        cin &gt;&gt; tmp;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">is_prime</span>(tmp)) cout &lt;&lt; <span class="string">&quot;Yes&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;No&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分解质因数"><a href="#分解质因数" class="headerlink" title="分解质因数"></a>分解质因数</h3><h4 id="试除法-1"><a href="#试除法-1" class="headerlink" title="试除法"></a>试除法</h4><p>从小到大枚举所有数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//暴力,时间复杂度：O(n）</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">divide</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt; n; ++ i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n % i == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">int</span> s = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (n % i == <span class="number">0</span>) &#123;</span><br><span class="line">                ++ s;</span><br><span class="line">                n /= i;</span><br><span class="line">            &#125;</span><br><span class="line">            cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; s &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>n中最多只包含一个大于sqrt(n)的质因数</code></p><p>可用反证法证明：若有两个大于 sqrt(n) 的因子，相乘会大于n，矛盾。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//优化：时间复杂度：O(sqrt(n))，最好情况：O(logn)，最差情况：O(sqrt(n))</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">divide</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n / i; ++ i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n % i  == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">int</span> s = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (n % i == <span class="number">0</span>) &#123;</span><br><span class="line">                ++ s;</span><br><span class="line">                n /= i;</span><br><span class="line">            &#125;</span><br><span class="line">            cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; s &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (n &gt; <span class="number">1</span>) cout &lt;&lt; n &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; <span class="number">1</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/20250213163626.png"></p><h4 id="完整代码-1"><a href="#完整代码-1" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">divide</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n / i; ++ i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n % i  == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">int</span> s = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (n % i == <span class="number">0</span>) &#123;</span><br><span class="line">                ++ s;</span><br><span class="line">                n /= i;</span><br><span class="line">            &#125;</span><br><span class="line">            cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; s &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (n &gt; <span class="number">1</span>) cout &lt;&lt; n &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; <span class="number">1</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">while</span> ( n -- ) &#123;</span><br><span class="line">        <span class="type">int</span> t = <span class="number">0</span>; cin &gt;&gt; t;</span><br><span class="line">        <span class="built_in">divide</span>(t); cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="筛质数"><a href="#筛质数" class="headerlink" title="筛质数"></a>筛质数</h3><h4 id="朴素筛法"><a href="#朴素筛法" class="headerlink" title="朴素筛法"></a>朴素筛法</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//时间复杂度：O(nlogn)</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1000010</span>;</span><br><span class="line"><span class="type">int</span> primes[N], cnt;</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_primes</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; ++ i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!st[i]) &#123;<span class="comment">//不管是合数还是质数，都用来筛掉后面它的倍数</span></span><br><span class="line">            primes[cnt++] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = i + <span class="number">1</span>; j &lt;= n; j += i) st[j] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="埃氏筛法"><a href="#埃氏筛法" class="headerlink" title="埃氏筛法"></a>埃氏筛法</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//时间复杂度：O(nloglogn)</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1000010</span>;</span><br><span class="line"><span class="type">int</span> primes[N], cnt;</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_primes</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; ++ i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!st[i]) &#123;</span><br><span class="line">            primes[cnt++] = i;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = i + <span class="number">1</span>; j &lt;= n; j += i) st[j] = <span class="literal">true</span>;</span><br><span class="line">            <span class="comment">//可以用质数就把所有的合数都筛掉</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="线性筛法"><a href="#线性筛法" class="headerlink" title="线性筛法"></a>线性筛法</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//时间复杂度：O(n)</span></span><br><span class="line"><span class="comment">//原理：只会被最小质因子筛掉</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> primes[N], cnt;</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_primes</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="comment">//外层从2~n迭代，因为这毕竟算的是1~n中质数的个数，而不是某个数是不是质数的判定</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!st[i]) primes[cnt++]=i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;primes[j]&lt;=n/i;j++)&#123;</span><br><span class="line">            <span class="comment">//primes[j]&lt;=n/i:变形一下得到——primes[j]*i&lt;=n,把大于n的合数都筛了</span></span><br><span class="line">            st[primes[j]*i]=<span class="literal">true</span>;<span class="comment">//用最小质因子去筛合数</span></span><br><span class="line"></span><br><span class="line">            </span><br><span class="line">            <span class="comment">/*1)当i%primes[j]!=0时,说明此时遍历到的primes[j]不是i的质因子，那么只可能是此时的primes[j]&lt;i的最小质因子,所以primes[j]*i的最小质因子就是primes[j];*/</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">/*2)当有i%primes[j]==0时,说明i的最小质因子是primes[j],因此primes[j]*i的最小质因子也就应该是prime[j]，之后接着用st[primes[j+1]*i]=true去筛合数时，就不是用最小质因子去更新了,因为i有最小质因子primes[j]&lt;primes[j+1],此时的primes[j+1]不是primes[j+1]*i的最小质因子，此时就应该退出循环，避免之后重复进行筛选。*/</span></span><br><span class="line">            <span class="keyword">if</span>(i%primes[j]==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当N为10<sup>6</sup> 时，线性筛法效率和埃氏筛法差不多</p><p>当N为10<sup>7</sup> 时，线性筛法效率比埃氏筛法快一倍</p><h4 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/20250213164017.png"></p><h4 id="完整代码-2"><a href="#完整代码-2" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> primes[N], cnt;</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_primes</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="comment">//外层从2~n迭代，因为这毕竟算的是1~n中质数的个数，而不是某个数是不是质数的判定</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!st[i]) primes[cnt++]=i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;primes[j]&lt;=n/i;j++)&#123;<span class="comment">//primes[j]&lt;=n/i:变形一下得到——primes[j]*i&lt;=n,把大于n的合数都筛了就</span></span><br><span class="line">            st[primes[j]*i]=<span class="literal">true</span>;<span class="comment">//用最小质因子去筛合数</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">/*1)当i%primes[j]!=0时,说明此时遍历到的primes[j]不是i的质因子，那么只可能是此时的primes[j]&lt;i的</span></span><br><span class="line"><span class="comment">            最小质因子,所以primes[j]*i的最小质因子就是primes[j];</span></span><br><span class="line"><span class="comment">            2)当有i%primes[j]==0时,说明i的最小质因子是primes[j],因此primes[j]*i的最小质因子也就应该是</span></span><br><span class="line"><span class="comment">            prime[j]，之后接着用st[primes[j+1]*i]=true去筛合数时，就不是用最小质因子去更新了,因为i有最小</span></span><br><span class="line"><span class="comment">            质因子primes[j]&lt;primes[j+1],此时的primes[j+1]不是primes[j+1]*i的最小质因子，此时就应该</span></span><br><span class="line"><span class="comment">            退出循环，避免之后重复进行筛选。</span></span><br><span class="line"><span class="comment">            if(i%primes[j]==0) break;*/</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="built_in">get_primes</span>(n);</span><br><span class="line">    cout &lt;&lt; cnt &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="约数"><a href="#约数" class="headerlink" title="约数"></a>约数</h2><h3 id="试除法求约数"><a href="#试除法求约数" class="headerlink" title="试除法求约数"></a>试除法求约数</h3><p>与判断质数类似，一个数的约数一定是成对出现的，所以只需要枚举小的就行（质数小节有详解）</p><h4 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230817145418485.png" alt="image-20230817145418485"></p><h4 id="完整代码-3"><a href="#完整代码-3" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">get_divisors</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n / i; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(n % i == <span class="number">0</span>) &#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(i);</span><br><span class="line">            <span class="keyword">if</span>(i != n / i) res.<span class="built_in">push_back</span>(n / i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(res.<span class="built_in">begin</span>(),res.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    <span class="type">int</span> n;cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">while</span>(n--) &#123;</span><br><span class="line">        <span class="type">int</span> tmp;cin &gt;&gt; tmp;</span><br><span class="line">        <span class="keyword">auto</span> ans = <span class="built_in">get_divisors</span>(tmp);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> it : ans) cout &lt;&lt; it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="约数个数"><a href="#约数个数" class="headerlink" title="约数个数"></a>约数个数</h3><h4 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230817150143752.png" alt="image-20230817150143752"></p><h4 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h4><p>把一个数 N 写成：N &#x3D; (p<sub>1</sub><sup>x<sub>1</sub></sup>)(p<sub>2</sub><sup>x<sub>2</sub></sup>)(p<sub>3</sub><sup>x<sub>3</sub></sup>)…(p<sub>k</sub><sup>x<sub>k</sub></sup>)，其中 p<sub>i</sub> 为质数。则N的约数个数为：(x<sub>1</sub> + 1)(x<sub>2</sub> + 1)(x<sub>3</sub> + 1)…(x<sub>k</sub> + 1)</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230817234147931.png" alt="image-20230817234147931"></p><h4 id="完整代码-4"><a href="#完整代码-4" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    <span class="type">int</span> n;cin &gt;&gt; n;</span><br><span class="line">    unordered_map &lt;<span class="type">int</span>, <span class="type">int</span>&gt; primes;</span><br><span class="line">    <span class="keyword">while</span>( n-- ) &#123;</span><br><span class="line">        <span class="type">int</span> x;cin &gt;&gt; x;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= x / i; ++i) &#123;</span><br><span class="line">            <span class="keyword">while</span>(x % i == <span class="number">0</span>) &#123;</span><br><span class="line">                x /= i;</span><br><span class="line">                ++primes[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(x &gt; <span class="number">1</span>) ++primes[x];</span><br><span class="line">    &#125;</span><br><span class="line">    LL ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> item : primes) ans = ans * (item.second + <span class="number">1</span>) % mod;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="约数之和"><a href="#约数之和" class="headerlink" title="约数之和"></a>约数之和</h3><h4 id="题目描述-5"><a href="#题目描述-5" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230817234404102.png" alt="image-20230817234404102"></p><h4 id="思路分析-1"><a href="#思路分析-1" class="headerlink" title="思路分析"></a>思路分析</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230817235212080.png" alt="image-20230817235212080"></p><h4 id="完整代码-5"><a href="#完整代码-5" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    <span class="type">int</span> n;cin &gt;&gt; n;</span><br><span class="line">    unordered_map &lt;<span class="type">int</span>, <span class="type">int</span>&gt; primes;</span><br><span class="line">    <span class="keyword">while</span>( n-- ) &#123;</span><br><span class="line">        <span class="type">int</span> x;cin &gt;&gt; x;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= x / i; ++i) &#123;</span><br><span class="line">            <span class="keyword">while</span>(x % i == <span class="number">0</span>) &#123;</span><br><span class="line">                x /= i;</span><br><span class="line">                ++primes[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(x &gt; <span class="number">1</span>) ++primes[x];</span><br><span class="line">    &#125;</span><br><span class="line">    LL ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> item : primes) &#123;</span><br><span class="line">        <span class="type">int</span> p = item.first, a = item.second;</span><br><span class="line">        LL t = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>( a-- ) t = (t * p + <span class="number">1</span>) % mod;</span><br><span class="line">        ans = ans * t % mod;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最大公约数（欧几里得算法）"><a href="#最大公约数（欧几里得算法）" class="headerlink" title="最大公约数（欧几里得算法）"></a>最大公约数（欧几里得算法）</h3><h4 id="题目描述-6"><a href="#题目描述-6" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230817235400381.png" alt="image-20230817235400381"></p><h4 id="思路分析-2"><a href="#思路分析-2" class="headerlink" title="思路分析"></a>思路分析</h4><p>欧几里得算法（辗转相除法）</p><p>求两个正整数 a 和 b 的 最大公约数 d<br>则有 gcd(a,b) &#x3D; gcd(b,a%b)<br>证明：<br>    设 a%b &#x3D; a - k<em>b 其中 k &#x3D; a &#x2F; b (向下取整)<br>    若d是(a,b)的公约数 则知  d | a  且  d | b 则易知  d | (a - k</em>b) 故 d 也是 (b,a%b) 的公约数<br>    若d是(b,a%b)的公约数 则知 d | b 且 d | (a - k<em>b) 则 d | (a - k</em>b + kb ) &#x3D; d | a 故而d同时整除 a 和 b 所以 d 也是(a,b)的公约数<br>    因此(a,b)的公约数集合和(b,a%b)的公约数集合相同 所以他们的最大公约数也相同 证毕#</p><h4 id="完整代码-6"><a href="#完整代码-6" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">gcd</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> b ? <span class="built_in">gcd</span>(b, a % b) : a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    <span class="type">int</span> n; cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">while</span>( n-- ) &#123;</span><br><span class="line">        <span class="type">int</span> x, y;</span><br><span class="line">        cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">        cout &lt;&lt; <span class="built_in">gcd</span>(x, y) &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="欧拉函数"><a href="#欧拉函数" class="headerlink" title="欧拉函数"></a>欧拉函数</h2><h3 id="欧拉函数-1"><a href="#欧拉函数-1" class="headerlink" title="欧拉函数"></a>欧拉函数</h3><h4 id="题目描述-7"><a href="#题目描述-7" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230818194401284.png" alt="image-20230818194401284"></p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">输入样例</span><br><span class="line">3</span><br><span class="line">3</span><br><span class="line">6</span><br><span class="line">8</span><br><span class="line">输出样例</span><br><span class="line">2</span><br><span class="line">2</span><br><span class="line">4</span><br></pre></td></tr></table></figure><h4 id="欧拉函数证明"><a href="#欧拉函数证明" class="headerlink" title="欧拉函数证明"></a>欧拉函数证明</h4><h5 id="证明一"><a href="#证明一" class="headerlink" title="证明一"></a>证明一</h5><p>容斥原理</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230818200931787.png" alt="image-20230818200931787"></p><p>设sum为 1<del>n 中与 n 互斥 的数的个数<br>基本思路是去掉 1</del>n 中所有 p<sub>1</sub>，p<sub>2</sub>，…，p<sub>k</sub>的倍数</p><p>当 p<sub>1</sub>，p<sub>2</sub>，…，p<sub>k</sub> 的倍数集合没有交集时，如下图</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230818200529771.png" alt="image-20230818200529771"></p><p>当 p<sub>1</sub>，p<sub>2</sub>，…，p<sub>k</sub> 中的任意两个数的倍数集合拥有交集时，</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230818200633562.png" alt="image-20230818200633562"></p><h5 id="证明二"><a href="#证明二" class="headerlink" title="证明二"></a>证明二</h5><p>首先， 欧拉函数是一个积性函数，当m,n互质时，φ(mn)&#x3D;φ(m)∗φ(n)</p><p>根据唯一分解定理知 n&#x3D;p<sub>1</sub><sup>a<sub>1</sub></sup> ∗ p<sub>2</sub><sup>a<sub>2</sub></sup> ∗…∗ p<sub>x</sub><sup>a<sub>x</sub></sup></p><p>因此 φ(n)&#x3D;φ(p<sub>1</sub><sup>a<sub>1</sub></sup>)∗…∗φ(p<sub>x</sub><sup>a<sub>x</sub></sup>)</p><p>对于任意一项 φ(p<sub>s</sub><sup>a<sub>s</sub></sup>)&#x3D;p<sub>s</sub><sup>a<sub>s</sub></sup> − p<sub>s</sub><sup>a<sub>s</sub>-1</sup> </p><p>从定义出发 φ(p<sub>s</sub><sup>a<sub>s</sub></sup>) 等于小于或等于 p<sub>s</sub><sup>a<sub>s</sub></sup> 的正整数中与 p<sub>s</sub><sup>a<sub>s</sub></sup> 互质的数的数目</p><p>从 1 到 p<sub>s</sub><sup>a<sub>s</sub></sup> 中共有 p<sub>s</sub><sup>a<sub>s</sub></sup> 个数字</p><p>其中与 p<sub>s</sub><sup>a<sub>s</sub></sup> 不互质的有 p<sub>s</sub>，2p<sub>s</sub>，…，p<sub>s</sub><sup>a<sub>s</sub>-1</sup> ∗ p<sub>s</sub> ,共 p<sub>s</sub><sup>a<sub>s</sub>-1</sup> 项</p><p>所以 φ(p<sub>s</sub><sup>a<sub>s</sub></sup>) &#x3D; p<sub>s</sub><sup>a<sub>s</sub></sup> - p<sub>s</sub><sup>a<sub>s</sub>-1</sup> &#x3D; p<sub>s</sub><sup>a<sub>s</sub></sup> ∗ (1 − 1 &#x2F; p<sub>s</sub>)</p><p>因此，</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230818202350252.png" alt="image-20230818202350252"></p><h4 id="完整代码-7"><a href="#完整代码-7" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//算法的瓶颈主要在分解质因数上,分解质因数的时间复杂度为O(sqrt(a)),但由于有n组数据,所以时间复杂度为O(sqrt(a)∗n)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    <span class="type">int</span> n; cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">while</span>( n-- ) &#123;</span><br><span class="line">        <span class="type">int</span> a; cin &gt;&gt; a;</span><br><span class="line">        <span class="type">int</span> ans = a;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= a / i; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span>(a % i == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">//ans = ans * (i - 1) / i;//这样写会有小数，导致答案错误</span></span><br><span class="line">                ans = ans / i * (i - <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">while</span>(a % i == <span class="number">0</span>) a /= i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(a &gt; <span class="number">1</span>) ans = ans / a * (a - <span class="number">1</span>);</span><br><span class="line">        cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="筛法求欧拉函数"><a href="#筛法求欧拉函数" class="headerlink" title="筛法求欧拉函数"></a>筛法求欧拉函数</h3><h4 id="题目描述-8"><a href="#题目描述-8" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230818203007062.png" alt="image-20230818203007062"></p><h4 id="完整代码-8"><a href="#完整代码-8" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> primes[N], cnt;</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"><span class="type">int</span> phi[N];</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">get_eulers</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    phi[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!st[i]) &#123;</span><br><span class="line">            primes[cnt++] = i;</span><br><span class="line">            phi[i] = i - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; primes[j] &lt;= n / i; ++j) &#123;</span><br><span class="line">            st[primes[j] * i] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(i % primes[j] == <span class="number">0</span>) &#123;</span><br><span class="line">                phi[primes[j] * i] = phi[i] * primes[j];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            phi[primes[j] * i] = phi[i] * (primes[j] - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    LL res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) res += phi[i];</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    <span class="type">int</span> n; cin &gt;&gt; n;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">get_eulers</span>(n) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">(只与底数有关，与指数无关)</span></span><br><span class="line"><span class="comment">质数i的欧拉函数即为phi[i] = i - 1：1 ~ i−1均与i互质，共i−1 个。</span></span><br><span class="line"><span class="comment">phi[primes[j] * i]分为两种情况：</span></span><br><span class="line"><span class="comment">① i % primes[j] == 0时：primes[j]是i的最小质因子，也是primes[j] * i的最小质因子，因此1 - 1 / primes[j]这一项在phi[i]中计算过了，只需将基数N修正为primes[j]倍，最终结果为phi[i] * primes[j]。</span></span><br><span class="line"><span class="comment">② i % primes[j] != 0：primes[j]不是i的质因子，只是primes[j] * i的最小质因子，因此不仅需要将基数N修正为primes[j]倍，还需要补上 1 - 1 / primes[j] 这一项，因此最终结果phi[i] * (primes[j] - 1)。</span></span><br><span class="line"><span class="comment">**/</span></span><br></pre></td></tr></table></figure><h2 id="快速幂"><a href="#快速幂" class="headerlink" title="快速幂"></a>快速幂</h2><p>快速幂作用：快速地求出a的k次方模上p的结果</p><p>主要思路：预处理出logk个数，然后用这logk个数中的若干个数在O(1)的时间组合出a的k次方模上p的结果。</p><h3 id="快速幂-1"><a href="#快速幂-1" class="headerlink" title="快速幂"></a>快速幂</h3><h4 id="题目描述-9"><a href="#题目描述-9" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230818210454505.png" alt="image-20230818210454505"></p><h4 id="思路分析-3"><a href="#思路分析-3" class="headerlink" title="思路分析"></a>思路分析</h4><p>时间复杂度：O（n * log b）</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230818212932471.png" alt="image-20230818212932471"></p><p>注意：</p><p>b &amp; 1 是用来判断 b 的二进制表示中第0位是否为1,若为1，则 b &amp; 1 为 true，否则为 false</p><p>b &amp; 1 还可以用来判断奇偶，b &amp; 1 &#x3D; true 时为奇数，反之为偶数</p><h4 id="完整代码-9"><a href="#完整代码-9" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">qmi</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">    LL res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(b) &#123;</span><br><span class="line">        <span class="keyword">if</span>(b &amp; <span class="number">1</span>) res = res * a % p;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        a = (LL) a * a % p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//本题建议使用scanf，会比cin快很多，即使cin关闭缓冲同步</span></span><br><span class="line">    <span class="type">int</span> n; <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">while</span>( n-- ) &#123;</span><br><span class="line">        <span class="type">int</span> a, b, p;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;a, &amp;b, &amp;p);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">qmi</span>(a,b,p));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="快速幂求逆元"><a href="#快速幂求逆元" class="headerlink" title="快速幂求逆元"></a>快速幂求逆元</h3><h4 id="题目描述-10"><a href="#题目描述-10" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230818213316282.png" alt="image-20230818213316282"></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">输入样例</span><br><span class="line">3</span><br><span class="line">4 3</span><br><span class="line">8 5</span><br><span class="line">6 3</span><br><span class="line">输出样例</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">impossible</span><br></pre></td></tr></table></figure><h4 id="完整代码-10"><a href="#完整代码-10" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">qmi</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">    LL res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(b) &#123;</span><br><span class="line">        <span class="keyword">if</span>(b &amp; <span class="number">1</span>) res =  res * a % p;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        a = (LL)a * a % p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    <span class="type">int</span> n; cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">while</span>(n --) &#123;</span><br><span class="line">        <span class="type">int</span> a, p;</span><br><span class="line">        cin &gt;&gt; a &gt;&gt; p;</span><br><span class="line">        <span class="type">int</span> res = <span class="built_in">qmi</span>(a, p - <span class="number">2</span>, p);</span><br><span class="line">        <span class="keyword">if</span>(a % p) cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;impossible&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">#本题采用cin和cout，并关闭缓冲同步，平均用时：<span class="number">615</span>ms</span><br><span class="line">#仅采用cin和cout，平均用时：<span class="number">842</span>ms</span><br><span class="line">#采用scanf和printf，平均用时：<span class="number">263</span>ms</span><br></pre></td></tr></table></figure><h2 id="扩展欧几里得算法"><a href="#扩展欧几里得算法" class="headerlink" title="扩展欧几里得算法"></a>扩展欧几里得算法</h2><h3 id="扩展欧几里得算法-1"><a href="#扩展欧几里得算法-1" class="headerlink" title="扩展欧几里得算法"></a>扩展欧几里得算法</h3><p>用于求解方程 ax + by &#x3D; gcd(a,b)的解</p><p>当 b &#x3D; 0 时，ax+by&#x3D;a 故而 x&#x3D;1,y&#x3D;0</p><p>当 b ≠ 0 时，因为 gcd(a,b) &#x3D; gcd(b,a%b)，而</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230821023743505.png" alt="image-20230821023743505"></p><p>故而，x &#x3D; y’，y &#x3D; x’ - $\lfloor a &#x2F; b \rfloor$ * y’</p><p>采取递归算法 先求出下一层的x′和y′ 再利用上述公式回代即可</p><h4 id="题目描述-11"><a href="#题目描述-11" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230820204338805.png" alt="image-20230820204338805"></p><h4 id="完整代码-11"><a href="#完整代码-11" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">exgcd</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> &amp;x, <span class="type">int</span> &amp;y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!b) &#123;</span><br><span class="line">        x = <span class="number">1</span>, y = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> d = <span class="built_in">exgcd</span>(b, a % b, y, x);</span><br><span class="line">    y -= a / b * x;</span><br><span class="line">    <span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n; <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">while</span>(n --) &#123;</span><br><span class="line">        <span class="type">int</span> a, b, x, y;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line">        <span class="built_in">exgcd</span>(a, b, x, y);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>, x, y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="线性同余方程"><a href="#线性同余方程" class="headerlink" title="线性同余方程"></a>线性同余方程</h3><h4 id="题目描述-12"><a href="#题目描述-12" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230821024429386.png" alt="image-20230821024429386"></p><h4 id="完整代码-12"><a href="#完整代码-12" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">exgcd</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> &amp;x, <span class="type">int</span> &amp;y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!b) &#123;</span><br><span class="line">        x = <span class="number">1</span>, y = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> d = <span class="built_in">exgcd</span>(b, a % b, y, x);</span><br><span class="line">    y -= a / b * x;</span><br><span class="line">    <span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n; <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">while</span>(n --) &#123;</span><br><span class="line">        <span class="type">int</span> a, b, m;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;a, &amp;b, &amp;m);</span><br><span class="line">        <span class="type">int</span> x, y;</span><br><span class="line">        <span class="type">int</span> d = <span class="built_in">exgcd</span>(a, m, x, y);</span><br><span class="line">        <span class="keyword">if</span>(b % d) <span class="built_in">puts</span>(<span class="string">&quot;impossible&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, (LL)x * (b / d) % m);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="中国剩余定理"><a href="#中国剩余定理" class="headerlink" title="中国剩余定理"></a>中国剩余定理</h2><h3 id="表达整数的奇怪方式"><a href="#表达整数的奇怪方式" class="headerlink" title="表达整数的奇怪方式"></a>表达整数的奇怪方式</h3><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230821172622801.png" alt="image-20230821172622801"></p><h4 id="题目描述-13"><a href="#题目描述-13" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230821160850223.png" alt="image-20230821160850223"></p><h4 id="思路分析-4"><a href="#思路分析-4" class="headerlink" title="思路分析"></a>思路分析</h4><p>本题并未说明 m<sub>1</sub>，m<sub>2</sub>，……，m<sub>n</sub> 之间两两互质，需要重新推导</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230821173344971.png" alt="image-20230821173344971"></p><p><code>如何求解 k1∗a1 − k2∗a2 = gcd(a1,−a2) = d 中的k1和k2?</code></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230821173528361.png" alt="image-20230821173528361"></p><p>证明：</p><p>k<sub>1</sub>的通解为s<sub>1</sub>，k<sub>2</sub>的通解为s<sub>2</sub>，k<sub>1</sub>的特解为k1，k<sub>2</sub>的特解为k<sub>2</sub></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230821173845454.png" alt="image-20230821173845454"></p><p><code>那么又有疑问了？ a1 / d 与 a2 / d 为什么互质</code></p><p>在方程组⑥中根据裴蜀定理的推论(a，b互质的充要条件是存在整数x，y使 ax + by &#x3D; 1)</p><p>从而互质</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230821174049948.png" alt="image-20230821174049948"></p><h4 id="完整代码-13"><a href="#完整代码-13" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">exgcd</span><span class="params">(LL a, LL b, LL &amp;x, LL &amp;y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!b) &#123;</span><br><span class="line">        x = <span class="number">1</span>, y = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    LL d = <span class="built_in">exgcd</span>(b, a % b, y, x);</span><br><span class="line">    y -= a / b * x;</span><br><span class="line">    <span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    <span class="type">int</span> n; cin &gt;&gt; n;</span><br><span class="line">    <span class="type">bool</span> has_answer = <span class="literal">true</span>;</span><br><span class="line">    LL a1, m1;</span><br><span class="line">    cin &gt;&gt; a1 &gt;&gt; m1;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; ++i) &#123;<span class="comment">//合并接下来的n-1个方程</span></span><br><span class="line">        LL a2, m2;</span><br><span class="line">        cin &gt;&gt; a2 &gt;&gt; m2;</span><br><span class="line">        </span><br><span class="line">        LL k1, k2;</span><br><span class="line">        LL d = <span class="built_in">exgcd</span>(a1, a2, k1, k2);</span><br><span class="line">        <span class="keyword">if</span>((m1 - m2) % d) &#123;<span class="comment">//无解</span></span><br><span class="line">            has_answer = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        k1 *= (m2 - m1) / d;<span class="comment">//特解</span></span><br><span class="line">        LL t = a2 / d;</span><br><span class="line">        k1 = (k1 % t + t) % t;<span class="comment">//让特解取到最小正整数解</span></span><br><span class="line">        </span><br><span class="line">        m1 = a1 * k1 + m1;</span><br><span class="line">        a1 = <span class="built_in">abs</span>(a1 / d * a2);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(has_answer) &#123;</span><br><span class="line">        cout &lt;&lt; (m1 % a1 + a1) % a1 &lt;&lt; endl;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="高斯消元"><a href="#高斯消元" class="headerlink" title="高斯消元"></a>高斯消元</h2><p>高斯消元 O(n<sup>3</sup>)</p><ul><li>通过初等行变换 把 增广矩阵 化为 阶梯型矩阵 并回代 得到方程的解</li><li>适用于求解 包含n 个方程，n 个未知数的多元线性方程组</li></ul><p>例如方程组：</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20231003171752223.png" alt="image-20231003171752223"></p><p>增广矩阵为：</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20231003171830497.png" alt="image-20231003171830497"></p><p>初等行（列）变换</p><ol><li>把某一行乘一个非0的数 (方程的两边同时乘上一个非0数不改变方程的解)</li><li>交换某两行 (交换两个方程的位置)</li><li>把某行的若干倍加到另一行上去 （把一个方程的若干倍加到另一个方程上去）</li></ol><p>阶梯形矩阵：</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20231003171905550.png" alt="image-20231003171905550"></p><p>判断解</p><ol><li>完美阶梯形——唯一解</li><li>0 &#x3D; k（k !&#x3D; 0）——无解</li><li>0 &#x3D; 0——无数解</li></ol><h3 id="高斯消元解线性方程组"><a href="#高斯消元解线性方程组" class="headerlink" title="高斯消元解线性方程组"></a>高斯消元解线性方程组</h3><h4 id="题目描述-14"><a href="#题目描述-14" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230821174351487.png" alt="image-20230821174351487"></p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">输入样例：</span><br><span class="line">3</span><br><span class="line">1.00 2.00 -1.00 -6.00</span><br><span class="line">2.00 1.00 -3.00 -9.00</span><br><span class="line">-1.00 -1.00 2.00 7.00</span><br><span class="line"></span><br><span class="line">输出样例：</span><br><span class="line">1.00</span><br><span class="line">-2.00</span><br><span class="line">3.00</span><br></pre></td></tr></table></figure><h4 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h4><p>枚举每一列 c</p><ul><li>找到当前列绝对值最大的一行</li><li>用初等行变换(2) 把这一行换到最上面（未确定阶梯型的行，并不是第一行）</li><li>用初等行变换(1) 将该行的第一个数变成 1 （其余所有的数字依次跟着变化）</li><li>用初等行变换(3) 将下面所有行的当且列的值变成 0</li></ul><h4 id="完整代码-14"><a href="#完整代码-14" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">110</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">double</span> a[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">gauss</span><span class="params">()</span> </span>&#123;<span class="comment">// 高斯消元，答案存于a[i][n]中，0 &lt;= i &lt; n</span></span><br><span class="line">    <span class="type">int</span> c, r;</span><br><span class="line">    <span class="keyword">for</span> (c = <span class="number">0</span>, r = <span class="number">0</span>; c &lt; n; c ++ ) &#123;</span><br><span class="line">        <span class="type">int</span> t = r;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = r; i &lt; n; i ++ )  <span class="comment">// 找绝对值最大的行</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">fabs</span>(a[i][c]) &gt; <span class="built_in">fabs</span>(a[t][c]))</span><br><span class="line">                t = i;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">fabs</span>(a[t][c]) &lt; eps) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = c; i &lt;= n; i ++ ) <span class="built_in">swap</span>(a[t][i], a[r][i]);  <span class="comment">// 将绝对值最大的行换到最顶端</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = n; i &gt;= c; i -- ) a[r][i] /= a[r][c];  <span class="comment">// 将当前行的首位变成1</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = r + <span class="number">1</span>; i &lt; n; i ++ )  <span class="comment">// 用当前行将下面所有的列消成0</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">fabs</span>(a[i][c]) &gt; eps)</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> j = n; j &gt;= c; j -- )</span><br><span class="line">                    a[i][j] -= a[r][j] * a[i][c];</span><br><span class="line"></span><br><span class="line">        r ++ ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (r &lt; n) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = r; i &lt; n; i ++ )</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">fabs</span>(a[i][n]) &gt; eps)</span><br><span class="line">                <span class="keyword">return</span> <span class="number">2</span>; <span class="comment">// 无解</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">// 有无穷多组解</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i -- )</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; n; j ++ )</span><br><span class="line">            a[i][n] -= a[i][j] * a[j][n];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 有唯一解</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ )</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n + <span class="number">1</span>; j ++ )</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;a[i][j]);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> t = <span class="built_in">gauss</span>();</span><br><span class="line">    <span class="keyword">if</span> (t == <span class="number">2</span>) <span class="built_in">puts</span>(<span class="string">&quot;No solution&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (t == <span class="number">1</span>) <span class="built_in">puts</span>(<span class="string">&quot;Infinite group solutions&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ )</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%.2lf\n&quot;</span>, a[i][n]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="高斯消元解异或线性方程组"><a href="#高斯消元解异或线性方程组" class="headerlink" title="高斯消元解异或线性方程组"></a>高斯消元解异或线性方程组</h3><h4 id="题目描述-15"><a href="#题目描述-15" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230824184921866.png" alt="image-20230824184921866"></p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">输入样例：</span><br><span class="line">3</span><br><span class="line">1 1 0 1</span><br><span class="line">0 1 1 0</span><br><span class="line">1 0 0 1</span><br><span class="line">输出样例：</span><br><span class="line">1</span><br><span class="line">0</span><br><span class="line">0</span><br></pre></td></tr></table></figure><h4 id="完整代码-15"><a href="#完整代码-15" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">110</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> a[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">gauss</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> c, r;</span><br><span class="line">    <span class="keyword">for</span> (c = <span class="number">0</span>, r = <span class="number">0</span>; c &lt; n; ++ c ) &#123;</span><br><span class="line">        <span class="type">int</span> t = r;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = r; i &lt; n; ++ i )</span><br><span class="line">            <span class="keyword">if</span> (a[i][c])</span><br><span class="line">                t = i;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!a[t][c]) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = c; i &lt;= n; ++ i ) <span class="built_in">swap</span>(a[r][i], a[t][i]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = r + <span class="number">1</span>; i &lt; n; ++ i )</span><br><span class="line">            <span class="keyword">if</span> (a[i][c])</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> j = n; j &gt;= c; -- j )</span><br><span class="line">                    a[i][j] ^= a[r][j];</span><br><span class="line"></span><br><span class="line">        r ++ ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (r &lt; n) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = r; i &lt; n; ++ i )</span><br><span class="line">            <span class="keyword">if</span> (a[i][n])</span><br><span class="line">                <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; -- i )</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; n; ++ j )</span><br><span class="line">            a[i][n] ^= a[i][j] * a[j][n];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++ i )</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n + <span class="number">1</span>; ++ j )</span><br><span class="line">            cin &gt;&gt; a[i][j];</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> t = <span class="built_in">gauss</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (t == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++ i ) cout &lt;&lt; a[i][n] &lt;&lt; endl;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (t == <span class="number">1</span>) <span class="built_in">puts</span>(<span class="string">&quot;Multiple sets of solutions&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">&quot;No solution&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="求组合数"><a href="#求组合数" class="headerlink" title="求组合数"></a>求组合数</h2><h3 id="求组合数-I"><a href="#求组合数-I" class="headerlink" title="求组合数 I"></a>求组合数 I</h3><p>递推公式：C<sub>a</sub><sup>b</sup> &#x3D; C<sub>a-1</sub><sup>b</sup> + C<sub>a-1</sub><sup>b-1</sup> </p><p>先预处理全部情况</p><h4 id="题目描述-16"><a href="#题目描述-16" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230821174741314.png" alt="image-20230821174741314"></p><h4 id="完整代码-16"><a href="#完整代码-16" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2010</span>, mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> c[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; ++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt;=i; ++j)</span><br><span class="line">            <span class="keyword">if</span>(!j) c[i][j] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> c[i][j] = (c[i - <span class="number">1</span>][j] + c[i - <span class="number">1</span>][j - <span class="number">1</span>]) % mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="type">int</span> n; cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">while</span>(n --) &#123;</span><br><span class="line">        <span class="type">int</span> a, b; cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">        cout &lt;&lt; c[a][b] &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="求组合数-II"><a href="#求组合数-II" class="headerlink" title="求组合数 II"></a>求组合数 II</h3><h4 id="题目描述-17"><a href="#题目描述-17" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230821181138681.png" alt="image-20230821181138681"></p><h4 id="完整代码-17"><a href="#完整代码-17" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> fact[N], infact[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">qmi</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> k, <span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">    LL res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(k) &#123;</span><br><span class="line">        <span class="keyword">if</span>(k &amp; <span class="number">1</span>) res = res * a % p;</span><br><span class="line">        a = (LL)a * a % p;</span><br><span class="line">        k &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    fact[<span class="number">0</span>] = infact[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; N; ++i) &#123;</span><br><span class="line">        fact[i] = (LL)fact[i - <span class="number">1</span>] * i % mod;</span><br><span class="line">        infact[i] = (LL)infact[i - <span class="number">1</span>] * <span class="built_in">qmi</span>(i, mod - <span class="number">2</span>, mod) % mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> n; <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">while</span>(n --) &#123;</span><br><span class="line">        <span class="type">int</span> a, b;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, (LL)fact[a] * infact[b] % mod * infact[a - b] % mod);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="求组合数-III"><a href="#求组合数-III" class="headerlink" title="求组合数 III"></a>求组合数 III</h3><p>卢卡斯定理 Lucas Theory O(log p * N * p * log p)</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230821192325404.png" alt="image-20230821192325404"></p><h4 id="题目描述-18"><a href="#题目描述-18" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230821183455143.png" alt="image-20230821183455143"></p><h4 id="完整代码-18"><a href="#完整代码-18" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> p;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">qmi</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(k) &#123;</span><br><span class="line">        <span class="keyword">if</span>(k &amp; <span class="number">1</span>) res = (LL)res * a % p;</span><br><span class="line">        a = (LL)a * a % p;</span><br><span class="line">        k &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">C</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>, j = a; i &lt;= b; ++i, --j) &#123;</span><br><span class="line">        res = (LL)res * j % p;</span><br><span class="line">        res = (LL)res * <span class="built_in">qmi</span>(i, p - <span class="number">2</span>) % p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lucas</span><span class="params">(LL a, LL b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a &lt; p &amp;&amp; b &lt; p) <span class="keyword">return</span> <span class="built_in">C</span>(a,b);</span><br><span class="line">    <span class="keyword">return</span> (LL)<span class="built_in">C</span>(a % p, b % p) * <span class="built_in">lucas</span>(a / p, b / p) % p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n; cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">while</span>(n --) &#123;</span><br><span class="line">        LL a, b;</span><br><span class="line">        cin &gt;&gt; a &gt;&gt; b &gt;&gt; p;</span><br><span class="line">        cout &lt;&lt; <span class="built_in">lucas</span>(a,b) &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="求组合数-IV"><a href="#求组合数-IV" class="headerlink" title="求组合数 IV"></a>求组合数 IV</h3><h4 id="题目描述-19"><a href="#题目描述-19" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230821183724824.png" alt="image-20230821183724824"></p><h4 id="完整代码-19"><a href="#完整代码-19" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">5010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> primes[N], cnt;</span><br><span class="line"><span class="type">int</span> sum[N];</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_primes</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;<span class="comment">//线性筛法</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!st[i]) primes[cnt ++ ] = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; primes[j] &lt;= n / i; j ++ ) &#123;</span><br><span class="line">            st[primes[j] * i] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (i % primes[j] == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> p)</span> </span>&#123;<span class="comment">//返回n!中所有质数出现的次数</span></span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (n) &#123;</span><br><span class="line">        res += n / p;</span><br><span class="line">        n /= p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">mul</span><span class="params">(vector&lt;<span class="type">int</span>&gt; a, <span class="type">int</span> b)</span> </span>&#123;<span class="comment">//高精度乘法</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; c;</span><br><span class="line">    <span class="type">int</span> t = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; a.<span class="built_in">size</span>(); i ++ ) &#123;</span><br><span class="line">        t += a[i] * b;</span><br><span class="line">        c.<span class="built_in">push_back</span>(t % <span class="number">10</span>);</span><br><span class="line">        t /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (t) &#123;</span><br><span class="line">        c.<span class="built_in">push_back</span>(t % <span class="number">10</span>);</span><br><span class="line">        t /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> a, b;</span><br><span class="line">    cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">get_primes</span>(a);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; cnt; i ++ ) &#123;</span><br><span class="line">        <span class="type">int</span> p = primes[i];</span><br><span class="line">        sum[i] = <span class="built_in">get</span>(a, p) - <span class="built_in">get</span>(a - b, p) - <span class="built_in">get</span>(b, p);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">    res.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; cnt; i ++ )</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; sum[i]; j ++ )</span><br><span class="line">            res = <span class="built_in">mul</span>(res, primes[i]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = res.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i -- ) <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, res[i]);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="满足条件的01序列"><a href="#满足条件的01序列" class="headerlink" title="满足条件的01序列"></a>满足条件的01序列</h3><h4 id="题目描述-20"><a href="#题目描述-20" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230821183842485.png" alt="image-20230821183842485"></p><h5 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h5><p>将 01 序列置于坐标系中，起点定于原点。若 0 表示向右走，1 表示向上走，那么任何前缀中 0 的个数不少于 1 的个数就转化为，路径上的任意一点，横坐标大于等于纵坐标。题目所求即为这样的合法路径数量。</p><p>下图中，表示从 (0,0) 走到 (n,n) 的路径，在绿线及以下表示合法，若触碰红线即不合法。</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230822164719317.png" alt="image-20230822164719317"></p><p><code>关于上图所说的路径对应问题</code></p><p>找到路径与红线的第一个交点，此后的路径关于红线轴对称即可</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230822165250188.png" alt="image-20230822165250188"></p><p>答案如图，即卡特兰数</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230822165425626.png" alt="image-20230822165425626"></p><h4 id="完整代码-20"><a href="#完整代码-20" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">qmi</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> k, <span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(k) &#123;</span><br><span class="line">        <span class="keyword">if</span>(k &amp; <span class="number">1</span>) res = (LL) res * a % p;</span><br><span class="line">        a = (LL)a * a % p;</span><br><span class="line">        k &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> n; cin &gt;&gt; n;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">2</span> * n, b = n;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = a; i &gt; a - b; --i) ans = (LL)ans * i % mod;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= b; ++i) ans = (LL)ans * <span class="built_in">qmi</span>(i, mod - <span class="number">2</span>, mod) % mod;</span><br><span class="line">    </span><br><span class="line">    ans = (LL)ans * <span class="built_in">qmi</span>(n + <span class="number">1</span>, mod - <span class="number">2</span>, mod) % mod;</span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="容斥原理"><a href="#容斥原理" class="headerlink" title="容斥原理"></a>容斥原理</h2><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230916161538856.png" alt="image-20230916161538856"></p><h3 id="能被整除的数"><a href="#能被整除的数" class="headerlink" title="能被整除的数"></a>能被整除的数</h3><h4 id="题目描述-21"><a href="#题目描述-21" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230821184021899.png" alt="image-20230821184021899"></p><h4 id="完整代码-21"><a href="#完整代码-21" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> p[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; ++i ) cin &gt;&gt; p[i];</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//枚举从1 到 1111...(m个1)的每一个集合状态, (至少选中一个集合)</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; <span class="number">1</span> &lt;&lt; m; ++i) &#123;</span><br><span class="line">        <span class="type">int</span> t = <span class="number">1</span>;<span class="comment">//选中集合对应质数的乘积</span></span><br><span class="line">        <span class="type">int</span> s = <span class="number">0</span>;<span class="comment">//选中的集合数量</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//枚举当前状态的每一位</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; ++j)</span><br><span class="line">            <span class="keyword">if</span> (i &gt;&gt; j &amp; <span class="number">1</span>) &#123;<span class="comment">//选中一个集合</span></span><br><span class="line">                <span class="keyword">if</span> ((LL)t * p[j] &gt; n) &#123;<span class="comment">//乘积大于n, 则n/t = 0, 跳出这轮循环</span></span><br><span class="line">                    t = <span class="number">-1</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                t *= p[j];</span><br><span class="line">                s ++ ;<span class="comment">//有一个1，集合数量+1</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (t != <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="comment">//选中奇数个集合, 则系数应该是1, n/t为当前这种状态的集合数量</span></span><br><span class="line">            <span class="keyword">if</span> (s % <span class="number">2</span>) res += n / t;</span><br><span class="line">            <span class="keyword">else</span> res -= n / t;<span class="comment">//反之则为 -1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="博弈论"><a href="#博弈论" class="headerlink" title="博弈论"></a>博弈论</h2><p><code>必胜状态</code>：先手进行某个操作后，留给后手是一个必败状态时，对于先手来说是一个必胜状态。即<strong>先手可以走到某一个必败状态</strong></p><p><code>必败状态</code>：先手无论如何操作，留给后手都是一个必胜状态时，对于先手来说是一个必败状态。即<strong>先手走不到任何一个必败状态</strong></p><h3 id="Nim游戏"><a href="#Nim游戏" class="headerlink" title="Nim游戏"></a>Nim游戏</h3><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230904191856102.png" alt="image-20230904191856102"></p><h4 id="题目描述-22"><a href="#题目描述-22" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230824185030832.png" alt="image-20230824185030832"></p><h4 id="思路分析-5"><a href="#思路分析-5" class="headerlink" title="思路分析"></a>思路分析</h4><p>假设 n 堆石子，石子数目分别是a<sub>1</sub>，a<sub>2</sub>，…，a<sub>n</sub>，如果 a<sub>1</sub> ⊕ a<sub>2</sub> ⊕ … ⊕ a<sub>n</sub> ≠ 0，先手必胜；否则先手必败。</p><p>证明如下：</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230904191144270.png" alt="image-20230904191144270"></p><h4 id="完整代码-22"><a href="#完整代码-22" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="type">int</span> tmp; cin &gt;&gt; tmp;</span><br><span class="line">        ans ^= tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ans) cout &lt;&lt; <span class="string">&quot;Yes&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;No&quot;</span> &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="台阶-Nim游戏"><a href="#台阶-Nim游戏" class="headerlink" title="台阶-Nim游戏"></a>台阶-Nim游戏</h3><h4 id="题目描述-23"><a href="#题目描述-23" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230824185107809.png" alt="image-20230824185107809"></p><h4 id="思路分析-6"><a href="#思路分析-6" class="headerlink" title="思路分析"></a>思路分析</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230905152407522.png" alt="image-20230905152407522"></p><h4 id="完整代码-23"><a href="#完整代码-23" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="type">int</span> tmp; cin &gt;&gt; tmp;</span><br><span class="line">        <span class="keyword">if</span>(i % <span class="number">2</span>) ans ^= tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ans) cout &lt;&lt; <span class="string">&quot;Yes&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;No&quot;</span> &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="集合-Nim游戏"><a href="#集合-Nim游戏" class="headerlink" title="集合-Nim游戏"></a>集合-Nim游戏</h3><p><code>Mex运算</code></p><p>设S表示一个非负整数集合，定义mex(S)为求出不属于集合S的最小非负整数运算，即：mes(S) &#x3D; min{x};<br>例如：S&#x3D;{0,1,2,4}，那么mes(S)&#x3D;3;</p><p><code>SG函数</code></p><p>在有向图游戏中，对于每个节点x，设从x出发共有k条有向边，分别到达节点y<sub>1</sub>，y<sub>2</sub>，····y<sub>k</sub>，定义SG(x)的值为后记节点y<sub>1</sub>，y<sub>2</sub>，····y<sub>k</sub>的SG函数值构成的集合在执行mex运算的结果，即:<br>SG(x)&#x3D;mex({SG(y<sub>1</sub>)，SG(y<sub>2</sub>)····SG(y<sub>k</sub>)})<br>特别地，整个有向图游戏G的SG函数值被定义为有向图游戏起点s的SG函数值，即 SG(G)&#x3D;SG(s).</p><p><code>有向图游戏的合</code></p><p>设G<sub>1</sub>，G<sub>2</sub>，····，G<sub>m</sub>是m个有向图游戏。定义有向图游戏G，他的行动规则是任选某个有向图游戏G<sub>i</sub>，并在G<sub>i</sub>上行动一步。G被称为有向图游戏G<sub>1</sub>，G<sub>2</sub>，····，G<sub>m</sub>的和.<br>有向图游戏的和的SG函数值等于它包含的各个子游戏SG函数的异或和，即：<br>SG(G) &#x3D; SG(G<sub>1</sub>) xor SG(G<sub>2</sub>) xor ··· xor SG(G<sub>m</sub>)</p><h4 id="题目描述-24"><a href="#题目描述-24" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230824185141061.png" alt="image-20230824185141061"></p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入样例：</span><br><span class="line">2</span><br><span class="line">2 5</span><br><span class="line">3</span><br><span class="line">2 4 7</span><br><span class="line">输出样例：</span><br><span class="line">Yes</span><br></pre></td></tr></table></figure><h4 id="完整代码-24"><a href="#完整代码-24" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">110</span>, M = <span class="number">1e4</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> s[N], f[M];<span class="comment">//s存储的是可供选择的集合,f存储的是所有可能出现过的情况的sg值</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">SG</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (f[x] != <span class="number">-1</span>) <span class="keyword">return</span> f[x];<span class="comment">//记忆化搜索</span></span><br><span class="line">    <span class="comment">//因为取石子数目的集合是已经确定了的,所以每个数的sg值也都是确定的,如果存储过了,直接返回即可</span></span><br><span class="line">    </span><br><span class="line">    unordered_set&lt;<span class="type">int</span>&gt; S;<span class="comment">//S存放x各个后继节点的sg值</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; ++ i) &#123;</span><br><span class="line">        <span class="type">int</span> sum = s[i];</span><br><span class="line">        <span class="keyword">if</span>(x &gt;= sum) S.<span class="built_in">insert</span>(<span class="built_in">SG</span>(x - sum));</span><br><span class="line">        <span class="comment">//先延伸到终点的sg值后,再从后往前排查出所有数的sg值</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//循环完之后可以进行选出最小的没有出现的自然数的操作，即对S求mex</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; ; ++ i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!S.<span class="built_in">count</span>(i))</span><br><span class="line">            <span class="keyword">return</span> f[x] = i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; ++ i)</span><br><span class="line">        cin &gt;&gt; s[i];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">memset</span>(f, <span class="number">-1</span>, <span class="keyword">sizeof</span> f);</span><br><span class="line">    <span class="comment">//初始化f均为-1,方便在sg函数中查看x是否被记录过</span></span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++ i) &#123;</span><br><span class="line">        <span class="type">int</span> x;</span><br><span class="line">        cin &gt;&gt; x;</span><br><span class="line">        ans ^= <span class="built_in">SG</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (ans) cout &lt;&lt; <span class="string">&quot;Yes&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;No&quot;</span> &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="拆分-Nim游戏"><a href="#拆分-Nim游戏" class="headerlink" title="拆分-Nim游戏"></a>拆分-Nim游戏</h3><p>一个局面拆分成了若干多个局面，由SG函数理论，拆分前局面的SG值，等于拆分后多个独立局面的SG值的异或。</p><h4 id="题目描述-25"><a href="#题目描述-25" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230824185227761.png" alt="image-20230824185227761"></p><h4 id="完整代码-25"><a href="#完整代码-25" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">110</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> f[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">SG</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(f[x] != <span class="number">-1</span>) <span class="keyword">return</span> f[x];</span><br><span class="line">    unordered_set&lt;<span class="type">int</span>&gt; S;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; x; ++ i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= i; ++ j) &#123;<span class="comment">//规定j不大于i，避免重复</span></span><br><span class="line">            S.<span class="built_in">insert</span>(<span class="built_in">SG</span>(i) ^ <span class="built_in">SG</span>(j));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; ; ++ i)</span><br><span class="line">        <span class="keyword">if</span>(!S.<span class="built_in">count</span>(i))</span><br><span class="line">            <span class="keyword">return</span> f[x] = i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">memset</span>(f, <span class="number">-1</span>, <span class="keyword">sizeof</span> f);</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (n --) &#123;</span><br><span class="line">        <span class="type">int</span> x;</span><br><span class="line">        cin &gt;&gt; x;</span><br><span class="line">        ans ^= <span class="built_in">SG</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(ans) cout &lt;&lt; <span class="string">&quot;Yes&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;No&quot;</span> &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> AcWing </category>
          
          <category> 算法基础 </category>
          
          <category> 数学知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法基础课 </tag>
            
            <tag> 数学知识 </tag>
            
            <tag> 筛质数 </tag>
            
            <tag> 欧几里得算法 </tag>
            
            <tag> 欧拉函数 </tag>
            
            <tag> 快速幂 </tag>
            
            <tag> 扩展欧几里得算法 </tag>
            
            <tag> 中国剩余定理 </tag>
            
            <tag> 高斯消元 </tag>
            
            <tag> 组合数 </tag>
            
            <tag> 容斥原理 </tag>
            
            <tag> 博弈论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构</title>
      <link href="/AcWing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
      <url>/AcWing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><p>[toc]</p><h2 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h2><p>此处用数组模拟单链表，即<strong>静态链表</strong></p><p><em><strong>原因</strong></em>：主要是动态链表中new操作太慢了，算法题中会超时，所以采用空间换时间</p><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240318191157687.png" alt="image-20240318191157687"></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">==输入样例==</span><br><span class="line">10</span><br><span class="line">H 9</span><br><span class="line">I 1 1</span><br><span class="line">D 1</span><br><span class="line">D 0</span><br><span class="line">H 6</span><br><span class="line">I 3 6</span><br><span class="line">I 4 5</span><br><span class="line">I 4 5</span><br><span class="line">I 3 4</span><br><span class="line">D 6</span><br><span class="line">==输出样例==</span><br><span class="line">6 4 6 5</span><br></pre></td></tr></table></figure><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//head 表示头结点的下标</span></span><br><span class="line"><span class="comment">//e[i] 表示结点i的值</span></span><br><span class="line"><span class="comment">//ne[i] 表示结点i的next指针</span></span><br><span class="line"><span class="comment">//idx 表示当前已经用到了哪个点（下一个可用点）</span></span><br><span class="line"><span class="type">int</span> head, e[N], ne[N], idx;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    head = <span class="number">-1</span>;</span><br><span class="line">    idx = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add_to_head</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    e[idx] = x, ne[idx] = head, head = idx++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> k, <span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    e[idx] = x, ne[idx] = ne[k], ne[k] = idx++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">remove</span><span class="params">(<span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">    ne[k] = ne[ne[k]];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> m; cin &gt;&gt; m;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (m -- ) &#123;</span><br><span class="line">        <span class="type">char</span> op;</span><br><span class="line">        <span class="type">int</span> k, x;</span><br><span class="line">        cin &gt;&gt; op;</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="string">&#x27;H&#x27;</span>) &#123;</span><br><span class="line">            cin &gt;&gt; x;</span><br><span class="line">            <span class="built_in">add_to_head</span>(x);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="string">&#x27;D&#x27;</span>) &#123;</span><br><span class="line">            cin &gt;&gt; k;</span><br><span class="line">            <span class="keyword">if</span> (!k) head = ne[head];</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">remove</span>(k - <span class="number">1</span>);<span class="comment">//第k个元素对应的索引为k-1(idx从0开始)</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            cin &gt;&gt; k &gt;&gt; x;</span><br><span class="line">            <span class="built_in">add</span>(k - <span class="number">1</span>, x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = head; i != <span class="number">-1</span>; i = ne[i]) cout &lt;&lt; e[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="图解"><a href="#图解" class="headerlink" title="图解"></a>图解</h3><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/%E6%95%B0%E7%BB%84%E6%A8%A1%E6%8B%9F%E5%8D%95%E9%93%BE%E8%A1%A8%E5%9B%BE%E8%A7%A3.jpg"></p><h2 id="双链表"><a href="#双链表" class="headerlink" title="双链表"></a>双链表</h2><h3 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h3><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240318200958866.png" alt="image-20240318200958866"></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">==输入样例==</span><br><span class="line">10</span><br><span class="line">R 7</span><br><span class="line">D 1</span><br><span class="line">L 3</span><br><span class="line">IL 2 10</span><br><span class="line">D 3</span><br><span class="line">IL 2 7</span><br><span class="line">L 8</span><br><span class="line">R 9</span><br><span class="line">IL 4 7</span><br><span class="line">IR 2 2</span><br><span class="line">==输出样例==</span><br><span class="line">8 7 7 3 2 9</span><br></pre></td></tr></table></figure><h3 id="完整代码-1"><a href="#完整代码-1" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> m;</span><br><span class="line"><span class="type">int</span> e[N], l[N], r[N];</span><br><span class="line"><span class="type">int</span> idx;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//规定下标0为head,下标1为tail</span></span><br><span class="line">    l[<span class="number">1</span>] = <span class="number">0</span>, r[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    idx = <span class="number">2</span>;<span class="comment">// idx 此时已经用掉两个点了</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在第 K 个点右边插入一个 X </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> k, <span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    e[idx] = x;</span><br><span class="line">    l[idx] = k;</span><br><span class="line">    r[idx] = r[k];</span><br><span class="line">    l[r[k]] = idx;</span><br><span class="line">    r[k] = idx;</span><br><span class="line">    ++ idx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当然在k的左边插入一个数可以再写一个函数,也可以直接调用我们这个函数,在k的左边插入一个数等价于在l[k]的右边插入一个数:add(l[k],x)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//删除第k个点</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">remove</span><span class="params">(<span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">    r[l[k]] = r[k];</span><br><span class="line">    l[r[k]] = l[k];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin &gt;&gt; m;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (m -- ) &#123;</span><br><span class="line">        string op; cin &gt;&gt; op;</span><br><span class="line">        <span class="type">int</span> k, x;</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="string">&quot;R&quot;</span>) &#123;</span><br><span class="line">            <span class="comment">//0和1只是代表头和尾,所以最右边插入只要在指向1的那个点的右边插入就可以了</span></span><br><span class="line">            cin &gt;&gt; x;</span><br><span class="line">            <span class="built_in">add</span>(l[<span class="number">1</span>], x);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="string">&quot;L&quot;</span>) &#123;</span><br><span class="line">            <span class="comment">//最左边插入就是在指向0的数的左边插入就可以了也就是可以直接在0的右边插入</span></span><br><span class="line">            cin &gt;&gt; x;</span><br><span class="line">            <span class="built_in">add</span>(<span class="number">0</span>, x);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="string">&quot;D&quot;</span>) &#123;</span><br><span class="line">            <span class="comment">//第k个插入的数使用的idx为k+1(因为idx从2开始)</span></span><br><span class="line">            cin &gt;&gt; k;</span><br><span class="line">            <span class="built_in">remove</span>(k + <span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="string">&quot;IL&quot;</span>) &#123;</span><br><span class="line">            cin &gt;&gt; k &gt;&gt; x;</span><br><span class="line">            <span class="built_in">add</span>(l[k + <span class="number">1</span>], x);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            cin &gt;&gt; k &gt;&gt; x;</span><br><span class="line">            <span class="built_in">add</span>(k + <span class="number">1</span>, x);</span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = r[<span class="number">0</span>]; i != <span class="number">1</span>; i = r[i]) cout &lt;&lt; e[i] &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><h3 id="模拟栈"><a href="#模拟栈" class="headerlink" title="模拟栈"></a>模拟栈</h3><h4 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240321192030027.png" alt="image-20240321192030027"></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">==输入样例==</span><br><span class="line">10</span><br><span class="line">push 5</span><br><span class="line">query</span><br><span class="line">push 6</span><br><span class="line">pop</span><br><span class="line">query</span><br><span class="line">pop</span><br><span class="line">empty</span><br><span class="line">push 4</span><br><span class="line">query</span><br><span class="line">empty</span><br><span class="line">==输出样例==</span><br><span class="line">5</span><br><span class="line">5</span><br><span class="line">YES</span><br><span class="line">4</span><br><span class="line">NO</span><br></pre></td></tr></table></figure><h4 id="完整代码-2"><a href="#完整代码-2" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//stk表示栈，tt表示栈顶元素后一个元素下标</span></span><br><span class="line"><span class="type">int</span> stk[N], tt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入，stk[tt++] = x;</span></span><br><span class="line"><span class="comment">//弹出，--tt;</span></span><br><span class="line"><span class="comment">//判断栈是否为空if(tt &gt; 0) not empty;else empty</span></span><br><span class="line"><span class="comment">//取栈顶元素，stk[tt-1];</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">search</span><span class="params">(string in)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (in == <span class="string">&quot;push&quot;</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (in == <span class="string">&quot;pop&quot;</span>) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (in == <span class="string">&quot;empty&quot;</span>) <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> M = <span class="number">0</span>; cin &gt;&gt; M;</span><br><span class="line">    <span class="keyword">while</span> (M -- ) &#123;</span><br><span class="line">        string str; cin &gt;&gt; str;</span><br><span class="line">        <span class="keyword">switch</span> (<span class="built_in">search</span>(str)) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>: &#123;</span><br><span class="line">                <span class="type">int</span> num; cin &gt;&gt; num;</span><br><span class="line">                stk[tt ++] = num;</span><br><span class="line">            &#125;<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>: &#123;</span><br><span class="line">                -- tt;</span><br><span class="line">            &#125;<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>: &#123;</span><br><span class="line">                <span class="keyword">if</span> (tt &gt; <span class="number">0</span>) cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class="line">                <span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; endl;</span><br><span class="line">            &#125;<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>: &#123;</span><br><span class="line">                cout &lt;&lt; stk[tt - <span class="number">1</span>] &lt;&lt; endl;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="表达式求值"><a href="#表达式求值" class="headerlink" title="表达式求值"></a>表达式求值</h3><h4 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240321192348551.png" alt="image-20240321192348551"></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">==输入样例==</span><br><span class="line">(2+2)*(1+1)</span><br><span class="line">==输出样例==</span><br><span class="line">8</span><br></pre></td></tr></table></figure><h4 id="完整代码-3"><a href="#完整代码-3" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//存储运算数 运算符</span></span><br><span class="line">stack&lt;<span class="type">int</span>&gt; num;</span><br><span class="line">stack&lt;<span class="type">char</span>&gt; op;</span><br><span class="line"></span><br><span class="line"><span class="comment">//建立映射来判断运算优先级</span></span><br><span class="line">unordered_map&lt;<span class="type">char</span>, <span class="type">int</span>&gt; cmp = &#123;</span><br><span class="line">    &#123;<span class="string">&#x27;+&#x27;</span>, <span class="number">1</span>&#125;, &#123;<span class="string">&#x27;-&#x27;</span>, <span class="number">1</span>&#125; , &#123;<span class="string">&#x27;*&#x27;</span>, <span class="number">2</span>&#125;, &#123;<span class="string">&#x27;/&#x27;</span>, <span class="number">2</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//模拟一次算术操作</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">eval</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> b = num.<span class="built_in">top</span>();  num.<span class="built_in">pop</span>();<span class="comment">//第二个操作数</span></span><br><span class="line">    <span class="type">int</span> a = num.<span class="built_in">top</span>();  num.<span class="built_in">pop</span>();<span class="comment">//第一个操作数</span></span><br><span class="line">    <span class="type">char</span> opr = op.<span class="built_in">top</span>();    op.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="keyword">if</span> (opr == <span class="string">&#x27;+&#x27;</span>)  x = a + b;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (opr == <span class="string">&#x27;-&#x27;</span>) x = a - b;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (opr == <span class="string">&#x27;*&#x27;</span>) x = a * b;</span><br><span class="line">    <span class="keyword">else</span> x = a / b;</span><br><span class="line">    num.<span class="built_in">push</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string str; cin &gt;&gt; str;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; str.<span class="built_in">size</span>(); ++ i)&#123;</span><br><span class="line">        <span class="type">char</span> c = str[i];</span><br><span class="line">        <span class="comment">//读入运算数</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">isdigit</span>(c)) &#123;</span><br><span class="line">            <span class="type">int</span> j = i, x = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (j &lt; str.<span class="built_in">size</span>() &amp;&amp; <span class="built_in">isdigit</span>(str[j]))&#123;</span><br><span class="line">                <span class="comment">//j++ 迭代不能忘 </span></span><br><span class="line">                x = x * <span class="number">10</span> + str[j ++] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            num.<span class="built_in">push</span>(x);</span><br><span class="line">            <span class="comment">//由于每轮循环有i++,我们需要倒指向最后一个数字</span></span><br><span class="line">            i = j - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">            <span class="comment">//标记一下，括号内数据</span></span><br><span class="line">            op.<span class="built_in">push</span>(c);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;)&#x27;</span>) &#123;</span><br><span class="line">            <span class="comment">//括号的优先级，先算括号</span></span><br><span class="line">            <span class="keyword">while</span>(op.<span class="built_in">size</span>() &amp;&amp; op.<span class="built_in">top</span>() != <span class="string">&#x27;(&#x27;</span>)   <span class="built_in">eval</span>();</span><br><span class="line">            <span class="comment">//左括号弹出</span></span><br><span class="line">            op.<span class="built_in">pop</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//得先把乘除法算了再算加减</span></span><br><span class="line">            <span class="comment">//这里必须得带等于号 我们这题都是正整数计算</span></span><br><span class="line">            <span class="comment">// 0 - 5 + 3 </span></span><br><span class="line">            <span class="comment">//如果不算，上式会被错误计算成 -8</span></span><br><span class="line">            <span class="keyword">while</span> (op.<span class="built_in">size</span>() &amp;&amp; cmp[op.<span class="built_in">top</span>()] &gt;= cmp[c])    <span class="built_in">eval</span>();</span><br><span class="line">            <span class="comment">//压入新运算符</span></span><br><span class="line">            op.<span class="built_in">push</span>(c);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//清理低优先级操作</span></span><br><span class="line">    <span class="keyword">while</span> (op.<span class="built_in">size</span>()) <span class="built_in">eval</span>();</span><br><span class="line">    cout &lt;&lt; num.<span class="built_in">top</span>() &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><h3 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h3><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240321194627035.png" alt="image-20240321194627035"></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">==输入样例==</span><br><span class="line">10</span><br><span class="line">push 6</span><br><span class="line">empty</span><br><span class="line">query</span><br><span class="line">pop</span><br><span class="line">empty</span><br><span class="line">push 3</span><br><span class="line">push 4</span><br><span class="line">pop</span><br><span class="line">query</span><br><span class="line">push 6</span><br><span class="line">==输出样例==</span><br><span class="line">NO</span><br><span class="line">6</span><br><span class="line">YES</span><br><span class="line">4</span><br></pre></td></tr></table></figure><h3 id="完整代码-4"><a href="#完整代码-4" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//队尾插入元素,队头删除元素</span></span><br><span class="line"><span class="comment">//队头指向队列第一个元素,队尾指向队列最后一个元素后一个位置</span></span><br><span class="line"><span class="type">int</span> q[N], hh, tt = <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">//插入q[tt ++] = x;</span></span><br><span class="line"> <span class="comment">//弹出++ hh;</span></span><br><span class="line"> <span class="comment">//判断队列是否为空if(hh &lt; tt) not empty; else empty;</span></span><br><span class="line"> <span class="comment">//取出队头元素 q[hh]</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">search</span><span class="params">(string in)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (in == <span class="string">&quot;push&quot;</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (in == <span class="string">&quot;pop&quot;</span>) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (in == <span class="string">&quot;empty&quot;</span>) <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> M = <span class="number">0</span>; cin &gt;&gt; M;</span><br><span class="line">    <span class="keyword">while</span> (M -- ) &#123;</span><br><span class="line">        string str; cin &gt;&gt; str;</span><br><span class="line">        <span class="keyword">switch</span> (<span class="built_in">search</span>(str)) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>: &#123;</span><br><span class="line">                <span class="type">int</span> x; cin &gt;&gt; x;</span><br><span class="line">                q[tt ++] = x;</span><br><span class="line">            &#125;<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>: &#123;</span><br><span class="line">                ++ hh;</span><br><span class="line">            &#125;<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>: &#123;</span><br><span class="line">                <span class="keyword">if</span> (hh &lt; tt) cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class="line">                <span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; endl;</span><br><span class="line">            &#125;<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>: &#123;</span><br><span class="line">                cout &lt;&lt; q[hh] &lt;&lt; endl;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="单调栈"><a href="#单调栈" class="headerlink" title="单调栈"></a>单调栈</h2><h3 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h3><p>一种特殊的栈，在栈原有的<strong>先进后出</strong>基础上，要求从栈底到栈顶满足<strong>单调</strong>。主要用于：O(n) 解决<strong>NGE问题(Next Greater Element)</strong></p><p>分为：单调递增栈和单调递减栈</p><p>如何维护一个单调栈：</p><ul><li>单调递增栈：在保持栈内元素单调递增的前提下（如果栈顶元素<strong>大于</strong>要入栈的元素，将将其弹出），将新元素入栈</li><li>单调递减栈：在保持栈内元素单调递减的前提下（如果栈顶元素<strong>小于</strong>要入栈的元素，则将其弹出），将新元素入栈</li></ul><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240323192426396.png" alt="image-20240323192426396"></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240323192520819.png" alt="image-20240323192520819"></p><h3 id="题目描述-5"><a href="#题目描述-5" class="headerlink" title="题目描述"></a>题目描述</h3><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240323190055497.png" alt="image-20240323190055497"></p><h3 id="完整代码-5"><a href="#完整代码-5" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> stk[N], top;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    <span class="type">int</span> n; cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++ i) &#123;</span><br><span class="line">        <span class="type">int</span> x; cin &gt;&gt; x;</span><br><span class="line">        <span class="keyword">while</span> (top &amp;&amp; stk[top - <span class="number">1</span>] &gt;= x) -- top;</span><br><span class="line">        <span class="keyword">if</span> (top) cout &lt;&lt; stk[top - <span class="number">1</span>] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        <span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;-1&quot;</span> &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        stk[top ++] = x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="图解-1"><a href="#图解-1" class="headerlink" title="图解"></a>图解</h3><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/%E5%9B%BE%E8%A7%A3.gif" alt="图解"></p><h2 id="单调队列"><a href="#单调队列" class="headerlink" title="单调队列"></a>单调队列</h2><h3 id="题目描述-6"><a href="#题目描述-6" class="headerlink" title="题目描述"></a>题目描述</h3><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/20250215213535.png"></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">输入格式</span><br><span class="line">输入包含两行。</span><br><span class="line">第一行包含两个整数 n和 k，分别代表数组长度和滑动窗口的长度。</span><br><span class="line">第二行有 n个整数，代表数组的具体数值。</span><br><span class="line">同行数据之间用空格隔开。</span><br><span class="line"></span><br><span class="line">输出格式</span><br><span class="line">输出包含两个。</span><br><span class="line">第一行输出，从左至右，每个位置滑动窗口中的最小值。</span><br><span class="line">第二行输出，从左至右，每个位置滑动窗口中的最大值。</span><br><span class="line"></span><br><span class="line">输入样例</span><br><span class="line">8 3</span><br><span class="line">1 3 -1 -3 5 3 6 7</span><br><span class="line"></span><br><span class="line">输出样例</span><br><span class="line">-1 -3 -3 -3 3 3</span><br><span class="line">3 3 5 5 6 7</span><br></pre></td></tr></table></figure><h3 id="完整代码-6"><a href="#完整代码-6" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, k;</span><br><span class="line"><span class="type">int</span> a[N], q[N], hh, tt;</span><br><span class="line"><span class="comment">//这次q[N]中存储的是下标</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++ i) cin &gt;&gt; a[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++ i) &#123;  <span class="comment">//hh &lt; tt 时, 单调队列中才有元素</span></span><br><span class="line">        <span class="keyword">if</span> (hh &lt; tt &amp;&amp; q[hh] &lt; i - k + <span class="number">1</span>) ++ hh;  <span class="comment">//滑动窗口大小k</span></span><br><span class="line">        <span class="keyword">while</span> (hh &lt; tt &amp;&amp; a[q[tt - <span class="number">1</span>]] &gt;= a[i]) -- tt;</span><br><span class="line">        q[tt ++] = i;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= k - <span class="number">1</span>) cout &lt;&lt; a[q[hh]] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    hh = <span class="number">0</span>, tt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++ i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (hh &lt; tt &amp;&amp; q[hh] &lt; i - k + <span class="number">1</span>) ++ hh;</span><br><span class="line">        <span class="keyword">while</span> (hh &lt; tt &amp;&amp; a[q[tt - <span class="number">1</span>]] &lt;= a[i]) -- tt;</span><br><span class="line">        q[tt ++] = i;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= k - <span class="number">1</span>) cout &lt;&lt; a[q[hh]] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="KMP"><a href="#KMP" class="headerlink" title="KMP"></a>KMP</h2><h3 id="题目描述-7"><a href="#题目描述-7" class="headerlink" title="题目描述"></a>题目描述</h3><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/20250215221850.png"></p><h3 id="next数组求解思路与实现代码"><a href="#next数组求解思路与实现代码" class="headerlink" title="next数组求解思路与实现代码"></a>next数组求解思路与实现代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//求next的过程</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>, j = <span class="number">0</span>; i &lt;= n; ++ i) &#123;</span><br><span class="line">    <span class="keyword">while</span> (j &amp;&amp; p[i] != p[j + <span class="number">1</span>]) j = ne[j];</span><br><span class="line">    <span class="keyword">if</span> (p[i] == p[j + <span class="number">1</span>]) ++ j;</span><br><span class="line">    ne[i] = j;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> next数组的求法是通过模板串自己与自己进行匹配操作得出来的（代码和匹配操作几乎一样）。</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/next%E6%95%B0%E7%BB%84.PNG"></p><h3 id="KMP匹配思路与实现代码"><a href="#KMP匹配思路与实现代码" class="headerlink" title="KMP匹配思路与实现代码"></a>KMP匹配思路与实现代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//kmp的匹配过程</span></span><br><span class="line"><span class="comment">//每次都是匹配p[j+1]和s[i]</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, j = <span class="number">0</span>; i &lt;= m; ++ i) &#123;</span><br><span class="line">    <span class="keyword">while</span> (j &amp;&amp; s[i] != p[j + <span class="number">1</span>]) j = ne[j];</span><br><span class="line">    <span class="comment">//如果j有对应p串的元素， 且s[i] != p[j+1], 则失配， 移动p串</span></span><br><span class="line">    <span class="comment">//用while是由于移动后可能仍然失配，所以要继续移动直到匹配或整个p串移到后面（j = 0)</span></span><br><span class="line">    <span class="keyword">if</span> (s[i] == p[j + <span class="number">1</span>]) ++ j;</span><br><span class="line">    <span class="comment">//当前元素匹配，j移向p串下一位</span></span><br><span class="line">    <span class="keyword">if</span> (j == n) &#123;</span><br><span class="line">        <span class="comment">//匹配成功，进行相关操作</span></span><br><span class="line">        cout &lt;&lt; i - n &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        j = ne[j];<span class="comment">//继续匹配下一个子串</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/KMP%E5%8C%B9%E9%85%8D.PNG"></p><p> s串 和 p串都是从1开始的。i 从1开始，j 从0开始，每次s[ i ] 和p[ j + 1 ]比较 。</p><p>当匹配过程到上图所示时，</p><p>s[ a , b ] &#x3D; p[ 1, j ] &amp;&amp; s[ i ] !&#x3D; p[ j + 1 ] 此时要移动p串（不是移动1格，而是直接移动到下次能匹配的位置）</p><p>其中1串为[ 1, next[ j ] ]，3串为[ j - next[ j ] + 1 , j ]。由匹配可知 1串等于3串，3串等于2串。所以直接移动p串使1到3的位置即可。这个操作可由j &#x3D; next[ j ]直接完成。 如此往复下去，当 j &#x3D;&#x3D; m时匹配成功。</p><h3 id="完整代码-7"><a href="#完整代码-7" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//完整代码</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> p[N], s[M]; <span class="comment">// 用 p 来匹配 s</span></span><br><span class="line"><span class="type">int</span> ne[N]; </span><br><span class="line"><span class="type">int</span> n, m; <span class="comment">// n 是模板串长度 m 是模式串长度</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//数组均从下标1开始存储</span></span><br><span class="line">    cin &gt;&gt; n &gt;&gt; p + <span class="number">1</span> &gt;&gt; m &gt;&gt; s + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造模板串的 next 数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>, j = <span class="number">0</span>; i &lt;= n; ++ i) &#123;</span><br><span class="line">        <span class="keyword">while</span> (j &amp;&amp; p[i] != p[j + <span class="number">1</span>]) j = ne[j];</span><br><span class="line">        <span class="keyword">if</span> (p[i] == p[j + <span class="number">1</span>]) ++ j;</span><br><span class="line">        ne[i] = j;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// kmp start !</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, j = <span class="number">0</span>; i &lt;= m; ++ i) &#123;</span><br><span class="line">        <span class="keyword">while</span> (j &amp;&amp; s[i] != p[j + <span class="number">1</span>]) j = ne[j];</span><br><span class="line">        <span class="keyword">if</span> (s[i] == p[j + <span class="number">1</span>]) ++ j;</span><br><span class="line">        <span class="keyword">if</span> (j == n) &#123;</span><br><span class="line">           cout &lt;&lt; i - n &lt;&lt; <span class="string">&quot; &quot;</span>;<span class="comment">//输出子串开始下标(若从1开始，加1)</span></span><br><span class="line">           j = ne[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Trie"><a href="#Trie" class="headerlink" title="Trie"></a>Trie</h2><h3 id="Trie树"><a href="#Trie树" class="headerlink" title="Trie树"></a>Trie树</h3><p>高效地存储和查找字符串集合的数据结构，又称字典树、单词查找树</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/Trie1.PNG"></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/Trie2.PNG"></p><h4 id="插入代码"><a href="#插入代码" class="headerlink" title="插入代码"></a>插入代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">char</span> *str)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> p = <span class="number">0</span>;  <span class="comment">//类似指针，指向当前节点</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; str[i]; ++ i) &#123;</span><br><span class="line">        <span class="type">int</span> u = str[i] - <span class="string">&#x27;a&#x27;</span>; <span class="comment">//将字母转化为数字</span></span><br><span class="line">        <span class="keyword">if</span> (!son[p][u]) son[p][u] = ++idx;</span><br><span class="line">        <span class="comment">//该节点不存在，创建节点,其值为下一个节点位置</span></span><br><span class="line">        p = son[p][u];  <span class="comment">//使“p指针”指向下一个节点位置</span></span><br><span class="line">    &#125;</span><br><span class="line">    ++ cnt[p];  <span class="comment">//结束时的标记，也是记录以此节点结束的字符串个数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="查找操作代码"><a href="#查找操作代码" class="headerlink" title="查找操作代码"></a>查找操作代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">char</span> *str)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> p = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; str[i]; ++ i) &#123;</span><br><span class="line">        <span class="type">int</span> u = str[i] - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span> (!son[p][u]) <span class="keyword">return</span> <span class="number">0</span>;  <span class="comment">//该节点不存在，即该字符串不存在</span></span><br><span class="line">        p = son[p][u]; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt[p];  <span class="comment">//返回字符串出现的次数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Trie字符串统计"><a href="#Trie字符串统计" class="headerlink" title="Trie字符串统计"></a>Trie字符串统计</h3><h4 id="题目描述-8"><a href="#题目描述-8" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20250216204843359.png" alt="image-20250216204843359"></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">输入样例</span><br><span class="line">5</span><br><span class="line">I abc</span><br><span class="line">Q abc</span><br><span class="line">Q ab</span><br><span class="line">I ab</span><br><span class="line">Q ab</span><br><span class="line">输出样例</span><br><span class="line">1</span><br><span class="line">0</span><br><span class="line">1</span><br></pre></td></tr></table></figure><h4 id="完整代码-8"><a href="#完整代码-8" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> son[N][<span class="number">26</span>], cnt[N], idx;</span><br><span class="line"><span class="type">char</span> str[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">char</span> str[])</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> p = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; str[i]; ++ i) &#123;</span><br><span class="line">        <span class="type">int</span> u = str[i] - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span> (!son[p][u]) son[p][u] = ++idx;</span><br><span class="line">        p = son[p][u];</span><br><span class="line">    &#125;</span><br><span class="line">    ++ cnt[p];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">char</span> str[])</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> p = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; str[i]; ++ i) &#123;</span><br><span class="line">        <span class="type">int</span> u = str[i] - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span> (!son[p][u]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        p = son[p][u];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt[p];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n; cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">while</span> ( n -- ) &#123;</span><br><span class="line">        <span class="type">char</span> op[<span class="number">2</span>];</span><br><span class="line">        cin &gt;&gt; op &gt;&gt; str;</span><br><span class="line">        <span class="keyword">if</span> (op[<span class="number">0</span>] == <span class="string">&#x27;I&#x27;</span>) <span class="built_in">insert</span>(str);</span><br><span class="line">        <span class="keyword">else</span> cout &lt;&lt; <span class="built_in">query</span>(str) &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最大异或对"><a href="#最大异或对" class="headerlink" title="最大异或对"></a>最大异或对</h3><h4 id="题目描述-9"><a href="#题目描述-9" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/20250216205908.png"></p><h4 id="完整代码-9"><a href="#完整代码-9" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//暴力解法，会TLE</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++ i) cin &gt;&gt; a[i];</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++ i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; ++ j)</span><br><span class="line">            res = <span class="built_in">max</span>(res,a[i]^a[j]);</span><br><span class="line">            </span><br><span class="line">    cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//优化</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M = <span class="number">31</span> * N;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> son[M][<span class="number">2</span>], idx;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> p = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">30</span>; ~i; -- i) &#123;</span><br><span class="line">        <span class="type">int</span> &amp;s = son[p][x &gt;&gt; i &amp; <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (!s) s = ++idx;<span class="comment">//创建新节点</span></span><br><span class="line">        p = s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>, p = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">30</span>; ~i; -- i) &#123;</span><br><span class="line">        <span class="type">int</span> s = x &gt;&gt; i &amp; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (son[p][!s]) &#123;</span><br><span class="line">            res += <span class="number">1</span> &lt;&lt; i;</span><br><span class="line">            p = son[p][!s];</span><br><span class="line">        &#125; <span class="keyword">else</span> p = son[p][s];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++ i) &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">        <span class="built_in">insert</span>(a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++ i) res = <span class="built_in">max</span>(res,<span class="built_in">query</span>(a[i]));</span><br><span class="line">    cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h2><h3 id="function"><a href="#function" class="headerlink" title="function"></a>function</h3><ol><li>将两个集合合并</li><li>询问两个元素是否在一个集合当中</li><li>并查集维护的是一堆集合（集）</li></ol><h3 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h3><p>每个集合用一棵树来表示。树根的编号就是整个集合的编号。每个节点存储它的父节点，p[x]表示x的父节点</p><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><h4 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h4><p>如何判断树根：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (p[x] == x);</span><br></pre></td></tr></table></figure><h4 id="问题二"><a href="#问题二" class="headerlink" title="问题二"></a>问题二</h4><p>如何求x的集合编号：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (p[x] != x) x = p[x];</span><br></pre></td></tr></table></figure><p>优化：<code>路径压缩</code>，即一旦找到某个节点的集合编号（祖先），直接将该节点到根节点路径上所有点的 p[x] 指向集合编号（祖先）</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/find()%E8%B7%AF%E5%BE%84%E5%8E%8B%E7%BC%A9%E5%9B%BE%E8%A7%A3.png"></p><h4 id="问题三"><a href="#问题三" class="headerlink" title="问题三"></a>问题三</h4><p>如何合并两个集合</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//p[x]是x的集合编号，p[y]是y的集合编号。</span></span><br><span class="line">p[x] = y;</span><br></pre></td></tr></table></figure><h3 id="合并集合"><a href="#合并集合" class="headerlink" title="合并集合"></a>合并集合</h3><h4 id="题目描述-10"><a href="#题目描述-10" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/20250216220040.png"></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">输入样例</span><br><span class="line">4 5</span><br><span class="line">M 1 2</span><br><span class="line">M 3 4</span><br><span class="line">Q 1 2</span><br><span class="line">Q 1 3</span><br><span class="line">Q 3 4</span><br><span class="line"></span><br><span class="line">输出样例</span><br><span class="line">Yes</span><br><span class="line">No</span><br><span class="line">Yes</span><br></pre></td></tr></table></figure><h4 id="完整代码-10"><a href="#完整代码-10" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> p[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;<span class="comment">//返回x的祖宗节点 + 路径压缩</span></span><br><span class="line">    <span class="keyword">if</span> (p[x] != x) p[x] = <span class="built_in">find</span>(p[x]);<span class="comment">//递归</span></span><br><span class="line">    <span class="keyword">return</span> p[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) p[i] = i;</span><br><span class="line">    <span class="keyword">while</span> ( m -- ) &#123;</span><br><span class="line">        string op;</span><br><span class="line">        <span class="type">int</span> a, b;</span><br><span class="line">        cin &gt;&gt; op &gt;&gt; a &gt;&gt; b;</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="string">&quot;M&quot;</span>) p[<span class="built_in">find</span>(a)] = <span class="built_in">find</span>(b);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">find</span>(a) == <span class="built_in">find</span>(b)) cout &lt;&lt; <span class="string">&quot;Yes&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;No&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="连通块中点的数量"><a href="#连通块中点的数量" class="headerlink" title="连通块中点的数量"></a>连通块中点的数量</h3><h4 id="题目描述-11"><a href="#题目描述-11" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/20250216220726.png"></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">输入样例</span><br><span class="line">5 5</span><br><span class="line">C 1 2</span><br><span class="line">Q1 1 2</span><br><span class="line">Q2 1</span><br><span class="line">C 2 5</span><br><span class="line">Q2 5</span><br><span class="line"></span><br><span class="line">输出样例</span><br><span class="line">Yes</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td></tr></table></figure><h4 id="完整代码-11"><a href="#完整代码-11" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> p[N], nums[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;<span class="comment">//返回x的祖宗节点 + 路径压缩</span></span><br><span class="line">    <span class="keyword">if</span> (p[x] != x) p[x] = <span class="built_in">find</span>(p[x]);<span class="comment">//递归</span></span><br><span class="line">    <span class="keyword">return</span> p[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) &#123;</span><br><span class="line">        p[i] = i;</span><br><span class="line">        nums[i] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( m -- ) &#123;</span><br><span class="line">        string op;</span><br><span class="line">        <span class="type">int</span> a, b;</span><br><span class="line">        cin &gt;&gt; op;</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="string">&quot;C&quot;</span>) &#123;</span><br><span class="line">            cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">find</span>(a) == <span class="built_in">find</span>(b)) <span class="keyword">continue</span>;</span><br><span class="line">            nums[<span class="built_in">find</span>(b)] += nums[<span class="built_in">find</span>(a)]; </span><br><span class="line">            p[<span class="built_in">find</span>(a)] = <span class="built_in">find</span>(b);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="string">&quot;Q1&quot;</span>) &#123;</span><br><span class="line">            cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">find</span>(a) == <span class="built_in">find</span>(b)) cout &lt;&lt; <span class="string">&quot;Yes&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;No&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            cin &gt;&gt; a;</span><br><span class="line">            cout &lt;&lt; nums[<span class="built_in">find</span>(a)] &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="食物链"><a href="#食物链" class="headerlink" title="食物链"></a>食物链</h3><h4 id="题目描述-12"><a href="#题目描述-12" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/20250216222143.png"></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">输入格式</span><br><span class="line">第一行是两个整数 N 和 K，以一个空格分隔。</span><br><span class="line">以下K行，每行是三个正整数 D，X，Y，两数之间用一个空格隔开，其中 D 表示说法的种类。</span><br><span class="line">若 D=1，则表示 X 和 Y 是同类。</span><br><span class="line">若 D=2，则表示 X 吃 Y。</span><br><span class="line">输出格式</span><br><span class="line">只有一个整数，表示假话的数目。</span><br><span class="line">数据范围</span><br><span class="line">1≤N≤50000,0≤K≤100000</span><br><span class="line"></span><br><span class="line">输入样例</span><br><span class="line">100 7</span><br><span class="line">1 101 1</span><br><span class="line">2 1 2</span><br><span class="line">2 2 3</span><br><span class="line">2 3 3</span><br><span class="line">1 1 3</span><br><span class="line">2 3 1</span><br><span class="line">1 5 5</span><br><span class="line"></span><br><span class="line">输出样例</span><br><span class="line">3</span><br></pre></td></tr></table></figure><h4 id="完整代码-12"><a href="#完整代码-12" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">5e4</span> + <span class="number">10</span>;</span><br><span class="line"><span class="comment">//当动物x和动物y的距离之差%3等于1时,说明x捕食y</span></span><br><span class="line"><span class="comment">//当动物x和动物y的距离之差%3等于2时,说明y捕食x</span></span><br><span class="line"><span class="comment">//当动物x和动物y的距离之差%3等于0时,说明x和y是同类</span></span><br><span class="line"><span class="type">int</span> p[N], d[N];</span><br><span class="line"><span class="type">int</span> n, k;</span><br><span class="line"><span class="type">int</span> cnt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x != p[x]) &#123;</span><br><span class="line">        <span class="type">int</span> tmp = <span class="built_in">find</span>(p[x]);</span><br><span class="line">        d[x] += d[p[x]];</span><br><span class="line">        p[x] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n&gt;&gt; k;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) p[i] = i;</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> t, x, y;</span><br><span class="line">    <span class="keyword">while</span> ( k -- ) &#123;</span><br><span class="line">        cin &gt;&gt; t &gt;&gt; x &gt;&gt; y;</span><br><span class="line">        <span class="keyword">if</span> (x &gt; n || y &gt; n) ++ cnt;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">int</span> px = <span class="built_in">find</span>(x);</span><br><span class="line">            <span class="type">int</span> py = <span class="built_in">find</span>(y);</span><br><span class="line">            <span class="keyword">if</span> (t == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">//x和y在同一个集合中，且x和y不是同一类，假话加一</span></span><br><span class="line">                <span class="keyword">if</span> (px == py &amp;&amp; (d[x] - d[y]) % <span class="number">3</span>) ++ cnt;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (px != py) &#123;</span><br><span class="line">                    <span class="comment">//x和y不在同一个集合，集合合并，将px接在py上</span></span><br><span class="line">                    p[px] = py;</span><br><span class="line">                    d[px] = d[y] - d[x];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//x和y在同一个集合中，且x不能捕食y，假话加一</span></span><br><span class="line">                <span class="keyword">if</span> (px == py &amp;&amp; (d[x] - d[y] - <span class="number">1</span>) % <span class="number">3</span>) ++ cnt;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (px != py) &#123;</span><br><span class="line">                    <span class="comment">//x和y不在同一个集合，集合合并，将px接在py上</span></span><br><span class="line">                    p[px] = py;</span><br><span class="line">                    d[px] = d[y] - d[x] + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; cnt &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h2><ol><li><p>插入一个数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">heap[++len] = x;</span><br><span class="line"><span class="built_in">up</span>(len);</span><br></pre></td></tr></table></figure></li><li><p>求集合当中的最小值</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">heap[<span class="number">1</span>];</span><br></pre></td></tr></table></figure></li><li><p>删除最小值</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">heap[<span class="number">1</span>] = heap[len--];</span><br><span class="line"><span class="built_in">down</span>(<span class="number">1</span>);</span><br></pre></td></tr></table></figure></li><li><p>删除任意元素</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">heap[k] = heap[len--];</span><br><span class="line"><span class="built_in">down</span>(k), <span class="built_in">up</span>(k);</span><br></pre></td></tr></table></figure></li><li><p>修改任意一个元素</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">heap[k] = x;</span><br><span class="line"><span class="built_in">down</span>(k), <span class="built_in">up</span>(k);</span><br></pre></td></tr></table></figure></li></ol><p><strong>完全二叉树</strong></p><p>小根堆：每个节点都满足：小于等于其左右儿子(根节点是最小值)</p><p>&#x3D;&#x3D;堆的存储：&#x3D;&#x3D;采用一维数组进行存储</p><p>x的左儿子：2x；x的右儿子：2x+1。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">down</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> t = u;</span><br><span class="line">    <span class="keyword">if</span> (u*<span class="number">2</span> &lt;= len &amp;&amp; h[u*<span class="number">2</span>] &lt; h[t]) t = u*<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (u*<span class="number">2</span>+<span class="number">1</span> &lt;= len &amp;&amp; h[u*<span class="number">2</span>+<span class="number">1</span>] &lt; h[t]) t = u*<span class="number">2</span>+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (t != u) &#123;</span><br><span class="line">        <span class="built_in">heap_swap</span>(u,t);</span><br><span class="line">        <span class="built_in">down</span>(t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">up</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (u/<span class="number">2</span> &amp;&amp; h[u/<span class="number">2</span>] &gt; h[u]) &#123;</span><br><span class="line">        <span class="built_in">heap_swap</span>(u/<span class="number">2</span>,u);</span><br><span class="line">        u /= <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/%E5%B0%8F%E6%A0%B9%E5%A0%86%E5%BB%BA%E7%AB%8B.jpg"></p><h3 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h3><h4 id="题目描述-13"><a href="#题目描述-13" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20250216222748074.png" alt="image-20250216222748074"></p><h4 id="完整代码-13"><a href="#完整代码-13" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> h[N], len;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">down</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> tmp = x;</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">2</span>*x &lt;= len &amp;&amp; h[<span class="number">2</span>*x] &lt; h[tmp]) tmp = <span class="number">2</span>*x;</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">2</span>*x+<span class="number">1</span> &lt;= len &amp;&amp; h[<span class="number">2</span>*x+<span class="number">1</span>] &lt; h[tmp]) tmp = <span class="number">2</span>*x + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (x != tmp) &#123;</span><br><span class="line">        <span class="built_in">swap</span>(h[x],h[tmp]);</span><br><span class="line">        <span class="built_in">down</span>(tmp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) cin &gt;&gt; h[i];</span><br><span class="line">    len = n;</span><br><span class="line">    <span class="comment">////把堆初始化成小根堆，从二叉树的倒数第二行开始，把数字大的下沉，时间复杂度小于O(n)</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n/<span class="number">2</span>; i; -- i) <span class="built_in">down</span>(i);</span><br><span class="line">    <span class="keyword">while</span> ( m -- ) &#123;</span><br><span class="line">        cout &lt;&lt; h[<span class="number">1</span>] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        h[<span class="number">1</span>] = h[len--];</span><br><span class="line">        <span class="built_in">down</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;cout &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="模拟堆"><a href="#模拟堆" class="headerlink" title="模拟堆"></a>模拟堆</h3><h4 id="题目描述-14"><a href="#题目描述-14" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20250216222923625.png" alt="image-20250216222923625"></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">输入样例</span><br><span class="line">8</span><br><span class="line">I -10</span><br><span class="line">PM</span><br><span class="line">I -10</span><br><span class="line">D 1</span><br><span class="line">C 2 8</span><br><span class="line">I 6</span><br><span class="line">PM</span><br><span class="line">DM</span><br><span class="line"></span><br><span class="line">输出样例</span><br><span class="line">-10</span><br><span class="line">6</span><br></pre></td></tr></table></figure><p>核心就在于即使有down和up操作也能维护堆数组的下标（k）和结点（idx）的映射关系。</p><p>ph数组主要用于帮助从idx映射到下标k，</p><p>hp数组方便查找idx</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/%E4%BD%8D%E7%BD%AE%E6%8C%87%E9%92%88.png"></p><h4 id="完整代码-14"><a href="#完整代码-14" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> h[N], ph[N], hp[N], len;</span><br><span class="line"><span class="comment">//h[N]表示堆</span></span><br><span class="line"><span class="comment">//ph[N]存放第k个插入点的下标</span></span><br><span class="line"><span class="comment">//hp[N]存放堆中点的插入次序</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">heap_swap</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">swap</span>(ph[hp[a]],ph[hp[b]]);</span><br><span class="line">    <span class="built_in">swap</span>(hp[a],hp[b]);</span><br><span class="line">    <span class="built_in">swap</span>(h[a],h[b]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">down</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> t = u;</span><br><span class="line">    <span class="keyword">if</span> (u*<span class="number">2</span> &lt;= len &amp;&amp; h[u*<span class="number">2</span>] &lt; h[t]) t = u*<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (u*<span class="number">2</span>+<span class="number">1</span> &lt;= len &amp;&amp; h[u*<span class="number">2</span>+<span class="number">1</span>] &lt; h[t]) t = u*<span class="number">2</span>+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (t != u) &#123;</span><br><span class="line">        <span class="built_in">heap_swap</span>(u,t);</span><br><span class="line">        <span class="built_in">down</span>(t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">up</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (u/<span class="number">2</span> &amp;&amp; h[u/<span class="number">2</span>] &gt; h[u]) &#123;</span><br><span class="line">        <span class="built_in">heap_swap</span>(u/<span class="number">2</span>,u);</span><br><span class="line">        u /= <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">while</span> ( n -- ) &#123;</span><br><span class="line">        string op;</span><br><span class="line">        <span class="type">int</span> k, x;</span><br><span class="line">        cin &gt;&gt; op;</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="string">&quot;I&quot;</span>) &#123;</span><br><span class="line">            cin &gt;&gt; x;</span><br><span class="line">            ++ len;</span><br><span class="line">            ++ m;</span><br><span class="line">            ph[m] = len, hp[len] = m;</span><br><span class="line">            h[len] = x;</span><br><span class="line">            <span class="built_in">up</span>(len);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="string">&quot;PM&quot;</span>) cout &lt;&lt; h[<span class="number">1</span>] &lt;&lt;endl;</span><br><span class="line">          <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="string">&quot;DM&quot;</span>) &#123;</span><br><span class="line">            <span class="built_in">heap_swap</span>(<span class="number">1</span>,len);</span><br><span class="line">            -- len;</span><br><span class="line">            <span class="built_in">down</span>(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="string">&quot;D&quot;</span>) &#123;</span><br><span class="line">            cin &gt;&gt; k;</span><br><span class="line">            k = ph[k];</span><br><span class="line">            <span class="built_in">heap_swap</span>(k,len);</span><br><span class="line">            -- len;</span><br><span class="line">            <span class="built_in">down</span>(k), <span class="built_in">up</span>(k);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            cin &gt;&gt; k &gt;&gt; x;</span><br><span class="line">            k = ph[k];</span><br><span class="line">            h[k] = x;</span><br><span class="line">            <span class="built_in">down</span>(k), <span class="built_in">up</span>(k);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="哈希"><a href="#哈希" class="headerlink" title="哈希"></a>哈希</h2><h3 id="令人费解的参数"><a href="#令人费解的参数" class="headerlink" title="令人费解的参数"></a>令人费解的参数</h3><h4 id="const-int-N-200003；"><a href="#const-int-N-200003；" class="headerlink" title="const int N &#x3D;  200003；"></a>const int N &#x3D;  200003；</h4><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">开放寻址操作过程中会出现冲突的情况，一般会开成两倍的空间，减少数据的冲突</span><br><span class="line"></span><br><span class="line">使用%来计算索引,把哈希表的长度设计为素数（质数）可以大大减小哈希冲突</span><br><span class="line">比如:</span><br><span class="line">    10%8 = 2      10%7 = 3</span><br><span class="line">    20%8 = 4      20%7 = 6</span><br><span class="line">    30%8 = 6      30%7 = 2</span><br><span class="line">    40%8 = 0      40%7 = 5</span><br><span class="line">    50%8 = 2      50%7 = 1</span><br><span class="line">    60%8 = 4      60%7 = 4</span><br><span class="line">    70%8 = 6      70%7 = 0</span><br><span class="line"></span><br><span class="line">这就是为什么要找第一个比空间大的质数</span><br></pre></td></tr></table></figure><h4 id="const-int-null-0x3f3f3f3f-和-memset-h-0x3f-sizeof-h-之间的关系"><a href="#const-int-null-0x3f3f3f3f-和-memset-h-0x3f-sizeof-h-之间的关系" class="headerlink" title="const int null &#x3D; 0x3f3f3f3f 和  memset(h, 0x3f, sizeof h)之间的关系"></a>const int null &#x3D; 0x3f3f3f3f 和  memset(h, 0x3f, sizeof h)之间的关系</h4><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">首先，必须要清楚memset函数到底是如何工作的！</span><br><span class="line">    先考虑一个问题，为什么memset初始化比循环更快？</span><br><span class="line">    答案：memset更快，为什么？因为memset是直接对内存进行操作。memset是按字节（byte）进行复制的</span><br><span class="line"></span><br><span class="line">    void * memset(void *_Dst,int _Val,size_t _Size);</span><br><span class="line">    这是memset的函数声明</span><br><span class="line">    第一个参数为一个指针，即要进行初始化的首地址</span><br><span class="line">    第二个参数是初始化值，注意，并不是直接把这个值赋给一个数组单元（对int来说不是这样）</span><br><span class="line">    第三个参数是要初始化首地址后多少个字节</span><br><span class="line">    看到第二个参数和第三个参数，是不是有感觉了</span><br><span class="line">    h是int类型，其为单个字节，第二个参数0x3f八位为一个字节，所以0x3f * 4(从高到低复制4份) = 0x3f3f3f3f</span><br><span class="line">    这也说明了为什么在memset中不设置除了-1， 0以外常见的值</span><br><span class="line">    比如1, 字节表示为00000001，memset(h, 1, 4)则表示为0x01010101</span><br><span class="line">    </span><br><span class="line">为什么要取0x3f3f3f,为什么不直接定义无穷大INF = 0x7fffffff,即32个1来初始化呢？</span><br><span class="line">首先，0x3f3f3f的体验感很好，0x3f3f3f3f的十进制是1061109567，也就是10^9级别的</span><br><span class="line">（和0x7fffffff一个数量级），而一般场合下的数据都是小于10^9的，所以它可以作为无穷大</span><br><span class="line">使用而不致出现数据大于无穷大的情形。</span><br><span class="line">比如0x3f3f3f3f+0x3f3f3f3f=2122219134，这非常大但却没有超过32-bit，int的表示范围，</span><br><span class="line">所以0x3f3f3f3f还满足了我们“无穷大加无穷大还是无穷大”的需求。</span><br><span class="line">但是INF不同，一旦加上某个值，很容易上溢，数值有可能转成负数。</span><br><span class="line"></span><br><span class="line">0x3f3f3f3f还能给我们带来一个意想不到的额外好处：如果我们想要将某个数组清零，</span><br><span class="line">    我们通常会使用memset(a,0,sizeof(a))这样的代码来实现（方便而高效），但是当我们想</span><br><span class="line">    将某个数组全部赋值为无穷大时（例如解决图论问题时邻接矩阵的初始化），就不能使用</span><br><span class="line">    memset函数而得自己写循环了（写这些不重要的代码真的很痛苦），我们知道这是因为memset</span><br><span class="line">    是按字节操作的，它能够对数组清零是因为0的每个字节都是0，</span><br><span class="line">    现在如果我们将无穷大设为0x3f3f3f3f，那么奇迹就发生了，0x3f3f3f3f的每个字节都是0x3f！所以</span><br><span class="line">    要把一段内存全部置为无穷大，我们只需要memset(a,0x3f,sizeof(a))。</span><br></pre></td></tr></table></figure><h3 id="模拟散列表"><a href="#模拟散列表" class="headerlink" title="模拟散列表"></a>模拟散列表</h3><h4 id="题目描述-15"><a href="#题目描述-15" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20250216223251790.png" alt="image-20250216223251790"></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">输入样例</span><br><span class="line">5</span><br><span class="line">I 1</span><br><span class="line">I 2</span><br><span class="line">I 3</span><br><span class="line">Q 2</span><br><span class="line">Q 5</span><br><span class="line"></span><br><span class="line">输出样例</span><br><span class="line">Yes</span><br><span class="line">No</span><br></pre></td></tr></table></figure><h4 id="拉链法完整代码"><a href="#拉链法完整代码" class="headerlink" title="拉链法完整代码"></a>拉链法完整代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//拉链法</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//找比题设范围大且离2的整次幂最远的质数作为最大范围，是为了减少哈希映射的冲突</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100003</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> h[N], e[N], ne[N], idx;</span><br><span class="line"></span><br><span class="line"><span class="comment">//头插法</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> k = (x % N + N) % N;</span><br><span class="line">    e[idx] = x;</span><br><span class="line">    ne[idx] = h[k];</span><br><span class="line">    h[k] = idx++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">query</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> k = (x % N + N) % N;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = h[k]; i != <span class="number">-1</span>; i = ne[i])<span class="comment">//h[k] 是头节点，ne[h[k]] 是头节点的前一结点</span></span><br><span class="line">        <span class="keyword">if</span> (e[i] == x)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n; cin &gt;&gt; n;</span><br><span class="line">    <span class="comment">//初始化每个拉链处的头结点均为-1，模拟链表的头结点指向NULL(-1)</span></span><br><span class="line">    <span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="keyword">sizeof</span> h);</span><br><span class="line">    string op;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="keyword">while</span> ( n -- ) &#123;</span><br><span class="line">        cin &gt;&gt; op &gt;&gt; x;</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="string">&quot;I&quot;</span>) <span class="built_in">insert</span>(x);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">query</span>(x)) cout &lt;&lt; <span class="string">&quot;Yes&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;No&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="开放寻址法完整代码"><a href="#开放寻址法完整代码" class="headerlink" title="开放寻址法完整代码"></a>开放寻址法完整代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//开放寻址法</span></span><br><span class="line"><span class="comment">//开放寻址法采用hash函数找到在hash数组中对应的位置，如果该位置上有值，并且这个值不是寻址的值，则出现冲突碰撞，需要解决冲突方案，该算法采用简单的向右继续寻址来解决问题。</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//开放寻址操作过程中会出现冲突的情况，一般要开到原数组的2~3倍同时也是质数，减少数据的冲突</span></span><br><span class="line"><span class="comment">//使用%来计算索引，把哈希表的长度设计为素数（质数）可以大大减小哈希冲突</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">200003</span>, null = <span class="number">0x3f3f3f3f</span>;<span class="comment">//这是一个大于10^9的数,代表空</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> h[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;<span class="comment">//若x存在则返回x的下标，否则返回x应该存储的下标</span></span><br><span class="line">    <span class="type">int</span> k = (x % N + N) % N;</span><br><span class="line">    <span class="keyword">while</span> (h[k] != null &amp;&amp; h[k] != x) &#123;</span><br><span class="line">        ++ k;</span><br><span class="line">        <span class="keyword">if</span> (k == N) k = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> k;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n; cin &gt;&gt; n;</span><br><span class="line">    <span class="built_in">memset</span>(h, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> h);</span><br><span class="line">    <span class="keyword">while</span> ( n -- ) &#123;</span><br><span class="line">        string op;</span><br><span class="line">        <span class="type">int</span> x;</span><br><span class="line">        cin &gt;&gt; op &gt;&gt; x;</span><br><span class="line">        <span class="type">int</span> k = <span class="built_in">find</span>(x);</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="string">&quot;I&quot;</span>) h[k] = x;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (h[k] == x) cout &lt;&lt; <span class="string">&quot;Yes&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;No&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字符串哈希"><a href="#字符串哈希" class="headerlink" title="字符串哈希"></a>字符串哈希</h3><h4 id="字符串前缀哈希法"><a href="#字符串前缀哈希法" class="headerlink" title="字符串前缀哈希法"></a>字符串前缀哈希法</h4><p>全称字符串前缀哈希法，把字符串变成一个p进制数字（哈希值），实现不同的字符串映射到不同的数字。<br>对形如 X1X2X3⋯Xn−1Xn的字符串,采用字符的ascii 码乘上 P 的次方来计算哈希值。</p><p>映射公式 (X<sub>1</sub>×P<sub>n-1</sub>+X<sub>2</sub>×P<sub>n-2</sub>+⋯+X<sub>n-1</sub>×P<sub>1</sub>+X<sub>n</sub>×P<sub>0</sub>) mod Q</p><p>注意点：</p><ol><li>任意字符不可以映射成0，否则会出现不同的字符串都映射成0的情况，比如A,AA,AAA皆为0</li><li>冲突问题：通过巧妙设置P (131 或 13331) , Q (264)的值，一般可以理解为不产生冲突。</li></ol><p>​根据经验，将字符串映射为 P &#x3D; 131&#x2F;13331 进制数字, 且用尽可能大的 unsigned long long 类型来存储变量可以尽可能地减少冲突，这是本问题的核心思想。(unsigned long long 类型一般为 64 位)</p><p>​问题是比较不同区间的子串是否相同，就转化为对应的哈希值是否相同。<br>求一个字符串的哈希值就相当于求前缀和，求一个字符串的子串哈希值就相当于求部分和。</p><p>前缀和公式 $ h[i+1]&#x3D;h[i]×P+s[i]，i∈[0,n−1]$ h为前缀和数组，s为字符串数组<br>区间和公式 $h[l,r]&#x3D;h[r]−h[l−1]×P^{r−l+1}$</p><p>记 h[i] 为 s[1..i]的哈希值，则:</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20250216223810110.png" alt="image-20250216223810110"></p><p>区间和公式的理解: ABCDE 与 ABC 的前三个字符值是一样，只差两位，乘上 P<sup>2</sup><br>把 ABC 变为 ABC00，再用 ABCDE - ABC00 得到 DE 的哈希值。</p><p>举例：</p><p>有字符串 s1、s2 和 s1s2，已知 hash(s1s2)， hash(s1)<br>则： hash(s2) &#x3D;  hash(s1s2) − hash(s1) × P_{|s2|}<br>简单来讲就是：34&#x3D;1234−12×10^2 </p><p>例： s1s2 &#x3D; 3f3a  s1 &#x3D; 3f   s2 &#x3D; 3a </p><p>P &#x3D; 16 时，显然 ：</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;aligned&#125;</span><br><span class="line">hash(s2)<span class="keyword">\,</span>=<span class="keyword">\,</span>3<span class="keyword">\,</span>×<span class="keyword">\,</span>16<span class="keyword">\,</span>+<span class="keyword">\,</span>10<span class="keyword">\,</span>=<span class="keyword">\,</span>58 <span class="keyword">\\</span></span><br><span class="line"><span class="keyword">\end</span>&#123;aligned&#125;</span><br></pre></td></tr></table></figure><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;aligned&#125;</span><br><span class="line">hash(s1s2)−hash(s1)×P|s2|<span class="built_in">&amp;</span>=3×163+15×162+3×16+10−(3×16+15)×162 <span class="keyword">\\</span></span><br><span class="line"> <span class="built_in">&amp;</span>=3×16+10 <span class="keyword">\\</span></span><br><span class="line"> <span class="built_in">&amp;</span>=58 <span class="keyword">\\</span></span><br><span class="line"><span class="keyword">\end</span>&#123;aligned&#125;</span><br></pre></td></tr></table></figure><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">∴hash(s2)<span class="keyword">\,</span>=<span class="keyword">\,</span>hash(s1s2)<span class="keyword">\,</span>−<span class="keyword">\,</span>hash(s1)<span class="keyword">\,</span>×<span class="keyword">\,</span>P<span class="built_in">_</span>&#123;|s2|&#125;</span><br></pre></td></tr></table></figure><h3 id="题目描述-16"><a href="#题目描述-16" class="headerlink" title="题目描述"></a>题目描述</h3><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20250216224146686.png" alt="image-20250216224146686"></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">输入样例</span><br><span class="line">8 3</span><br><span class="line">aabbaabb</span><br><span class="line">1 3 5 7</span><br><span class="line">1 3 6 8</span><br><span class="line">1 2 1 2</span><br><span class="line"></span><br><span class="line">输出样例</span><br><span class="line">Yes</span><br><span class="line">No</span><br><span class="line">Yes</span><br></pre></td></tr></table></figure><h4 id="完整代码-15"><a href="#完整代码-15" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> ULL;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> P = <span class="number">131</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">char</span> str[N];</span><br><span class="line">ULL h[N], p[N];</span><br><span class="line"></span><br><span class="line"><span class="function">ULL <span class="title">get</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> h[r] - h[l - <span class="number">1</span>] * p[r - l + <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%s&quot;</span>, &amp;n, &amp;m, str + <span class="number">1</span>);</span><br><span class="line">    p[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) &#123;</span><br><span class="line">        p[i] = p[i - <span class="number">1</span>] * P;</span><br><span class="line">        h[i] = h[i - <span class="number">1</span>] * P + str[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( m -- ) &#123;</span><br><span class="line">        <span class="type">int</span> l1, r1, l2, r2;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>, &amp;l1, &amp;r1, &amp;l2, &amp;r2);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">get</span>(l1,r1) == <span class="built_in">get</span>(l2,r2)) <span class="built_in">puts</span>(<span class="string">&quot;Yes&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">&quot;No&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> AcWing </category>
          
          <category> 算法基础 </category>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法基础课 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux</title>
      <link href="/AcWing/Linux%E5%9F%BA%E7%A1%80/Linux%E5%9F%BA%E7%A1%80/"/>
      <url>/AcWing/Linux%E5%9F%BA%E7%A1%80/Linux%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h1><p>[toc]</p><h2 id="文件系统结构"><a href="#文件系统结构" class="headerlink" title="文件系统结构"></a>文件系统结构</h2><p><code>根目录</code></p><p>&#x2F;</p><p><code>根目录/中常见文件夹</code></p><p>&#x2F;bin：存放系统可执行文件（二进制文件）的目录</p><p>&#x2F;boot：存放启动系统所需的文件，如内核文件和引导程序</p><p>&#x2F;dev：包含设备文件，用于与系统中的硬件设备进行交互</p><p>&#x2F;etc：存放系统配置文件</p><p>&#x2F;home：存放用户的主目录</p><p>&#x2F;lib：存放系统所需的共享库文件（安装包、头文件等）</p><p>&#x2F;media：用于挂载可移动设备（如光盘、USB驱动器）的目录</p><p>&#x2F;root：超级用户(root)的主目录</p><p>&#x2F;tmp：存放临时文件的目录</p><p>&#x2F;usr：存放系统软件资源，包括可执行文件、库文件、头文件等</p><p>&#x2F;var：存放可变数据文件，如日志文件和缓存文件</p><h2 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h2><h3 id="绝对路径"><a href="#绝对路径" class="headerlink" title="绝对路径"></a>绝对路径</h3><p>从根目录 <code>/</code> 开始描述</p><p>以 <code>/</code> 开头</p><h3 id="相对路径"><a href="#相对路径" class="headerlink" title="相对路径"></a>相对路径</h3><p>从当前目录开始描述</p><p>开头不是 <code>/</code></p><p><code>.</code>表示当前目录</p><p><code>..</code>表示上一级目录</p><p><code>~</code>表示家目录，即 <em>~&#x2F; &#x3D; &#x2F;home&#x2F;用户名</em></p><h2 id="常用文件管理命令"><a href="#常用文件管理命令" class="headerlink" title="常用文件管理命令"></a>常用文件管理命令</h2><h3 id="Ctrl-C"><a href="#Ctrl-C" class="headerlink" title="Ctrl + C"></a>Ctrl + C</h3><p>作用一：直接杀掉某个程序</p><p>作用二：在输入指令的时候不想要本行了，直接Ctrl + C换行（取消命令，并且换行）</p><h3 id="Ctrl-U"><a href="#Ctrl-U" class="headerlink" title="Ctrl + U"></a>Ctrl + U</h3><p>直接清空本行命令</p><h3 id="Tab"><a href="#Tab" class="headerlink" title="Tab"></a>Tab</h3><p>可以补全命令和文件名（当只有一个备选项时）</p><p>如果补全不了（存在多个选项），快速按两下Tab，可以显示备选选项</p><h3 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h3><p>列出当前目录下所有文件，蓝色是文件夹，白色的是普通文件，绿色的是可执行文件</p><p>ls命令可接参数</p><p>ls -l：查看每个文件的详细信息</p><p>ls -h：<code>人性化输出</code></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230926141517171.png" alt="image-20230926141517171"></p><p>上图，（30952 byte &#x3D; 31K）</p><p>ls -a：显示全部文件（包含隐藏文件，所有隐藏文件以 . 开头）</p><p><code>ll = ls -la</code></p><p>叠加的参数顺序可以变，即<code>ls -la = ls -al</code></p><h3 id="pwd"><a href="#pwd" class="headerlink" title="pwd"></a>pwd</h3><p>显示当前路径</p><h3 id="cd"><a href="#cd" class="headerlink" title="cd"></a>cd</h3><p>切换目录（change directory）</p><p>cd 默认返回家目录</p><p>cd xxx 表示进入目录 xxx</p><p>cd 后不加参数，默认返回家目录</p><p>cd - 返回上一个停留的目录，和 cd .. 不同</p><h3 id="cp"><a href="#cp" class="headerlink" title="cp"></a>cp</h3><p>复制命令（复制+粘贴+重命名）</p><p>cp xxx yyy : 将 xxx 文件复制成 yyy，xxx 和 yyy 可以是一个路径</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230926143015310.png" alt="image-20230926143015310"></p><p>cp a b -r ：将a文件夹整个复制到b文件夹目录下</p><h3 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir"></a>mkdir</h3><p>mkdir xxx：创建文件夹 xxx</p><p>假如要创建一连串文件夹，可以采用 mkdir a&#x2F;b&#x2F;c -p，**-p** 的作用：如果文件夹存在则跳过，否则便创建</p><h3 id="history"><a href="#history" class="headerlink" title="history"></a>history</h3><p>显示历史用过的指令</p><h3 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h3><p>rm xxx：删除普通文件；rm xxx -r：删除文件夹</p><p><code>支持正则表达式</code>：例如当前文件夹下有：tmp1.txt、tmp2.txt，可使用：rm *.txt，直接全部删除</p><p>rm xxx -f：可用于删除被保护文件</p><h3 id="touch"><a href="#touch" class="headerlink" title="touch"></a>touch</h3><p>touch xxx：创建一个文件</p><h3 id="mv"><a href="#mv" class="headerlink" title="mv"></a>mv</h3><p>剪切 + 粘贴，兼具重命名的效果</p><p>和 <strong>cp</strong> 类似，cp是复制一份，源目录还存在一份；mv是剪切移动，源目录不存在备份。</p><h3 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h3><p>显示文件的内容</p><h2 id="tmux-和-vim"><a href="#tmux-和-vim" class="headerlink" title="tmux 和 vim"></a>tmux 和 vim</h2><h3 id="tmux"><a href="#tmux" class="headerlink" title="tmux"></a>tmux</h3><h4 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h4><ol><li>分屏</li><li>允许断开Terminal连接后，继续运行进程（使得进程不会因为连接中断而结束）</li></ol><h4 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230927223824340.png" alt="image-20230927223824340"></p><h4 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h4><ol><li><p>tmux：新建一个session，其中包含一个window，window中包含一个pane，pane里打开了一个shell对话框。</p></li><li><p>按下 Ctrl + b 后手指松开，然后按 % ，将当前 pane 左右平分成两个 pane。</p></li><li><p>按下 Ctrl + b 后手指松开，然后按 “ ，将当前 pane 上下平分成两个 pane。</p></li><li><p>Ctrl + d：关闭当前 pane；如果当前 window 的所有 pane 均已关闭，则自动关闭 window，如果当前 session 的所有 window 均已关闭，则自动关闭 session。</p></li><li><p>鼠标点击可以选 pane。</p></li><li><p>按下 Ctrl + b 后手指松开，然后按方向键：选择相邻的pane。</p></li><li><p>鼠标拖动pane之间的分割线，可以调整分割线的位置。   </p></li><li><p>按住 Ctrl + b 的同时按方向键，可以调整pane之间分割线的位置。</p></li><li><p>按下 Ctrl + b 后手指松开，然后按 z：将当前pane全屏&#x2F;取消全屏。</p></li><li><p>按下 Ctrl + b 后手指松开，然后按d：挂起当前session。</p></li><li><p>tmux a：打开之前挂起的 session 或者 tmux attach</p></li><li><p>按下 Ctrl + b 后手指松开，然后按s：选择其它session。</p><ol><li>方向键 —— 上：选择上一项 session&#x2F;window&#x2F;pane</li><li>方向键 —— 下：选择下一项 session&#x2F;window&#x2F;pane</li><li>方向键 —— 右：展开当前项 session&#x2F;window</li><li>方向键 —— 左：闭合当前项 session&#x2F;window</li></ol></li><li><p>按下 Ctrl + b 后手指松开，然后按c：在当前session中创建一个新的window。</p></li><li><p>按下 Ctrl + b 后手指松开，然后按w：选择其他window，操作方法与(12)完全相同。</p></li><li><p>按下 Ctrl + b 后手指松开，然后按PageUp：翻阅当前pane内的内容。如果没有PageUp，用：fn + ↑代替</p></li><li><p>鼠标滚轮：翻阅当前pane内的内容。</p></li><li><p>在tmux中选中文本时，需要按住shift键。（仅支持Windows和Linux，不支持Mac，不过该操作并不是必须的，因此影响不大）</p></li><li><p>tmux中复制&#x2F;粘贴文本的通用方式：</p><ol><li>按下 Ctrl + b 后松开手指，然后按 [，会将选中内容复制到剪贴板（Ctrl + Insert）</li><li>用鼠标选中文本，被选中的文本会被自动复制到 tmux 的剪贴板</li><li>按下 Ctrl + b 后松开手指，然后按 ]，会将剪贴板中的内容粘贴到光标处（Shift + Insert）</li></ol></li></ol><h3 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h3><h4 id="功能-1"><a href="#功能-1" class="headerlink" title="功能"></a>功能</h4><ol><li>命令行模式下的文本编辑器。</li><li>根据文件扩展名自动判别编程语言。支持代码缩进、代码高亮等功能。</li><li>使用方式：vim filename<ol><li>如果已有该文件，则打开它。</li><li>如果没有该文件，则打开一个新的文件，并命名为 filename。</li></ol></li></ol><h4 id="模式"><a href="#模式" class="headerlink" title="模式"></a>模式</h4><ul><li><code>一般命令模式</code></li></ul><p>​默认模式。命令输入方式：类似于打游戏放技能，按不同字符，即可进行不同操作。可以复制、粘贴、删除文本等。</p><ul><li><code>编辑模式</code></li></ul><p>​在一般命令模式里按下 i，会进入编辑模式。</p><p>​按下 ESC 会退出编辑模式，返回到一般命令模式。</p><ul><li><code>命令行模式</code></li></ul><p>​在一般命令模式里按下 <code>:/?</code> 三个中任意一个，会进入命令行模式。命令行在最下面。</p><p>​可以查找、替换、保存、退出、配置编辑器等。</p><p><strong>操作</strong></p><ol><li><code>i</code> 进入编辑模式</li><li><code>ESC</code> 进入一般命令模式</li><li><code>h 或 左箭头键</code>：光标向左移动一个字符</li><li><code>l 或 右箭头键</code>：光标向右移动一个字符</li><li><code>j 或 下箭头键</code>：光标向下移动一个字符</li><li><code>k 或 上箭头键</code>：光标向上移动一个字符</li><li><code>n&lt;Space&gt;</code> n表示数字，按下数字后再按空格，光标会向右移动n个字符</li><li><code>0 或 功能键[Home]</code>：光标移动到本行开头</li><li><code>$ 或 功能键[End]</code>：光标移动到本行末尾</li><li><code>G</code> 光标移动到最后一行</li><li><code>:n 或 nG</code> n为数字，光标移动到第n行</li><li><code>gg</code> 光标移动到第一行，相当于1G</li><li><code>n&lt;Enter&gt;</code> n为数字，光标向下移动n行</li><li><code>/word</code> 向光标之下寻找第一个值为word的字符串</li><li><code>?word</code> 向光标之上寻找第一个值为word的字符串</li><li><code>n</code> 重复前一个查找操作</li><li><code>N</code> 反向重复前一个查找操作</li><li><code>:noh</code>  关闭查找关键词高亮</li><li><code>:n1,n2s/word1/word2/g</code>  n1与n2为数字，在第n1行与n2行之间寻找word1这个字符串，并将该字符串替换为word2</li><li><code>:1,$s/word1/word2/g</code>：将全文的word1替换为word2</li><li><code>:1,$s/word1/word2/gc</code>：较（20）多一个在替换前要求用户确认。</li><li><code>v</code> 选中文本，按两下 ESC 即可取消选中文本</li><li><code>d</code> 删除选中的文本（实际为剪切）</li><li><code>dd</code> 删除当前行</li><li><code>y</code> 复制选中文本</li><li><code>yy</code> 复制当前行</li><li><code>p</code> 将复制的数据在光标的下一个位置（如果复制的内容是选中的文本）粘贴，（如果复制的内容是一整行（yy），就在光标下一行粘贴）</li><li><code>u</code> 撤销</li><li><code>Ctrl + r</code> 取消撤销</li><li><code>Shift + &gt;</code> 将选中的文本整体向右移动</li><li><code>Shift + &lt;</code> 将选中的文本整体向左移动</li><li><code>:w</code> 保存</li><li><code>:w!</code> 强制保存</li><li><code>:q</code> 退出</li><li><code>:q!</code> 强制退出</li><li><code>:wq</code> 保存并退出</li><li><code>:set nu</code> 显示行号</li><li><code>:set nonu</code> 隐藏行号</li><li><code>:set paste</code> 设置成粘贴模式，取消代码自动缩进</li><li><code>:set nopaste</code> 取消粘贴模式，开启代码自动缩进</li><li><code>gg=G</code> 将全文代码格式化</li><li><code>Ctrl + q</code> 当 vim 卡死时，可以取消当前正在执行的命令</li></ol><h4 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h4><p>每次用 vim 编辑文件时，会自动创建一个 .filename.swp 的临时文件。</p><p>如果打开某个文件时，该文件的 swp 文件已存在，则会报错。此时解决办法有两种：</p><ul><li>找到正在打开该文件的程序，并退出。</li><li>直接删掉该swp文件即可。</li></ul><h2 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>shell 是我们通过命令行与操作系统沟通的语言。</p><p>shell脚本可以直接在命令行中执行，也可以将一套逻辑组织成一个文件，方便复用。</p><p>Linux中常见的shell脚本有很多种，常见的有：</p><ul><li>Bourne Shell（&#x2F;usr&#x2F;bin&#x2F;sh 或 &#x2F;bin&#x2F;sh）</li><li>Bourne Again Shell（&#x2F;bin&#x2F;bash）</li><li>C Shell（&#x2F;usr&#x2F;bin&#x2F;csh）</li><li>K Shell（&#x2F;usr&#x2F;bin&#x2F;ksh）</li><li>zsh</li><li>…</li></ul><p>Linux系统中一般默认使用 bash，所以接下来讲解 bash 中的语法。<br>文件开头需要写 <code>#! /bin/bash</code>，指明bash为脚本解释器。</p><p><code>脚本示例</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Hello World!&quot;</span></span><br></pre></td></tr></table></figure><p><code>运行方式</code></p><ul><li>作为可执行文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">:&lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">权限说明：</span></span><br><span class="line"><span class="string">user:~$ ls -l test.sh</span></span><br><span class="line"><span class="string">-rw-rw-r--</span></span><br><span class="line"><span class="string">分别对应用户本人权限、同组权限以及其他权限(-隔开)</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">user:~$ <span class="built_in">chmod</span> +x test.sh  <span class="comment"># 使脚本具有可执行权限</span></span><br><span class="line">user:~$ ./test.sh  <span class="comment"># 当前路径下执行</span></span><br><span class="line">Hello World!  <span class="comment"># 脚本输出</span></span><br><span class="line">user:~$ /home/acs/test.sh  <span class="comment"># 绝对路径下执行</span></span><br><span class="line">Hello World!  <span class="comment"># 脚本输出</span></span><br><span class="line">user:~$ ~/test.sh  <span class="comment"># 家目录路径下执行</span></span><br><span class="line">Hello World!  <span class="comment"># 脚本输出</span></span><br></pre></td></tr></table></figure><ul><li>用解释器执行</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">user:~$ bash test.sh</span><br><span class="line">Hello World!  <span class="comment"># 脚本输出</span></span><br></pre></td></tr></table></figure><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><h4 id="单行注释"><a href="#单行注释" class="headerlink" title="单行注释"></a>单行注释</h4><p>每行中 <code>#</code> 之后的内容均是注释。</p><h4 id="多行注释"><a href="#多行注释" class="headerlink" title="多行注释"></a>多行注释</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">:&lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">第一行注释</span></span><br><span class="line"><span class="string">第二行注释</span></span><br><span class="line"><span class="string">第三行注释</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><p>其中 EOF 可以换成其它任意字符串或者 ! 。</p><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><h4 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量"></a>定义变量</h4><p>定义变量，不需要加 <code>$</code> 符号</p><p>定义变量的时候变量都是字符串，但当变量需要是整数时，会自动把变量转换成整数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># =前后不能加空格,会报错</span></span><br><span class="line">name1=<span class="string">&#x27;yxc&#x27;</span>  <span class="comment"># 单引号定义字符串</span></span><br><span class="line">name2=<span class="string">&quot;yxc&quot;</span>  <span class="comment"># 双引号定义字符串</span></span><br><span class="line">name3=yxc    <span class="comment"># 也可以不加引号，同样表示字符串</span></span><br></pre></td></tr></table></figure><h4 id="使用变量"><a href="#使用变量" class="headerlink" title="使用变量"></a>使用变量</h4><p>使用变量，需要加上 <code>$</code> 符号，或者 <code>$&#123;&#125;</code> 符号。花括号是可选的，主要为了帮助解释器识别变量边界。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">name=lx</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$name</span>  <span class="comment"># 输出lx</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;name&#125;</span>  <span class="comment"># 输出lx</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;name&#125;</span>shell  <span class="comment"># 输出lxshell</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$nameacwing</span>  <span class="comment"># 输出空字符串（未定义的变量默认为空字符串）</span></span><br></pre></td></tr></table></figure><h4 id="只读变量"><a href="#只读变量" class="headerlink" title="只读变量"></a>只读变量</h4><p>相当于常量</p><p>使用 <code>readonly</code> 或者 <code>declare</code> 可以将变量变为只读</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">name=lx</span><br><span class="line"><span class="built_in">readonly</span> name</span><br><span class="line"><span class="built_in">declare</span> -r name  <span class="comment"># 两种写法均可</span></span><br><span class="line"></span><br><span class="line">name=abc  <span class="comment"># 会报错，因为此时name只读</span></span><br></pre></td></tr></table></figure><h4 id="删除变量"><a href="#删除变量" class="headerlink" title="删除变量"></a>删除变量</h4><p><code>unset</code> 可以删除变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name=lx</span><br><span class="line"><span class="built_in">unset</span> name</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$name</span>  <span class="comment"># 输出空行</span></span><br></pre></td></tr></table></figure><h4 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h4><ol><li>自定义变量（局部变量），即子进程不能访问的变量</li><li>环境变量（全局变量），即子进程能访问的变量</li></ol><p><code>自定义变量改成环境变量</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">user:~$ name=lx  <span class="comment"># 定义变量</span></span><br><span class="line">user:~$ <span class="built_in">export</span> name  <span class="comment"># 第一种方法</span></span><br><span class="line">user:~$ <span class="built_in">declare</span> -x name  <span class="comment"># 第二种方法</span></span><br></pre></td></tr></table></figure><p><code>环境变量改成自定义变量</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">user:~$ <span class="built_in">export</span> name=lx  <span class="comment"># 定义环境变量</span></span><br><span class="line">user:~$ <span class="built_in">declare</span> +x name  <span class="comment"># 改为自定义变量</span></span><br></pre></td></tr></table></figure><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><p>字符串可以用单引号，也可以用双引号，也可以不用引号。</p><p><code>单引号与双引号的区别</code></p><ul><li>单引号中的内容会原样输出，不会执行、不会取变量；</li><li>双引号中的内容可以执行、可以取变量；</li></ul><p>（不加引号和双引号效果一样）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name=lx  <span class="comment"># 不用引号</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;Hi, $name \&quot;hh\&quot;&#x27;</span>  <span class="comment"># 单引号字符串，输出 Hi, $name \&quot;hh\&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Hi, <span class="variable">$name</span> \&quot;hh\&quot;&quot;</span>  <span class="comment"># 双引号字符串，输出 Hi, lx &quot;hh&quot;</span></span><br></pre></td></tr></table></figure><p><code>获取字符串长度</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name=<span class="string">&quot;lx&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;#name&#125;</span>  <span class="comment"># 输出2</span></span><br></pre></td></tr></table></figure><p><code>提取字串</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name=<span class="string">&quot;hello, lx&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;name:0:5&#125;</span>  <span class="comment"># 提取从0开始的5个字符:hello</span></span><br></pre></td></tr></table></figure><h3 id="默认变量"><a href="#默认变量" class="headerlink" title="默认变量"></a>默认变量</h3><h4 id="文件参数变量"><a href="#文件参数变量" class="headerlink" title="文件参数变量"></a>文件参数变量</h4><p>在执行shell脚本时，可以向脚本传递参数。<code>$1</code> 是第一个参数，<code>$2</code> 是第二个参数，以此类推。特殊的，<code>$0</code> 是文件名（包含路径）。例如：</p><p>创建文件 <code>test.sh</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;文件名：&quot;</span><span class="variable">$0</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;第一个参数：&quot;</span><span class="variable">$1</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;第二个参数：&quot;</span><span class="variable">$2</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;第三个参数：&quot;</span><span class="variable">$3</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;第四个参数：&quot;</span><span class="variable">$4</span></span><br></pre></td></tr></table></figure><p>然后执行该脚本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">user:~$ <span class="built_in">chmod</span> +x test.sh </span><br><span class="line">user:~$ ./test.sh 1 2 3 4</span><br><span class="line">文件名：./test.sh</span><br><span class="line">第一个参数：1</span><br><span class="line">第二个参数：2</span><br><span class="line">第三个参数：3</span><br><span class="line">第四个参数：4</span><br></pre></td></tr></table></figure><h4 id="其它参数相关变量"><a href="#其它参数相关变量" class="headerlink" title="其它参数相关变量"></a>其它参数相关变量</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20231001005250473.png" alt="image-20231001005250473"></p><p> <code>$&#123;command&#125;</code>：实际上就是相当于直接在终端使用 command</p><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>数组中可以存放多个不同类型的值，只支持一维数组，初始化时不需要指明数组大小。</p><p>数组下标<code>从0开始</code>。</p><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>数组用小括号表示，元素之间用空格隔开。例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">array=(1 abc <span class="string">&quot;def&quot;</span> yxc)</span><br><span class="line"></span><br><span class="line">array[0]=1</span><br><span class="line">array[1]=shell</span><br><span class="line">array[2]=<span class="string">&quot;command&quot;</span></span><br><span class="line">array[100]=lx  <span class="comment"># 可以隔空，但本例数组大小仍为4，有种哈希的感觉</span></span><br></pre></td></tr></table></figure><h4 id="读取数组中某个元素的值"><a href="#读取数组中某个元素的值" class="headerlink" title="读取数组中某个元素的值"></a>读取数组中某个元素的值</h4><p>格式：<code>$&#123;array[index]&#125;</code></p><h4 id="读取整个数组"><a href="#读取整个数组" class="headerlink" title="读取整个数组"></a>读取整个数组</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$&#123;array[@]&#125;</span>  <span class="comment"># 第一种写法</span></span><br><span class="line"><span class="variable">$&#123;array[*]&#125;</span>  <span class="comment"># 第二种写法</span></span><br><span class="line"><span class="comment"># 求长度加上#即可</span></span><br></pre></td></tr></table></figure><p>在读取整个数组时，未定义的部分就不会显示。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"></span><br><span class="line">array[0]=1</span><br><span class="line">array[1]=shell</span><br><span class="line">array[2]=<span class="string">&quot;command&quot;</span></span><br><span class="line">array[100]=lx</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;#array[@]&#125;</span></span><br><span class="line"></span><br><span class="line">:&lt;&lt;<span class="string">EOF </span></span><br><span class="line"><span class="string">输出为4而不是101</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><h4 id="数组长度"><a href="#数组长度" class="headerlink" title="数组长度"></a>数组长度</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$&#123;#array[@]&#125;</span>  <span class="comment"># 第一种写法</span></span><br><span class="line"><span class="variable">$&#123;#array[*]&#125;</span>  <span class="comment"># 第二种写法</span></span><br></pre></td></tr></table></figure><h3 id="expr命令"><a href="#expr命令" class="headerlink" title="expr命令"></a>expr命令</h3><p><code>expr</code> 命令用于求表达式的值，格式为：<code>expr 表达式</code></p><p>表达式说明：</p><ul><li>用空格隔开每一项</li><li>用反斜杠放在shell特定的字符前面（发现表达式运行错误时，可以试试转义）</li><li>对包含空格和其他特殊字符的字符串要用引号括起来</li><li>expr会在stdout中输出结果。如果为逻辑关系表达式，则结果为真时，stdout输出1，否则输出0。</li><li>expr的exit code：如果为逻辑关系表达式，则结果为真时，exit code为0，否则为1。</li></ul><h4 id="字符串表达式"><a href="#字符串表达式" class="headerlink" title="字符串表达式"></a>字符串表达式</h4><ul><li>length STRING</li></ul><p>返回 STRING 的长度</p><ul><li>index STRING CHARSET</li></ul><p>CHARSET中任意单个字符在STRING中最前面的字符位置，下标从1开始。如果在STRING中完全不存在CHARSET中的字符，则返回0。</p><ul><li>substr STRING POSITION LENGTH</li></ul><p>返回STRING字符串中从POSITION开始，长度最大为LENGTH的子串。如果POSITION或LENGTH为负数，0或非数值，则返回空字符串。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"></span><br><span class="line">str=<span class="string">&quot;Hello World!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> `<span class="built_in">expr</span> length <span class="string">&quot;<span class="variable">$str</span>&quot;</span>`  <span class="comment"># ``不是单引号，而是反引号，相当于$()，表示执行该命令，输出12</span></span><br><span class="line"><span class="built_in">echo</span> `<span class="built_in">expr</span> index <span class="string">&quot;<span class="variable">$str</span>&quot;</span> aWd`  <span class="comment"># 输出7，下标从1开始</span></span><br><span class="line"><span class="built_in">echo</span> `<span class="built_in">expr</span> substr <span class="string">&quot;<span class="variable">$str</span>&quot;</span> 2 3`  <span class="comment"># 输出 ell</span></span><br></pre></td></tr></table></figure><h4 id="整数表达式"><a href="#整数表达式" class="headerlink" title="整数表达式"></a>整数表达式</h4><p><code>expr</code>支持普通的算术操作，算术表达式优先级低于字符串表达式，高于逻辑关系表达式。</p><ul><li><p>+ -<br>加减运算。两端参数会转换为整数，如果转换失败则报错。</p></li><li><p>* &#x2F; %<br>乘，除，取模运算。两端参数会转换为整数，如果转换失败则报错。</p></li><li><p>() 可以改变优先级，但需要用反斜杠转义</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"></span><br><span class="line">a=3</span><br><span class="line">b=4</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> `<span class="built_in">expr</span> <span class="variable">$a</span> + <span class="variable">$b</span>`  <span class="comment"># 输出7</span></span><br><span class="line"><span class="built_in">echo</span> `<span class="built_in">expr</span> <span class="variable">$a</span> - <span class="variable">$b</span>`  <span class="comment"># 输出-1</span></span><br><span class="line"><span class="built_in">echo</span> `<span class="built_in">expr</span> <span class="variable">$a</span> \* <span class="variable">$b</span>`  <span class="comment"># 输出12，*需要转义</span></span><br><span class="line"><span class="built_in">echo</span> `<span class="built_in">expr</span> <span class="variable">$a</span> / <span class="variable">$b</span>`  <span class="comment"># 输出0，整除</span></span><br><span class="line"><span class="built_in">echo</span> `<span class="built_in">expr</span> <span class="variable">$a</span> % <span class="variable">$b</span>` <span class="comment"># 输出3</span></span><br><span class="line"><span class="built_in">echo</span> `<span class="built_in">expr</span> \( <span class="variable">$a</span> + 1 \) \* \( <span class="variable">$b</span> + 1 \)`  <span class="comment"># 输出20，值为(a + 1) * (b + 1)</span></span><br></pre></td></tr></table></figure><h4 id="逻辑关系表达式"><a href="#逻辑关系表达式" class="headerlink" title="逻辑关系表达式"></a>逻辑关系表达式</h4><ul><li>|</li></ul><p>如果第一个参数非空且非0，则返回第一个参数的值，否则返回第二个参数的值，但要求第二个参数的值也是非空或非0，否则返回0。如果第一个参数是非空或非0时，不会计算第二个参数。(<code>短路原则</code>)</p><ul><li>&amp;</li></ul><p>如果两个参数都非空且非0，则返回第一个参数，否则返回0。如果第一个参为0或为空，则不会计算第二个参数。(<code>短路原则</code>)</p><ul><li>&lt; &lt;&#x3D; &#x3D; &#x3D;&#x3D; !&#x3D; &gt;&#x3D; &gt;</li></ul><p>比较两端的参数，如果为true，则返回1，否则返回0。”&#x3D;&#x3D;”是”&#x3D;”的同义词。”expr”首先尝试将两端参数转换为整数，并做算术比较，如果转换失败，则按字符集排序规则做字符比较。</p><ul><li>()</li></ul><p>可以改变优先级，但需要用反斜杠转义</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">a=3</span><br><span class="line">b=4</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> `<span class="built_in">expr</span> <span class="variable">$a</span> \&gt; <span class="variable">$b</span>`  <span class="comment"># 输出0，&gt;需要转义</span></span><br><span class="line"><span class="built_in">echo</span> `<span class="built_in">expr</span> <span class="variable">$a</span> <span class="string">&#x27;&lt;&#x27;</span> <span class="variable">$b</span>`  <span class="comment"># 输出1，也可以将特殊字符用引号引起来</span></span><br><span class="line"><span class="built_in">echo</span> `<span class="built_in">expr</span> <span class="variable">$a</span> <span class="string">&#x27;&gt;=&#x27;</span> <span class="variable">$b</span>`  <span class="comment"># 输出0</span></span><br><span class="line"><span class="built_in">echo</span> `<span class="built_in">expr</span> <span class="variable">$a</span> \&lt;\= <span class="variable">$b</span>`  <span class="comment"># 输出1</span></span><br><span class="line"></span><br><span class="line">c=0</span><br><span class="line">d=5</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> `<span class="built_in">expr</span> <span class="variable">$c</span> \&amp; <span class="variable">$d</span>`  <span class="comment"># 输出0</span></span><br><span class="line"><span class="built_in">echo</span> `<span class="built_in">expr</span> <span class="variable">$a</span> \&amp; <span class="variable">$b</span>`  <span class="comment"># 输出3</span></span><br><span class="line"><span class="built_in">echo</span> `<span class="built_in">expr</span> <span class="variable">$c</span> \| <span class="variable">$d</span>`  <span class="comment"># 输出5</span></span><br><span class="line"><span class="built_in">echo</span> `<span class="built_in">expr</span> <span class="variable">$a</span> \| <span class="variable">$b</span>`  <span class="comment"># 输出3</span></span><br></pre></td></tr></table></figure><h3 id="read命令"><a href="#read命令" class="headerlink" title="read命令"></a>read命令</h3><p>read命令用于从标准输入中读取单行数据。当读到文件结束符时(Ctrl + D)，exit code为1，否则为0。</p><p><code>参数说明</code></p><ul><li>-p：后面可以接提示信息</li><li>-t：后面跟秒数，定义输入字符的等待时间，超过等待时间后会自动忽略此命令（后面的命令依旧会执行）</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">user:~$ <span class="built_in">read</span> name  <span class="comment"># 读入name的值</span></span><br><span class="line">shell_lx  <span class="comment"># 标准输入</span></span><br><span class="line">user:~$ <span class="built_in">echo</span> <span class="variable">$name</span>  <span class="comment"># 输出name的值</span></span><br><span class="line">shell_lx  <span class="comment">#标准输出</span></span><br><span class="line">user:~$ <span class="built_in">read</span> -p <span class="string">&quot;Please input your name: &quot;</span> -t 30 name  <span class="comment"># 读入name的值，等待时间30秒，时间超过会忽略本条命令，后面命令正常执行</span></span><br><span class="line">Please input your name: shell_lx  <span class="comment"># 标准输入</span></span><br><span class="line">user:~$ <span class="built_in">echo</span> <span class="variable">$name</span>  <span class="comment"># 输出name的值</span></span><br><span class="line">shell_lx  <span class="comment"># 标准输出</span></span><br></pre></td></tr></table></figure><h3 id="echo命令"><a href="#echo命令" class="headerlink" title="echo命令"></a>echo命令</h3><p>在shell终端输入 <code>man echo</code> 可以查看用法</p><p><code>echo</code>用于输出字符串。命令格式：echo string</p><h4 id="显示普通字符串"><a href="#显示普通字符串" class="headerlink" title="显示普通字符串"></a>显示普通字符串</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Hello AC Terminal&quot;</span></span><br><span class="line"><span class="built_in">echo</span> Hello AC Terminal  <span class="comment"># 引号可以省略</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果为：Hello AC Terminal</span></span><br></pre></td></tr></table></figure><h4 id="显示转义字符"><a href="#显示转义字符" class="headerlink" title="显示转义字符"></a>显示转义字符</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;\&quot;Hello AC Terminal\&quot;&quot;</span>  <span class="comment"># 注意只能使用双引号，如果使用单引号，则不转义</span></span><br><span class="line"><span class="built_in">echo</span> \&quot;Hello AC Terminal\&quot;  <span class="comment"># 也可以省略双引号</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果为：&quot;Hello AC Terminal&quot;</span></span><br></pre></td></tr></table></figure><h4 id="显示变量"><a href="#显示变量" class="headerlink" title="显示变量"></a>显示变量</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"></span><br><span class="line">name=lx</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;My name is <span class="variable">$name</span>&quot;</span>  <span class="comment"># 输出 My name is lx</span></span><br></pre></td></tr></table></figure><h4 id="显示换行"><a href="#显示换行" class="headerlink" title="显示换行"></a>显示换行</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;Hi\n&quot;</span>  <span class="comment"># -e 开启转义</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;shell&quot;</span></span><br><span class="line"></span><br><span class="line">:&lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">输出结果：</span></span><br><span class="line"><span class="string">Hi</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">shell</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><h4 id="显示不换行"><a href="#显示不换行" class="headerlink" title="显示不换行"></a>显示不换行</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"><span class="comment"># echo 默认换行</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;Hi \c&quot;</span> <span class="comment"># -e 开启转义 \c 不换行</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;shell&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果：Hi shell</span></span><br></pre></td></tr></table></figure><h4 id="显示结果定向至文件"><a href="#显示结果定向至文件" class="headerlink" title="显示结果定向至文件"></a>显示结果定向至文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Hello World&quot;</span> &gt; output.txt  <span class="comment"># 将内容以覆盖的方式输出到output.txt中</span></span><br></pre></td></tr></table></figure><h4 id="原样输出字符串，不进行转义或取变量-用单引号"><a href="#原样输出字符串，不进行转义或取变量-用单引号" class="headerlink" title="原样输出字符串，不进行转义或取变量(用单引号)"></a>原样输出字符串，不进行转义或取变量(用单引号)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"></span><br><span class="line">name=shell</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;$name\&quot;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果：$name\&quot;</span></span><br></pre></td></tr></table></figure><h4 id="显示命令的执行结果"><a href="#显示命令的执行结果" class="headerlink" title="显示命令的执行结果"></a>显示命令的执行结果</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> `<span class="built_in">date</span>` <span class="comment"># 同理可以 echo $(date)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果：具体日期</span></span><br></pre></td></tr></table></figure><h3 id="printf命令"><a href="#printf命令" class="headerlink" title="printf命令"></a>printf命令</h3><p>printf命令用于格式化输出，类似于C&#x2F;C++中的printf函数</p><p>默认不会在字符串末尾添加换行符。</p><p><code>命令格式</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span> format-string [arguments...]</span><br></pre></td></tr></table></figure><p><code>用法示例</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span> <span class="string">&quot;%10d.\n&quot;</span> 123  <span class="comment"># 占10位，右对齐</span></span><br><span class="line"><span class="built_in">printf</span> <span class="string">&quot;%-10.2f.\n&quot;</span> 123.123321  <span class="comment"># 占10位，保留2位小数，-表示左对齐</span></span><br><span class="line"><span class="built_in">printf</span> <span class="string">&quot;My name is %s\n&quot;</span> <span class="string">&quot;lx&quot;</span>  <span class="comment"># 格式化输出字符串</span></span><br><span class="line"><span class="built_in">printf</span> <span class="string">&quot;%d * %d = %d\n&quot;</span>  2 3 `<span class="built_in">expr</span> 2 \* 3` <span class="comment"># 表达式的值作为参数</span></span><br><span class="line"></span><br><span class="line">:&lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">输出结果：</span></span><br><span class="line"><span class="string">       123.</span></span><br><span class="line"><span class="string">123.12    .</span></span><br><span class="line"><span class="string">My name is lx</span></span><br><span class="line"><span class="string">2 * 3 = 6</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><h3 id="test命令与判断符合"><a href="#test命令与判断符合" class="headerlink" title="test命令与判断符合[]"></a>test命令与判断符合[]</h3><h4 id="逻辑运算符-和"><a href="#逻辑运算符-和" class="headerlink" title="逻辑运算符&amp;&amp;和||"></a>逻辑运算符&amp;&amp;和||</h4><ul><li><code>&amp;&amp;</code> 表示与，<code>||</code> 表示或</li><li>二者具有短路原则：<ul><li><code>expr1 &amp;&amp; expr2</code>：当expr1为假时，直接忽略expr2</li><li><code>expr1 || expr2</code>：当expr1为真时，直接忽略expr2</li></ul></li><li>表达式的 exit code（函数返回值，例如：return 0）为0，表示真；为非零，表示假。（与C&#x2F;C++中的定义相反）</li></ul><h4 id="test命令"><a href="#test命令" class="headerlink" title="test命令"></a>test命令</h4><p>在命令行中输入 <code>man test</code>，可以查看 test 命令的用法。</p><p>test命令用于判断文件类型，以及对变量做比较。</p><p><code>test命令用exit code返回结果，而不是使用stdout。0表示真，非0表示假</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">test</span> 2 -lt 3  <span class="comment"># 为真，返回值为0</span></span><br><span class="line"><span class="built_in">echo</span> $?  <span class="comment"># 输出上个命令的返回值，输出0</span></span><br><span class="line"></span><br><span class="line">user:~$ <span class="built_in">ls</span>  <span class="comment"># 列出当前目录下的所有文件</span></span><br><span class="line">homework  output.txt  test.sh  tmp</span><br><span class="line">user:~$ <span class="built_in">test</span> -e test.sh &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;exist&quot;</span> || <span class="built_in">echo</span> <span class="string">&quot;Not exist&quot;</span></span><br><span class="line">exist  <span class="comment"># test.sh 文件存在</span></span><br><span class="line">user:~$ <span class="built_in">test</span> -e test2.sh &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;exist&quot;</span> || <span class="built_in">echo</span> <span class="string">&quot;Not exist&quot;</span></span><br><span class="line">Not exist  <span class="comment"># testh2.sh 文件不存在</span></span><br></pre></td></tr></table></figure><h5 id="文件类型判断"><a href="#文件类型判断" class="headerlink" title="文件类型判断"></a>文件类型判断</h5><p>命令格式：<code>test -e filename  # 判断文件是否存在</code></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20231001150159910.png" alt="image-20231001150159910"></p><h5 id="文件权限判断"><a href="#文件权限判断" class="headerlink" title="文件权限判断"></a>文件权限判断</h5><p>命令格式：<code>test -r filename  # 判断文件是否可读</code></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20231001150255628.png" alt="image-20231001150255628"></p><h5 id="整数间的比较"><a href="#整数间的比较" class="headerlink" title="整数间的比较"></a>整数间的比较</h5><p>命令格式：<code>test $a -eq $b  # a是否等于b</code></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20231001150343602.png" alt="image-20231001150343602"></p><h5 id="字符串比较"><a href="#字符串比较" class="headerlink" title="字符串比较"></a>字符串比较</h5><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20231001150407064.png" alt="image-20231001150407064"></p><h5 id="多重条件判断"><a href="#多重条件判断" class="headerlink" title="多重条件判断"></a>多重条件判断</h5><p>命令格式：<code>test -r filename -a -x filename</code></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20231001150453404.png" alt="image-20231001150453404"></p><h4 id="判断符合"><a href="#判断符合" class="headerlink" title="判断符合[]"></a>判断符合[]</h4><p><code>[]</code>与<code>test</code>用法几乎一模一样，更常用于if语句中。另外<code>[[]]</code>是<code>[]</code>的加强版，支持的特性更多。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[ 2 -lt 3 ]  <span class="comment"># 为真，返回值为0</span></span><br><span class="line"><span class="built_in">echo</span> $?  <span class="comment"># 输出上个命令的返回值，输出0</span></span><br><span class="line"></span><br><span class="line">user:~$ <span class="built_in">ls</span>  <span class="comment"># 列出当前目录下的所有文件</span></span><br><span class="line">homework  output.txt  test.sh  tmp</span><br><span class="line">user:~$ [ -e test.sh ] &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;exist&quot;</span> || <span class="built_in">echo</span> <span class="string">&quot;Not exist&quot;</span></span><br><span class="line">exist  <span class="comment"># test.sh 文件存在</span></span><br><span class="line">user:~$ [ -e test2.sh ] &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;exist&quot;</span> || <span class="built_in">echo</span> <span class="string">&quot;Not exist&quot;</span></span><br><span class="line">Not exist  <span class="comment"># testh2.sh 文件不存在</span></span><br></pre></td></tr></table></figure><p>注意：</p><ul><li><code>[]</code>内的每一项都要用空格隔开</li><li>中括号内的变量，最好用双引号括起来</li><li>中括号内的常数，最好用单或双引号括起来</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name=<span class="string">&quot;shell lx&quot;</span></span><br><span class="line">[ <span class="variable">$name</span> == <span class="string">&quot;shell lx&quot;</span> ]  <span class="comment"># 错误，等价于 [ shell lx == &quot;shell lx&quot; ],too many argements</span></span><br><span class="line">[ <span class="string">&quot;<span class="variable">$name</span>&quot;</span> == <span class="string">&quot;shell lx&quot;</span> ]  <span class="comment"># 正确</span></span><br></pre></td></tr></table></figure><h3 id="判断语句"><a href="#判断语句" class="headerlink" title="判断语句"></a>判断语句</h3><p><code>if...then</code>形式</p><p>类似于C&#x2F;C++中的if-else语句。</p><h5 id="单层if"><a href="#单层if" class="headerlink" title="单层if"></a>单层if</h5><p>命令格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> condition</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h5 id="单层if-else"><a href="#单层if-else" class="headerlink" title="单层if-else"></a>单层if-else</h5><p>命令格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> condition</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h5 id="多层if-elif-elif-else"><a href="#多层if-elif-elif-else" class="headerlink" title="多层if-elif-elif-else"></a>多层if-elif-elif-else</h5><p>命令格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> condition</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">elif</span> condition</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">elif</span> condition</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h5 id="case…esac形式"><a href="#case…esac形式" class="headerlink" title="case…esac形式"></a>case…esac形式</h5><p>类似于C&#x2F;C++中的switch语句。</p><p>命令格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> $变量名称 <span class="keyword">in</span></span><br><span class="line">    值1)</span><br><span class="line">        语句1</span><br><span class="line">        语句2</span><br><span class="line">        ...</span><br><span class="line">        ;;  <span class="comment"># 类似于C/C++中的break</span></span><br><span class="line">    值2)</span><br><span class="line">        语句1</span><br><span class="line">        语句2</span><br><span class="line">        ...</span><br><span class="line">        ;;</span><br><span class="line">    *)  <span class="comment"># 类似于C/C++中的default</span></span><br><span class="line">        语句1</span><br><span class="line">        语句2</span><br><span class="line">        ...</span><br><span class="line">        ;;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure><h3 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h3><h4 id="for…in…do…done"><a href="#for…in…do…done" class="headerlink" title="for…in…do…done"></a>for…in…do…done</h4><p>命令格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> var <span class="keyword">in</span> val1 val2 val3</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p><code>示例一,输出a 2 cc,每个元素一行</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a 2 cc</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p><code>示例二,输出当前路径下的所有文件名，每个文件名一行</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> `<span class="built_in">ls</span>`</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$file</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p><code>示例三,输出1~10</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> $(<span class="built_in">seq</span> 1 10)</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p><code>示例四,使用&#123;1..10&#125; 或者 &#123;a..z&#125;(反过来同样可以)</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;a..z&#125;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h4 id="for-…-…-…-do…done"><a href="#for-…-…-…-do…done" class="headerlink" title="for ((…;…;…)) do…done"></a>for ((…;…;…)) do…done</h4><p>命令格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ((expression; condition; expression))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p><code>示例,输出1~10,每个数占一行</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ((i=<span class="number">1</span>; i&lt;=<span class="number">10</span>; i++))  <span class="comment"># =前后可以加空格</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h4 id="while…do…done循环"><a href="#while…do…done循环" class="headerlink" title="while…do…done循环"></a>while…do…done循环</h4><p>命令格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> condition</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p><code>示例，文件结束符为Ctrl+d，输入文件结束符后read指令返回false</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="built_in">read</span> name</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$name</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h4 id="until…do…done循环"><a href="#until…do…done循环" class="headerlink" title="until…do…done循环"></a>until…do…done循环</h4><p><strong>当条件为真时结束。</strong></p><p>命令格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">until</span> condition</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p><code>示例，当用户输入yes或者YES时结束，否则一直等待读入</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">until</span> [ <span class="string">&quot;<span class="variable">$&#123;word&#125;</span>&quot;</span> == <span class="string">&quot;yes&quot;</span> ] || [ <span class="string">&quot;<span class="variable">$&#123;word&#125;</span>&quot;</span> == <span class="string">&quot;YES&quot;</span> ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">read</span> -p <span class="string">&quot;Please input yes/YES to stop this program: &quot;</span> word</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h4 id="break命令"><a href="#break命令" class="headerlink" title="break命令"></a>break命令</h4><p>跳出当前一层循环，注意与C&#x2F;C++不同的是：<code>break不能跳出case语句</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="built_in">read</span> name</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="keyword">for</span> ((i=<span class="number">1</span>;i&lt;=<span class="number">10</span>;i++))</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">case</span> <span class="variable">$i</span> <span class="keyword">in</span></span><br><span class="line">            8)</span><br><span class="line">                <span class="built_in">break</span></span><br><span class="line">                ;;</span><br><span class="line">            *)</span><br><span class="line">                <span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line">                ;;</span><br><span class="line">        <span class="keyword">esac</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">:&lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">该示例每读入非EOF</span>的字符串，会输出一遍1-7。</span><br><span class="line">该程序可以输入Ctrl+d文件结束符来结束，也可以直接用Ctrl+c杀掉该进程。</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h4 id="continue命令"><a href="#continue命令" class="headerlink" title="continue命令"></a>continue命令</h4><p>跳出当前循环。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ((i=<span class="number">1</span>;i&lt;=<span class="number">10</span>;i++))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="keyword">if</span> [ `<span class="built_in">expr</span> <span class="variable">$i</span> % 2` -eq 0 ]</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">continue</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 该程序输出1-10中的所有奇数。</span></span><br></pre></td></tr></table></figure><h4 id="死循环的处理方式"><a href="#死循环的处理方式" class="headerlink" title="死循环的处理方式"></a>死循环的处理方式</h4><p>如果Terminal可以打开该程序，则输入Ctrl+c即可。</p><p>否则可以直接关闭进程：</p><ul><li>使用<code>top</code>命令找到进程的<code>PID</code></li><li>输入<code>kill -9 PID</code>即可关掉此进程</li></ul><p>补充：ps aux返回当前打开的所有进程</p><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>bash中的函数类似于C&#x2F;C++中的函数，但 return 的返回值与C&#x2F;C++不同，返回的是 <code>exit code</code>，取值为 0-255，0表示正常结束。</p><p>如果想获取函数的输出结果，可以通过 echo 输出到 stdout 中，然后通过 <code>$(function_name)</code> 来获取 stdout 中的结果。</p><p>函数的return值可以通过<code>$?</code>来获取。</p><p>命令格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="keyword">function</span>] <span class="function"><span class="title">func_name</span></span>() &#123;  <span class="comment"># function关键字可以省略</span></span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="不获取-return值和stdout值"><a href="#不获取-return值和stdout值" class="headerlink" title="不获取 return值和stdout值"></a>不获取 return值和stdout值</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">func</span></span>() &#123;</span><br><span class="line">    name=lx</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Hello <span class="variable">$name</span>&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果：Hello lx</span></span><br></pre></td></tr></table></figure><h4 id="获取-return值和stdout值"><a href="#获取-return值和stdout值" class="headerlink" title="获取 return值和stdout值"></a>获取 return值和stdout值</h4><p>不写return时，默认return 0。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">func</span></span>() &#123;</span><br><span class="line">    name=yxc</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Hello <span class="variable">$name</span>&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">return</span> 123</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output=$(func)</span><br><span class="line">ret=$?</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;output = <span class="variable">$output</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;return = <span class="variable">$ret</span>&quot;</span></span><br><span class="line"></span><br><span class="line">:&lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">输出结果：</span></span><br><span class="line"><span class="string">output = Hello yxc</span></span><br><span class="line"><span class="string">return = 123</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><h4 id="函数的输入参数"><a href="#函数的输入参数" class="headerlink" title="函数的输入参数"></a>函数的输入参数</h4><p>在函数内，<code>$1</code>表示第一个输入参数，<code>$2</code>表示第二个输入参数，依此类推。</p><p>注意：函数内的<code>$0</code>仍然是文件名，而不是函数名。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">func</span></span>() &#123;  <span class="comment"># 递归计算 $1 + ($1 - 1) + ($1 - 2) + ... + 0</span></span><br><span class="line">    word=<span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">while</span> [ <span class="string">&quot;<span class="variable">$&#123;word&#125;</span>&quot;</span> != <span class="string">&#x27;y&#x27;</span> ] &amp;&amp; [ <span class="string">&quot;<span class="variable">$&#123;word&#125;</span>&quot;</span> != <span class="string">&#x27;n&#x27;</span> ]</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">        <span class="built_in">read</span> -p <span class="string">&quot;要进入func(<span class="variable">$1</span>)函数吗？请输入y/n：&quot;</span> word</span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$word</span>&quot;</span> == <span class="string">&#x27;n&#x27;</span> ]</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> 0</span><br><span class="line">        <span class="built_in">return</span> 0</span><br><span class="line">    <span class="keyword">fi</span>  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> [ <span class="variable">$1</span> -le 0 ] </span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> 0</span><br><span class="line">        <span class="built_in">return</span> 0</span><br><span class="line">    <span class="keyword">fi</span>  </span><br><span class="line"></span><br><span class="line">    <span class="built_in">sum</span>=$(func $(<span class="built_in">expr</span> <span class="variable">$1</span> - 1))</span><br><span class="line">    <span class="built_in">echo</span> $(<span class="built_in">expr</span> <span class="variable">$sum</span> + <span class="variable">$1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> $(func 10)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果：55</span></span><br></pre></td></tr></table></figure><p>为什么只输出55不输出其他的值，只要在echo函数后面有<code>$</code>，这个<code>$</code>就会截获掉stdout里的值，使得echo找不到stdout里的数据从而不能输出，在递归往回调用的过程中上一层的echo会被这一层的<code>sum=$(func $(expr $1 - 1))</code>中的第一个<code>$</code>捕获从而没有输出，而最后一层的echo会被函数外的<code>echo $(func 10)</code>的<code>$</code>捕获因此是函数外的echo输出的55。如果你把函数外的<code>echo $(func 10)</code>改成<code>func 10</code>就是最后一层递归e<code>cho $(expr $sum + $1)</code>输出的55。</p><h4 id="函数内的局部变量"><a href="#函数内的局部变量" class="headerlink" title="函数内的局部变量"></a>函数内的局部变量</h4><p>可以在函数内定义局部变量，作用范围仅在当前函数内。</p><p>可以在递归函数中定义局部变量。</p><p>命令格式：<code>local 变量名=变量值</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">func</span></span>() &#123;</span><br><span class="line">    <span class="built_in">local</span> name=lx</span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$name</span></span><br><span class="line">&#125;</span><br><span class="line">func</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$name</span></span><br><span class="line"></span><br><span class="line">:&lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">输出结果：</span></span><br><span class="line"><span class="string">lx</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><p>第一行为函数内的name变量，第二行为函数外调用name变量，会发现此时该变量不存在。</p><h3 id="exit命令"><a href="#exit命令" class="headerlink" title="exit命令"></a>exit命令</h3><p>exit命令用来退出当前shell进程，并返回一个退出状态；使用<code>$?</code>可以接收这个退出状态。</p><p>exit命令可以接受一个整数值作为参数，代表退出状态。如果不指定，默认状态值是 0。</p><p>exit退出状态只能是一个介于 0~255 之间的整数，其中只有 0 表示成功，其它值都表示失败。</p><p>创建脚本test.sh，内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$#</span> -ne 1 ]  <span class="comment"># 如果传入参数个数等于1，则正常退出；否则非正常退出。</span></span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;arguments not valid&quot;</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;arguments valid&quot;</span></span><br><span class="line">    <span class="built_in">exit</span> 0</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>执行该脚本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">user:~$ <span class="built_in">chmod</span> +x test.sh </span><br><span class="line">user:~$ ./test.sh acwing</span><br><span class="line">arguments valid</span><br><span class="line">user:~$ <span class="built_in">echo</span> $?  <span class="comment"># 传入一个参数，则正常退出，exit code为0</span></span><br><span class="line">0</span><br><span class="line">user:~$ ./test.sh </span><br><span class="line">arguments not valid</span><br><span class="line">user:~$ <span class="built_in">echo</span> $?  <span class="comment"># 传入参数个数不是1，则非正常退出，exit code为1</span></span><br><span class="line">1</span><br></pre></td></tr></table></figure><h3 id="文件重定向"><a href="#文件重定向" class="headerlink" title="文件重定向"></a>文件重定向</h3><p>每个进程默认打开3个文件描述符：</p><ul><li><code>stdin</code>标准输入，从命令行读取数据，文件描述符为0</li><li><code>stdout</code>标准输出，向命令行输出数据，文件描述符为1</li><li><code>stderr</code>标准错误输出，向命令行输出数据，文件描述符为2</li></ul><p>可以用文件重定向将这三个文件重定向到其他文件中</p><h4 id="重定向命令列表"><a href="#重定向命令列表" class="headerlink" title="重定向命令列表"></a>重定向命令列表</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20231001163043255.png" alt="image-20231001163043255"></p><h4 id="输入和输出重定向"><a href="#输入和输出重定向" class="headerlink" title="输入和输出重定向"></a>输入和输出重定向</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;Hello \c&quot;</span> &gt; output.txt  <span class="comment"># 将stdout重定向到output.txt中</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;World&quot;</span> &gt;&gt; output.txt  <span class="comment"># 将字符串追加到output.txt中</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">read</span> str &lt; output.txt  <span class="comment"># 从output.txt中读取字符串</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$str</span>  <span class="comment"># 输出结果：Hello World</span></span><br></pre></td></tr></table></figure><h4 id="同时重定向stdin和stdout"><a href="#同时重定向stdin和stdout" class="headerlink" title="同时重定向stdin和stdout"></a>同时重定向stdin和stdout</h4><p><code>示例</code></p><p>创建bash脚本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">read</span> a</span><br><span class="line"><span class="built_in">read</span> b</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> $(<span class="built_in">expr</span> <span class="string">&quot;<span class="variable">$a</span>&quot;</span> + <span class="string">&quot;<span class="variable">$b</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>创建input.txt，里面的内容为：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">4</span><br></pre></td></tr></table></figure><p>执行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">user:~$ <span class="built_in">chmod</span> +x test.sh  <span class="comment"># 添加可执行权限</span></span><br><span class="line">user:~$ ./test.sh &lt; input.txt &gt; output.txt  <span class="comment"># 从input.txt中读取内容，将输出写入output.txt中(顺序可以变)</span></span><br><span class="line">user:~$ <span class="built_in">cat</span> output.txt  <span class="comment"># 查看output.txt中的内容</span></span><br><span class="line">7</span><br></pre></td></tr></table></figure><h3 id="引入外部脚本"><a href="#引入外部脚本" class="headerlink" title="引入外部脚本"></a>引入外部脚本</h3><p>类似于C&#x2F;C++中的include操作，bash也可以引入其他文件中的代码。</p><p>语法格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">. filename  <span class="comment"># 注意点和文件名之间有一个空格</span></span><br><span class="line"></span><br><span class="line">或</span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> filename</span><br></pre></td></tr></table></figure><p><code>示例</code></p><p>创建 test1.sh，内容为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"></span><br><span class="line">name=lx  <span class="comment"># 定义变量name</span></span><br></pre></td></tr></table></figure><p>然后创建 test2.sh，内容为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> test1.sh <span class="comment"># 或 . test1.sh</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> My name is: <span class="variable">$name</span>  <span class="comment"># 可以使用test1.sh中的变量</span></span><br></pre></td></tr></table></figure><p>执行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">user:~$ <span class="built_in">chmod</span> +x test2.sh </span><br><span class="line">user:~$ ./test2.sh </span><br><span class="line">My name is: lx</span><br></pre></td></tr></table></figure><h2 id="ssh"><a href="#ssh" class="headerlink" title="ssh"></a>ssh</h2><h3 id="ssh登录"><a href="#ssh登录" class="headerlink" title="ssh登录"></a>ssh登录</h3><h4 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h4><p>远程登录服务器：<code>ssh user@hostname</code></p><ul><li><code>user</code>：用户名</li><li><code>hostname</code>：IP地址或域名</li></ul><p>第一次登陆时会提示：（这里以AC terminal做展示）</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20231001231131361.png" alt="image-20231001231131361"></p><p>输入 <code>yes</code>，然后回车即可。</p><p>这样会将该服务器的信息记录在 <code>~/.ssh/known_hosts</code> 文件中。</p><p>然后输入密码即可登录到远程服务器中。 exit即可退出</p><p>默认登录端口号为22。如果想登录某一特定端口：</p><p><code>ssh user@hostname -p 22</code></p><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><p>创建文件 <code>~/.ssh/config</code></p><p>然后在文件中输入：（配置文件中可以配置多台服务器，回车隔开）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Host myserver</span><br><span class="line">HostName IP地址或域名</span><br><span class="line">User 用户名</span><br></pre></td></tr></table></figure><p>之后再使用服务器时，可以直接使用别名 <code>myserver</code></p><p><code>ssh myserver</code></p><h4 id="密钥登录"><a href="#密钥登录" class="headerlink" title="密钥登录"></a>密钥登录</h4><p>创建密钥：<code>ssh-keygen</code></p><p>然后一直回车即可。</p><p>执行结束后，<code>~/.ssh/</code>目录下会多两个文件：</p><ul><li><code>id_rsa</code>：私钥</li><li><code>id_rsa.pub</code>：公钥</li></ul><p>之后想免密码登录哪个服务器，就将公钥传给哪个服务器即可。</p><p>例如，想免密登录<code>myserver</code>服务器。则将公钥中的内容，复制到<code>myserver</code>中的<code>~/.ssh/authorized_keys</code>文件里即可。（多个秘钥的话回车隔开即可）</p><p>也可以使用如下命令一键添加公钥：</p><p><code>ssh-copy-id myserver</code></p><h4 id="执行命令"><a href="#执行命令" class="headerlink" title="执行命令"></a>执行命令</h4><p>命令格式：<code>ssh user@hostname command</code></p><p>例如：<code>ssh user@hostname ls -a</code></p><p>或者：（不加单引号或者双引号会有歧义，导致运行不了）</p><p>单引号中的 <code>$i</code> 可以求值</p><p><code>ssh myserver &#39;for ((i = 0; i &lt; 10; i ++ )) do echo $i; done&#39;</code></p><p>输出为：0~9各占一行（实际上是服务器的输出传回本地）</p><p>双引号中的 <code>$i</code> 不可以求值</p><p><code>ssh myserver &quot;for ((i = 0; i &lt; 10; i ++ )) do echo $i; done&quot;</code></p><p>输出为：10个空行</p><h3 id="scp传文件"><a href="#scp传文件" class="headerlink" title="scp传文件"></a>scp传文件</h3><h4 id="基本用法-1"><a href="#基本用法-1" class="headerlink" title="基本用法"></a>基本用法</h4><p>命令格式：<code>scp source destination</code></p><p>将<code>source</code>路径下的文件复制到<code>destination</code>中</p><p>一次复制多个文件：<code>scp source1 source2 destination</code></p><p>复制文件夹：</p><p><code>scp -r ~/tmp myserver:/home/acs/</code></p><p>将本地家目录中的<code>tmp</code>文件夹复制到<code>myserver</code>服务器中的<code>/home/acs/</code>目录下。</p><p><code>scp -r ~/tmp myserver:homework/</code></p><p>将本地家目录中的<code>tmp</code>文件夹复制到<code>myserver</code>服务器中的<code>~/homework/</code>目录下。</p><p><code>scp -r myserver:homework .</code></p><p>将<code>myserver</code>服务器中的<code>~/homework/</code>文件夹复制到本地的当前路径下。</p><p>指定服务器端口号：<code>scp -P 22 source1 source2 destination</code></p><p>注意： <code>scp</code>的<code>-r -P</code>等参数尽量加在<code>source</code>和<code>destination</code>之前。</p><p>使用<code>scp</code>配置其他服务器的<code>vim</code>和<code>tmux</code></p><p><code>scp ~/.vimrc ~/.tmux.conf myserver:</code></p><h2 id="git"><a href="#git" class="headerlink" title="git"></a>git</h2><h3 id="git基本概念"><a href="#git基本概念" class="headerlink" title="git基本概念"></a>git基本概念</h3><ul><li>工作区（workspace）：仓库的目录。工作区是独立于各个分支的（即不管位于哪个分支，工作区都是同一个）</li><li>暂存区（index&#x2F;stage）：数据暂时存放的区域，类似于工作区写入版本库前的缓存区。实际上是一个文件（<code>.git/index</code>）。缓存区是独立于各个分支的</li><li>版本库&#x2F;仓库（repository）：存放所有已经提交到本地仓库的代码版本</li><li>服务端&#x2F;远程仓库（origin 或 remote）：服务端的版本库，为多人共享提供服务，承担中心服务器的角色</li><li>本地仓库：用户机器上直接使用的版本库</li><li>版本结构：树结构，树中每个节点代表一个代码版本</li><li>分支（branch）：分支是从主线分离出去的<code>副本</code>，可以独立操作而互不干扰，仓库初始化就有一个默认主分支<code>master</code></li><li>Head：类似一个<code>指针</code>，指向当前活动分支的最新版本</li></ul><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/P1.png" alt="P1"></p><h3 id="git基本流程"><a href="#git基本流程" class="headerlink" title="git基本流程"></a>git基本流程</h3><ol><li>准备仓库：创建或从服务端克隆一个仓库</li><li>搬砖：在工作目录中添加、修改代码</li><li>暂存（<code>git add</code>）：将需要进行版本管理的文件放入暂存区域</li><li>提交（<code>git commit</code>）：将暂存区域的文件提交到 Git 仓库</li><li>推送（<code>git push</code>）：将本地仓库推送到远程仓库，同步版本库</li><li>获取更新（<code>fetch/pull</code>）：从服务端更新到本地，获取他人推送的更新，与他人协作、共享</li></ol><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/P2.png"></p><ul><li><code>git commit -a</code>：省略了 <code>add</code> 到暂存区的步骤，直接提交工作区的修改内容到版本库，不包括新增的文件</li><li><code>git fetch、git pull</code>：都是从远程服务端获取最新记录，区别是 <code>git pull</code> 多一个步骤（自动合并更新工作区）</li><li><code>git checkout .</code>、<code>git checkout  [file]</code>：会清除工作区中未添加到暂存区的修改，用暂存区内容替换工作区</li><li><code>git checkout HEAD .</code>、<code>git checkout HEAD [file]</code>：会清除工作区、暂存区的修改，用 <code>HEAD</code> 指向的当前分支最新版本替换暂存区、工作区</li><li><code>git diff</code>：用来对比不同部分之间的区别，如暂存区、工作区，最新版本与未提交内容，不同版本之间等</li><li><code>git reset</code>：专门用来撤销修改、回退版本的指令，替代上面 <code>checkout</code> 的撤销功能</li></ul><h3 id="git状态"><a href="#git状态" class="headerlink" title="git状态"></a>git状态</h3><ul><li>未跟踪（untracked）：新添加的文件，或被移除跟踪的文件，未建立跟踪，通过 <code>git add</code> 添加暂存并建立跟踪</li><li>未修改：从仓库取出的文件默认状态，修改后就是 <code>已修改</code> 状态</li><li>已修改（modified）：文件被修改后的状态</li><li>已暂存（staged）：修改、新增的文件添加到暂存区后的状态</li><li>已提交（committed）：从暂存区提交到版本库</li></ul><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/P3.png" alt="P3"></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/P4.png" alt="P4"></p><h3 id="git常用命令"><a href="#git常用命令" class="headerlink" title="git常用命令"></a>git常用命令</h3><ol><li><p><code>git config --global user.name xxx</code>：设置全局用户名，信息记录在 <code>~/.gitconfig</code> 文件中</p></li><li><p><code>git config --global user.email xxx@xxx.com</code>：设置全局邮箱地址，信息记录在 <code>~/.gitconfig</code> 文件中</p></li><li><p><code>git init</code>：将当前目录配置成 <code>git</code> 仓库，信息记录在隐藏的 <code>.git</code> 文件夹中</p></li><li><p><code>git add XX</code>：将 XX 文件添加到暂存区</p><ul><li><code>git add .</code>：将所有待加入暂存区的文件加入暂存区</li></ul></li><li><p><code>git rm --cached XX</code>：将文件从仓库索引目录中删掉（使其取消跟踪）</p><ol><li><code>git restore --staged XX</code>：将文件从暂存区拿出来，但是仍然对其进行管理（即未取消跟踪）</li></ol></li><li><p><code>git commit</code>：提交变更</p><ol><li><code>git commit -m &quot;给自己看的备注信息&quot;</code>：将暂存区的内容提交到当前分支，参数 <code>-m</code> 设置提交的描述信息</li><li><code>git commit -a</code>：参数 <code>-a</code> 表示直接从工作区提交到版本库，略过了 <code>git add</code> 步骤，不包括新增的文件</li><li><code>git commit [file]</code>：提交暂存区的指定文件到仓库区（当前分支）</li><li><code>git commit --amend -m</code>：使用一次新的 <code>commit</code>，替代上一次提交，会修改 <code>commit</code> 的 <code>hash</code> 值（id）</li></ol></li><li><p><code>git status</code>：查看仓库状态，加参数 <code>-s</code> 简洁模式</p></li><li><p><code>git diff</code>：查看缓存区和工作区的差异（相对于暂存区修改了哪些内容）</p><ol><li><code>git diff [file]</code>：同上，指定文件</li><li><code>git diff --cached</code>：查看已缓存的改动，就是暂存区与新版本 <code>HEAD</code> 进行比较</li><li><code>git diff --staged</code>：同上</li><li><code>git diff --cached [file]</code>：同上，指定文件</li><li><code>git diff HEAD</code>：查看已缓存+未缓存的所有改动，就是与最新版本 <code>HEAD</code> 进行比较</li><li><code>git diff HEAD~</code>：同时，与上一个版本比较。<code>HEAD~</code> 表示上一个版本，<code>HEAD~10</code> 为最近第10个版本</li><li><code>git diff [id] [id]</code>：查看两次提交之间的差异</li><li><code>git diff [branch]</code>：查看工作区和分支之间的差异</li></ol></li><li><p><code>git log</code>：查看当前分支的所有版本</p><ol><li><code>git log -n20</code>：查看日志（最近20条），不带参数 <code>-n</code> 则显示所有日志</li><li><code>git log -n20 --oneline</code>：参数 <code>--oneline</code> 可以让日志输出更简便（一行）</li><li><code>git log -n20 --graph</code>：参数 <code>--graph</code> 可视化显示分支关系</li><li><code>git log --follow [file]</code>：显示某个文件的版本历史</li></ol></li><li><p><code>git blame [file]</code>：以列表形式显示指定文件的修改记录</p></li><li><p><code>git reflog</code>：查看 <code>HEAD</code> 指针的移动历史（包括被回滚的版本），即查看所有可用的历史版本记录</p></li><li><p><code>git reset --hard HEAD^ 或 git reset --hard HEAD~</code>：将代码库回滚到上一个版本</p><ul><li><code>git reset --hard HEAD^^</code>：往上回滚两次，以此类推</li><li><code>git reset --hard HEAD~100</code>：往上回滚100个版本</li><li><code>git reset --hard 版本号</code>：回滚到某一特定版本</li></ul></li><li><p><code>git checkout — XX 或 git restore XX</code>：将XX文件尚未加入暂存区的修改全部撤销（将工作区的最新修改恢复到暂存区版本）</p></li><li><p><code>git remote add origin git@git.acwing.com:xxx/XXX.git</code>：将本地仓库关联到远程仓库</p></li><li><p><code>git push -u (第一次需要-u以后不需要)</code>：将当前分支推送到远程仓库</p><ul><li><code>git push origin branch_name</code>：将本地的某个分支推送到远程仓库</li></ul></li><li><p><code>git clone git@git.acwing.com:xxx/XXX.git</code>：将远程仓库XXX下载到当前目录下</p></li><li><p><code>git checkout -b branch_name</code>：创建并切换到 <code>branch_name</code> 这个分支</p></li><li><p><code>git branch</code>：查看所有分支和当前所处分支</p></li><li><p><code>git checkout branch_name</code>：切换到 <code>branch_name</code> 这个分支</p></li><li><p><code>git merge branch_name</code>：将分支 <code>branch_name</code> 合并到当前分支上</p></li><li><p><code>git branch -d branch_name</code>：删除本地仓库的 <code>branch_name</code> 分支</p></li><li><p><code>git branch branch_name</code>：创建新分支</p></li><li><p><code>git push --set-upstream origin branch_name</code>：设置本地的 <code>branch_name</code> 分支对应远程仓库的 <code>branch_name</code> 分支</p></li><li><p><code>git push -d origin branch_name</code>：删除远程仓库的 branch_name 分支</p></li><li><p><code>git pull</code>：将远程仓库的当前分支与本地仓库的当前分支合并</p><ul><li><code>git pull origin branch_name</code>：将远程仓库的 <code>branch_name</code> 分支与本地仓库的当前分支合并</li></ul></li><li><p><code>git branch --set-upstream-to=origin/branch_name1 branch_name2</code>：将远程的 <code>branch_name1</code> 分支与本地的 <code>branch_name2</code> 分支对应</p></li><li><p><code>git checkout -t origin/branch_name</code>：将远程的 <code>branch_name</code> 分支拉取到本地</p></li><li><p><code>git stash</code>：将工作区和暂存区中尚未提交的修改存入栈中</p></li><li><p><code>git stash apply</code>：将栈顶存储的修改恢复到当前分支，但不删除栈顶元素</p></li><li><p><code>git stash drop</code>：删除栈顶存储的修改</p></li><li><p><code>git stash pop</code>：将栈顶存储的修改恢复到当前分支，同时删除栈顶元素</p></li><li><p><code>git stash list</code>：查看栈中所有元素</p></li></ol><h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><h4 id="本地Part"><a href="#本地Part" class="headerlink" title="本地Part"></a>本地Part</h4><p><code>git</code> 首先可以设置自己的名字和邮箱</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name lx</span><br><span class="line">git config --global user.email lx_xiaolimail#163.com</span><br></pre></td></tr></table></figure><p>设置完之后可以在家目录下看到一个 <code>.gitconfig</code> 文件，信息便存储在里面</p><p>接下来模拟项目开发</p><p>首先创建文件夹：<code>project</code> 用来进行项目开发</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240122213448667.png" alt="image-20240122213448667"></p><p>此时，该文件夹（project）还只是一个普通文件夹</p><p>需要执行 <code>git init</code> 将该文件夹变成一个仓库，相关信息存储在 <code>.git</code> 里</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240122213640974.png" alt="image-20240122213640974"></p><p>暂时仓库里什么内容都没有，版本库如下：</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240122215118450.png" alt="image-20240122215118450"></p><p>先创建一个文件 <code>readme.txt</code>，内容为：111</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240122215328143.png" alt="image-20240122215328143"></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240122215348192.png" alt="image-20240122215348192"></p><p>使用 <code>git status</code> 查看仓库当前状态</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240122215449768.png" alt="image-20240122215449768"></p><p>表示当前有一个文件暂未加入到暂存区里，然后使用 <code>git add readme.txt</code> 将文件加入的暂存区</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240122215615608.png" alt="image-20240122215615608"></p><p>假设当前状态为项目第一个版本，现在使用 <code>git commit</code> 将暂存区内容放入版本库</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240122220053700.png" alt="image-20240122220053700"></p><p>现在对 <code>readme.txt</code> 进行修改，添加内容：222</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240122221134626.png" alt="image-20240122221134626"></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240122221224569.png" alt="image-20240122221224569"></p><p>这里为了检验 <code>git diff</code> 先将 <code>readme.txt</code> 从缓存区中拿出来</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240122221522896.png" alt="image-20240122221522896"></p><p>重新将文件加入暂存区之后，再将当前暂存区内容存入版本库</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240122221716760.png" alt="image-20240122221716760"></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240122222012263.png" alt="image-20240122222012263"></p><p>再次修改 <code>readme.txt</code>，添加内容：333</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240122222401322.png" alt="image-20240122222401322"></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240122222454624.png" alt="image-20240122222454624"></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240122222827092.png" alt="image-20240122222827092"></p><p>使用 <code>git log</code> 可以查看全部历史版本（从Empty到当前版本的路径）</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240122222553300.png" alt="image-20240122222553300"></p><p>使用 <code>git reset</code> 可以回退到指定版本</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240122223341326.png" alt="image-20240122223341326"></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240122223646600.png" alt="image-20240122223646600"></p><p>现在若想回到最新版本，即 <code>Add 333</code> 版本，需使用 <code>git reflog</code> 查看 <code>Head</code> 移动记录，找到对应版本再使用 <code>git reset</code> 进行回退</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240122223840437.png" alt="image-20240122223840437"></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240122222827092.png"></p><p>上述内容全部存储在本地的 <code>.git</code> 文件夹里</p><h4 id="云端Part"><a href="#云端Part" class="headerlink" title="云端Part"></a>云端Part</h4><p>这里以 <code>git.acwing.com</code> 作为云端来展示项目开发过程</p><h5 id="本地上传云端"><a href="#本地上传云端" class="headerlink" title="本地上传云端"></a>本地上传云端</h5><p>现在云端创建项目，项目名称须与本地文件夹（仓库）一样</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240122225618780.png" alt="image-20240122225618780"></p><p>上图最后一项<code>使用自述文件初始化仓库</code>，意思是：如果本地有仓库，想将本地仓库上传，就跳过此步骤</p><p>先找到本地SSH公钥</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240122230256947.png" alt="image-20240122230256947"></p><p>然后在云端添加SSH密钥（添加成功后邮箱会受到短信）</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240122230412165.png" alt="image-20240122230412165"></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240122230453646.png" alt="image-20240122230453646"></p><p>然后点开项目会有如下内容</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240122230701798.png" alt="image-20240122230701798"></p><p>先将本地仓库对应当远程仓库</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240122230914388.png" alt="image-20240122230914388"></p><p>现在在云端刷新，便可看到同步后项目（默认 <code>master</code> 分支）</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240122230950686.png" alt="image-20240122230950686"></p><h5 id="模拟新设备从云端将项目下载到本地"><a href="#模拟新设备从云端将项目下载到本地" class="headerlink" title="模拟新设备从云端将项目下载到本地"></a>模拟新设备从云端将项目下载到本地</h5><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240122231238972.png" alt="image-20240122231238972"></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240122231306964.png" alt="image-20240122231306964"></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240122231428685.png" alt="image-20240122231428685"></p><h5 id="分支操作（协同开发）"><a href="#分支操作（协同开发）" class="headerlink" title="分支操作（协同开发）"></a>分支操作（协同开发）</h5><p>先生成新分支 <code>dev</code></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240122231943623.png" alt="image-20240122231943623"></p><p>在 <code>dev</code> 分支上对 <code>readme.txt</code> 进行修改，新增内容：444，并加入版本库</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240122232041696.png" alt="image-20240122232041696"></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240122232714941.png" alt="image-20240122232714941"></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240122232335214.png" alt="image-20240122232335214"></p><p>然后切换回 <code>master</code> 分支</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240122232806764.png" alt="image-20240122232806764"></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240122232853151.png" alt="image-20240122232853151"></p><p>将分支 <code>dev</code> 合并到 <code>master</code> 分支</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240122233115092.png" alt="image-20240122233115092"></p><p>删除分支 <code>dev</code></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240122233145632.png" alt="image-20240122233145632"></p><p>此时文件 <code>readme.txt</code> 内容：</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240122233543181.png" alt="image-20240122233543181"></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240122234243745.png" alt="image-20240122234243745"></p><h6 id="分支合并时冲突解决"><a href="#分支合并时冲突解决" class="headerlink" title="分支合并时冲突解决"></a>分支合并时冲突解决</h6><p><strong>分支合并时可能存在冲突，须手动解决</strong></p><p>先创建新分支 <code>dev2</code>，并修改内容，添加：555，并加入版本库</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240122233622752.png" alt="image-20240122233622752"></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240122233859180.png" alt="image-20240122233859180"></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240122234534323.png" alt="image-20240122234534323"></p><p>再切换回 <code>master</code> 分支，并修改文件 <code>readme.txt</code> 内容，添加：666，同时加入版本库</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240122233940367.png" alt="image-20240122233940367"></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240122234033508.png" alt="image-20240122234033508"></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240122235836067.png" alt="image-20240122235836067"></p><p>接下来执行分支合并操作</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240122235036146.png" alt="image-20240122235036146"></p><p>这里按照自己的意愿修改即可，比如说，我规定顺序为先666，再555</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240122235135787.png" alt="image-20240122235135787"></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240122235420825.png" alt="image-20240122235420825"></p><p>然后将本地修改上传到云端</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240122235521152.png" alt="image-20240122235521152"></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240122235536856.png" alt="image-20240122235536856"></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240122235652322.png" alt="image-20240122235652322"></p><h6 id="设置本地分支对应云端远程仓库分支"><a href="#设置本地分支对应云端远程仓库分支" class="headerlink" title="设置本地分支对应云端远程仓库分支"></a>设置本地分支对应云端远程仓库分支</h6><p>先创建新分支 <code>dev3</code>，并修改 <code>readme.txt</code>，添加内容：777，并加入版本库</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240123000706372.png" alt="image-20240123000706372"></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240123000538582.png"></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240123000744434.png" alt="image-20240123000744434"></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240123000841357.png" alt="image-20240123000841357"></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240123000858694.png" alt="image-20240123000858694"></p><h6 id="将云端分支拉取到本地分支"><a href="#将云端分支拉取到本地分支" class="headerlink" title="将云端分支拉取到本地分支"></a>将云端分支拉取到本地分支</h6><p>先删除分支 <code>dev3</code></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240123002305336.png" alt="image-20240123002305336"></p><p>这次直接在云端修改文件 <code>readme.txt</code>（云端dev3分支修改）</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240123001314933.png" alt="image-20240123001314933"></p><p>取消勾选<code>启动新的合并请求</code></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240123001511822.png" alt="image-20240123001511822"></p><p>创建本地分支 <code>dev3</code></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240123002401106.png" alt="image-20240123002401106"></p><p>将本地分支 <code>dev3</code> 与云端分支 <code>dev3</code> 绑定，并拉取内容</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240123002504297.png" alt="image-20240123002504297"></p><p>或者直接将远程仓库的 <code>branch_name</code> 分支与本地仓库的当前分支合并：<code>git pull origin branch_name</code> 这里不细说</p><h6 id="git-stash"><a href="#git-stash" class="headerlink" title="git stash"></a>git stash</h6><p><code>Git stash</code> 命令主要作用：保存当前工作目录的临时状态，包括工作区和暂存区的未提交更改。</p><p>这个功能允许开发者创建一个临时的快照或备份，这样在执行其他操作时（如切换分支、修复bug），就可以返回到一个干净且中间状态的工作目录。一旦完成了这些操作，开发者可以通过 <code>git stash apply</code>命令来恢复这个快照，从而恢复到之前的临时状态。</p><ul><li>基本用法：执行 <code>git stash</code> 命令去创建一个新的 <code>stash</code>，并将其存储在堆栈中。此时，工作目录会被重置到一个干净的初始状态。</li><li>应用场景：<ul><li>当遇到紧急bug修复时，可以在不影响主要开发路径的情况下，通过 <code>git stash</code> 保存当前的开发进度，然后切换到另一个分支进行修复，之后再使用 <code>git stash pop</code> 将改动还原回原来的分支。</li><li>如果不小心在错误的地方（如master分支）提交了代码，可以使用<code>git stash</code>保存当前状态，然后切换回正确的分支，之后使用 <code>git stash apply</code> 恢复丢失的文件和改动。</li></ul></li></ul><p>创建文件 <code>test.cpp</code>，内容如下：</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240123205008909.png" alt="image-20240123205008909"></p><p>并将文件 <code>test.cpp</code> 持久化（放入版本库）</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240123232153387.png" alt="image-20240123232153387"></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240123205718267.png" alt="image-20240123205718267"></p><p>创建并切换到 <code>Dev</code> 分支</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240123230349522.png" alt="image-20240123230349522"></p><p>对文件 <code>test.cpp</code> 进行修改，修改内容如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> a, b;</span><br><span class="line">    cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    cout &lt;&lt; a + b &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假设刚添加完 <code>cin &gt;&gt; a &gt;&gt; b;</code> 出现了<strong>紧急bug</strong></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240123232341166.png" alt="image-20240123232341166"></p><p>执行 <code>git stash</code></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240123233056800.png" alt="image-20240123233056800"></p><p>创建并切换至 <code>Method</code> 分支，解决Bug</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240123233315231.png" alt="image-20240123233315231"></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240123233628776.png" alt="image-20240123233628776"></p><p>切换回 <code>Dev</code> 分支，并恢复之前环境，完成文档 <code>test.cpp</code> 的编写。</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240123233848717.png" alt="image-20240123233848717"></p><h2 id="thrift"><a href="#thrift" class="headerlink" title="thrift"></a>thrift</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><p><a href="https://thrift.apache.org/">thrift官网</a></p><p>也称 <code>RPC</code> 框架（远程过程调用，remote procedure call）</p><p>允许开发者使用统一的接口定义语言（IDL）来描述数据类型和服务接口，然后自动生成多种编程语言的客户端和服务器代码，从而简化了不同语言之间的服务交互。</p><p>主要特点：</p><ul><li><strong>跨语言支持：</strong>Thrift 支持多种编程语言</li><li><strong>高效的数据序列化：</strong>Thrift 使用高效的二进制协议进行数据序列化，比 XML 和 JSON 等文本协议更快速且更节省带宽</li><li><strong>强大的类型系统：</strong>Thrift 支持复杂的数据类型定义，包括结构体、枚举、联合、映射和列表等，方便开发人员描述数据模型。</li><li><strong>易于扩展：</strong>Thrift 允许用户自定义数据类型和服务接口，方便扩展和定制化</li></ul><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240127110146450.png" alt="image-20240127110146450"></p><p><code>thrift即为上图中不同服务之间的有向边</code>（上述不同服务可以在同一台服务器上）</p><p>上图不同结点对应各自一个进程，不同的进程可以拿完全不同的语言实现（<strong>这次项目游戏端采用Python3实现，服务器端采用C++实现，数据存储部分采用事先实现好的服务</strong>）</p><ol><li>定义接口</li><li>Server</li><li>Client</li></ol><h3 id="实战-1"><a href="#实战-1" class="headerlink" title="实战"></a>实战</h3><h4 id="生成仓库"><a href="#生成仓库" class="headerlink" title="生成仓库"></a>生成仓库</h4><p>首先是本地</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240127111619866.png" alt="image-20240127111619866"></p><p>然后是远端仓库（略）</p><p>再建立连接</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240127111945215.png" alt="image-20240127111945215"></p><h4 id="设计分析"><a href="#设计分析" class="headerlink" title="设计分析"></a>设计分析</h4><p>游戏端和匹配服务端均实现在 <code>AC Terminal</code>，数据存储端实现在 <code>Myserver（端口：9090）</code></p><p>游戏结点需要实现 <code>match_client</code></p><p>匹配结点需要实现 <code>match-server</code>、<code>save_client</code></p><p>为了方便，这里用两个不同的文件夹分别表示游戏结点和匹配结点</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240127113127584.png" alt="image-20240127113127584"></p><p><code>match_system</code> 表示匹配端</p><p><code>game</code> 表示游戏端</p><p><code>thrift</code> 用于存储所有接口</p><h5 id="定义接口"><a href="#定义接口" class="headerlink" title="定义接口"></a>定义接口</h5><p><code>先定义一个添加玩家、删除玩家的接口</code></p><p>查看官方文档（thrift.apache.org&#x2F;tutotial&#x2F;tutorial.thrift)，对照类型说明设计如下内容</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240127212629190.png" alt="image-20240127212629190"></p><h5 id="实现match的服务端"><a href="#实现match的服务端" class="headerlink" title="实现match的服务端"></a>实现match的服务端</h5><p>官网 –&gt; C++ Tutorial</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240127214031249.png" alt="image-20240127214031249"></p><p>修改 <code>main.cpp</code>，修改前：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// This autogenerated skeleton file illustrates how to build a server.                     </span></span><br><span class="line"><span class="comment">// You should copy it to another filename to avoid overwriting it.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Match.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thrift/protocol/TBinaryProtocol.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thrift/server/TSimpleServer.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thrift/transport/TServerSocket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thrift/transport/TBufferTransports.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> ::apache::thrift;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> ::apache::thrift::protocol;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> ::apache::thrift::transport;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> ::apache::thrift::server;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span>  ::match_service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MatchHandler</span> : <span class="keyword">virtual</span> <span class="keyword">public</span> MatchIf &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">MatchHandler</span>() &#123;</span><br><span class="line">    <span class="comment">// Your initialization goes here</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">int32_t</span> <span class="title">add_user</span><span class="params">(<span class="type">const</span> User&amp; user, <span class="type">const</span> std::string&amp; info)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Your implementation goes here</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;add_user\n&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="type">int32_t</span> <span class="title">remove_user</span><span class="params">(<span class="type">const</span> User&amp; user, <span class="type">const</span> std::string&amp; info)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Your implementation goes here</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;remove_user\n&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> port = <span class="number">9090</span>;</span><br><span class="line">  ::<span class="function">std::shared_ptr&lt;MatchHandler&gt; <span class="title">handler</span><span class="params">(<span class="keyword">new</span> MatchHandler())</span></span>;</span><br><span class="line">  ::<span class="function">std::shared_ptr&lt;TProcessor&gt; <span class="title">processor</span><span class="params">(<span class="keyword">new</span> MatchProcessor(handler))</span></span>;</span><br><span class="line">  ::<span class="function">std::shared_ptr&lt;TServerTransport&gt; <span class="title">serverTransport</span><span class="params">(<span class="keyword">new</span> TServerSocket(port))</span></span>;</span><br><span class="line">  ::<span class="function">std::shared_ptr&lt;TTransportFactory&gt; <span class="title">transportFactory</span><span class="params">(<span class="keyword">new</span> TBufferedTransportFactory())</span></span>;</span><br><span class="line">  ::<span class="function">std::shared_ptr&lt;TProtocolFactory&gt; <span class="title">protocolFactory</span><span class="params">(<span class="keyword">new</span> TBinaryProtocolFactory())</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">TSimpleServer <span class="title">server</span><span class="params">(processor, serverTransport, transportFactory, protocolFactory)</span></span>;</span><br><span class="line">  server.<span class="built_in">serve</span>();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先在 <code>add_user</code> 和 <code>remove_user</code> 中添加 <code>return 0</code>，确保编译通过，再逐步往里面添加模块</p><ol><li><p>编译：<code>g++ -c 加上欲编译的文件</code></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240127215247501.png" alt="image-20240127215247501"></p><p>由于先前将文件移动，这里需要修改一下头文件的路径</p></li><li><p>链接：将编译得到的 <code>.o文件</code> 链接，<code>g++ *.o -o main</code>，由于用到thrift动态链接库，需要加上 <code>-lthrift</code></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240127215456868.png" alt="image-20240127215456868"></p></li></ol><p>现在运行无任何输出，所以修改一下<code>main.cpp</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注意前面加上 #include &lt;iostream&gt; 和 using namespace std;</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> port = <span class="number">9090</span>;</span><br><span class="line">    ::<span class="function">std::shared_ptr&lt;MatchHandler&gt; <span class="title">handler</span><span class="params">(<span class="keyword">new</span> MatchHandler())</span></span>;</span><br><span class="line">    ::<span class="function">std::shared_ptr&lt;TProcessor&gt; <span class="title">processor</span><span class="params">(<span class="keyword">new</span> MatchProcessor(handler))</span></span>;</span><br><span class="line">    ::<span class="function">std::shared_ptr&lt;TServerTransport&gt; <span class="title">serverTransport</span><span class="params">(<span class="keyword">new</span> TServerSocket(port))</span></span>;                                                                                                                                  </span><br><span class="line">    ::<span class="function">std::shared_ptr&lt;TTransportFactory&gt; <span class="title">transportFactory</span><span class="params">(<span class="keyword">new</span> TBufferedTransportFactory())</span></span>;</span><br><span class="line">    ::<span class="function">std::shared_ptr&lt;TProtocolFactory&gt; <span class="title">protocolFactory</span><span class="params">(<span class="keyword">new</span> TBinaryProtocolFactory())</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">TSimpleServer <span class="title">server</span><span class="params">(processor, serverTransport, transportFactory, protocolFactory)</span></span>;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Start Match Server&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    server.<span class="built_in">serve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后重新编译链接（只编译修改的文件即可）</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240127220012780.png" alt="image-20240127220012780"></p><p>然后上传一下代码，最好只上传源文件和头文件</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240127220354701.png" alt="image-20240127220354701"></p><h5 id="实现match的客户端"><a href="#实现match的客户端" class="headerlink" title="实现match的客户端"></a>实现match的客户端</h5><p>与服务端相同，这里生成python代码</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240127221051227.png" alt="image-20240127221051227"></p><p>可执行文件 <code>Match-remote</code> 可删可不删，这里选择删掉</p><p>然后将官网中python-client示例文件复制过来：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> glob</span><br><span class="line">sys.path.append(<span class="string">&#x27;gen-py&#x27;</span>)</span><br><span class="line">sys.path.insert(<span class="number">0</span>, glob.glob(<span class="string">&#x27;../../lib/py/build/lib*&#x27;</span>)[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> tutorial <span class="keyword">import</span> Calculator</span><br><span class="line"><span class="keyword">from</span> tutorial.ttypes <span class="keyword">import</span> InvalidOperation, Operation, Work</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> thrift <span class="keyword">import</span> Thrift</span><br><span class="line"><span class="keyword">from</span> thrift.transport <span class="keyword">import</span> TSocket</span><br><span class="line"><span class="keyword">from</span> thrift.transport <span class="keyword">import</span> TTransport</span><br><span class="line"><span class="keyword">from</span> thrift.protocol <span class="keyword">import</span> TBinaryProtocol</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># Make socket</span></span><br><span class="line">    transport = TSocket.TSocket(<span class="string">&#x27;localhost&#x27;</span>, <span class="number">9090</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Buffering is critical. Raw sockets are very slow</span></span><br><span class="line">    transport = TTransport.TBufferedTransport(transport)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Wrap in a protocol</span></span><br><span class="line">    protocol = TBinaryProtocol.TBinaryProtocol(transport)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Create a client to use the protocol encoder</span></span><br><span class="line">    client = Calculator.Client(protocol)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Connect!</span></span><br><span class="line">    transport.<span class="built_in">open</span>()</span><br><span class="line"></span><br><span class="line">    client.ping()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;ping()&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    sum_ = client.add(<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;1+1=%d&#x27;</span> % sum_)</span><br><span class="line"></span><br><span class="line">    work = Work()</span><br><span class="line"></span><br><span class="line">    work.op = Operation.DIVIDE</span><br><span class="line">    work.num1 = <span class="number">1</span></span><br><span class="line">    work.num2 = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        quotient = client.calculate(<span class="number">1</span>, work)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Whoa? You know how to divide by zero?&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;FYI the answer is %d&#x27;</span> % quotient)</span><br><span class="line">    <span class="keyword">except</span> InvalidOperation <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;InvalidOperation: %r&#x27;</span> % e)</span><br><span class="line"></span><br><span class="line">    work.op = Operation.SUBTRACT</span><br><span class="line">    work.num1 = <span class="number">15</span></span><br><span class="line">    work.num2 = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">    diff = client.calculate(<span class="number">1</span>, work)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;15-10=%d&#x27;</span> % diff)</span><br><span class="line"></span><br><span class="line">    log = client.getStruct(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Check log: %s&#x27;</span> % log.value)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Close!</span></span><br><span class="line">    transport.close()</span><br></pre></td></tr></table></figure><p>修改后：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> match_client.<span class="keyword">match</span> <span class="keyword">import</span> Match</span><br><span class="line"><span class="keyword">from</span> match_client.<span class="keyword">match</span>.ttypes <span class="keyword">import</span> User</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> thrift <span class="keyword">import</span> Thrift</span><br><span class="line"><span class="keyword">from</span> thrift.transport <span class="keyword">import</span> TSocket</span><br><span class="line"><span class="keyword">from</span> thrift.transport <span class="keyword">import</span> TTransport</span><br><span class="line"><span class="keyword">from</span> thrift.protocol <span class="keyword">import</span> TBinaryProtocol</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># Make socket</span></span><br><span class="line">    transport = TSocket.TSocket(<span class="string">&#x27;localhost&#x27;</span>, <span class="number">9090</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Buffering is critical. Raw sockets are very slow</span></span><br><span class="line">    transport = TTransport.TBufferedTransport(transport)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Wrap in a protocol</span></span><br><span class="line">    protocol = TBinaryProtocol.TBinaryProtocol(transport)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Create a client to use the protocol encoder</span></span><br><span class="line">    client = Match.Client(protocol)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Connect!</span></span><br><span class="line">    transport.<span class="built_in">open</span>()</span><br><span class="line"></span><br><span class="line">    user = User(<span class="number">1</span>, <span class="string">&#x27;lx&#x27;</span>, <span class="number">1500</span>)</span><br><span class="line">    client.add_user(user, <span class="string">&quot;&quot;</span>) </span><br><span class="line"></span><br><span class="line">    <span class="comment"># Close!</span></span><br><span class="line">    transport.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()        </span><br></pre></td></tr></table></figure><p>运行一下：</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240127223438199.png" alt="image-20240127223438199"></p><p>报错，由于服务端未开，打开后重新运行</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240127223554196.png" alt="image-20240127223554196"></p><p>这里同样上传一下版本</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240127224156896.png" alt="image-20240127224156896"></p><p>这里只上传 <code>.py文件</code></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240127224223166.png" alt="image-20240127224223166"></p><p>暂时的客户端新增用户属于”写死状态”，这里进行修改，使其灵活添加、删除用户</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> match_client.<span class="keyword">match</span> <span class="keyword">import</span> Match</span><br><span class="line"><span class="keyword">from</span> match_client.<span class="keyword">match</span>.ttypes <span class="keyword">import</span> User</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> thrift <span class="keyword">import</span> Thrift</span><br><span class="line"><span class="keyword">from</span> thrift.transport <span class="keyword">import</span> TSocket</span><br><span class="line"><span class="keyword">from</span> thrift.transport <span class="keyword">import</span> TTransport</span><br><span class="line"><span class="keyword">from</span> thrift.protocol <span class="keyword">import</span> TBinaryProtocol</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> stdin</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">operate</span>(<span class="params">op, user_id, username, score</span>):</span><br><span class="line">    <span class="comment"># Make socket</span></span><br><span class="line">    transport = TSocket.TSocket(<span class="string">&#x27;localhost&#x27;</span>, <span class="number">9090</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Buffering is critical. Raw sockets are very slow</span></span><br><span class="line">    transport = TTransport.TBufferedTransport(transport)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Wrap in a protocol</span></span><br><span class="line">    protocol = TBinaryProtocol.TBinaryProtocol(transport)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Create a client to use the protocol encoder</span></span><br><span class="line">    client = Match.Client(protocol)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Connect!</span></span><br><span class="line">    transport.<span class="built_in">open</span>()</span><br><span class="line"></span><br><span class="line">    user = User(user_id, username, score)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> op == <span class="string">&quot;add&quot;</span>:</span><br><span class="line">        client.add_user(user, <span class="string">&quot;&quot;</span>) </span><br><span class="line">    <span class="keyword">elif</span> op == <span class="string">&quot;remove&quot;</span>:</span><br><span class="line">        client.remove_user(user,<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Close!</span></span><br><span class="line">    transport.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> stdin:</span><br><span class="line">        op, user_id, username, score = line.split(<span class="string">&#x27; &#x27;</span>)              </span><br><span class="line">        operate(op, <span class="built_in">int</span>(user_id), username, <span class="built_in">int</span>(score))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>上述代码中，<code>localhost</code> 改成本地，即<code>127.0.0.1</code></p><p>运行结果如下：</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240127225425706.png" alt="image-20240127225425706"></p><p>同样这里上传云端仓库</p><h4 id="Version-2-0"><a href="#Version-2-0" class="headerlink" title="Version 2.0"></a>Version 2.0</h4><p>首先观察业务模型</p><p>需要一个进程将添加的用户加入系统或者将删除的用户移除系统，同时还需要一个进程不断地进行匹配</p><p>因此需要并行</p><p>对 <code>main.cpp</code> 进行修改</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// This autogenerated skeleton file illustrates how to build a server.</span></span><br><span class="line"><span class="comment">// You should copy it to another filename to avoid overwriting it.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;match_server/Match.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thrift/protocol/TBinaryProtocol.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thrift/server/TSimpleServer.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thrift/transport/TServerSocket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thrift/transport/TBufferTransports.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;condition_variable&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> ::apache::thrift;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> ::apache::thrift::protocol;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> ::apache::thrift::transport;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> ::apache::thrift::server;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span>  ::match_service;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Task</span></span><br><span class="line">&#123;</span><br><span class="line">    User user;</span><br><span class="line">    string type;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">MessageQueue</span></span><br><span class="line">&#123;</span><br><span class="line">    queue&lt;Task&gt; q;</span><br><span class="line">    mutex m;</span><br><span class="line">    condition_variable cv;</span><br><span class="line">&#125;message_queue;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Pool</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">save_result</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Match Result: %d %d\n&quot;</span>, a, b);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">match</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">while</span> (users.<span class="built_in">size</span>() &gt;<span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">auto</span> a = users[<span class="number">0</span>], b = users[<span class="number">1</span>];</span><br><span class="line">                users.<span class="built_in">erase</span>(users.<span class="built_in">begin</span>());</span><br><span class="line">                users.<span class="built_in">erase</span>(users.<span class="built_in">begin</span>());</span><br><span class="line"></span><br><span class="line">                <span class="built_in">save_result</span>(a.id, b.id);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(User user)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            users.<span class="built_in">push_back</span>(user);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">remove</span><span class="params">(User user)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">uint32_t</span> i = <span class="number">0</span>; i &lt; users.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">                <span class="keyword">if</span> (users[i].id == user.id)</span><br><span class="line">                &#123;</span><br><span class="line">                    users.<span class="built_in">erase</span>(users.<span class="built_in">begin</span>() + <span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        vector&lt;User&gt; users;</span><br><span class="line">&#125;pool;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MatchHandler</span> : <span class="keyword">virtual</span> <span class="keyword">public</span> MatchIf &#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">MatchHandler</span>() &#123;</span><br><span class="line">            <span class="comment">// Your initialization goes here</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">int32_t</span> <span class="title">add_user</span><span class="params">(<span class="type">const</span> User&amp; user, <span class="type">const</span> std::string&amp; info)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// Your implementation goes here</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;add_user\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="function">unique_lock&lt;mutex&gt; <span class="title">lck</span><span class="params">(message_queue.m)</span></span>;</span><br><span class="line">            message_queue.q.<span class="built_in">push</span>(&#123;user, <span class="string">&quot;add&quot;</span>&#125;);</span><br><span class="line">            message_queue.cv.<span class="built_in">notify_all</span>();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">int32_t</span> <span class="title">remove_user</span><span class="params">(<span class="type">const</span> User&amp; user, <span class="type">const</span> std::string&amp; info)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// Your implementation goes here</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;remove_user\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="function">unique_lock&lt;mutex&gt; <span class="title">lck</span><span class="params">(message_queue.m)</span></span>;</span><br><span class="line">            message_queue.q.<span class="built_in">push</span>(&#123;user, <span class="string">&quot;remove&quot;</span>&#125;);</span><br><span class="line">            message_queue.cv.<span class="built_in">notify_all</span>();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">consume_task</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">unique_lock&lt;mutex&gt; <span class="title">lck</span><span class="params">(message_queue.m)</span></span>;</span><br><span class="line">        <span class="keyword">if</span> (message_queue.q.<span class="built_in">empty</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            message_queue.cv.<span class="built_in">wait</span>(lck);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">auto</span> task = message_queue.q.<span class="built_in">front</span>();</span><br><span class="line">            message_queue.q.<span class="built_in">pop</span>();</span><br><span class="line">            lck.<span class="built_in">unlock</span>();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (task.type == <span class="string">&quot;add&quot;</span>) pool.<span class="built_in">add</span>(task.user);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (task.type == <span class="string">&quot;remove&quot;</span>) pool.<span class="built_in">remove</span>(task.user);</span><br><span class="line"></span><br><span class="line">            pool.<span class="built_in">match</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> port = <span class="number">9090</span>;</span><br><span class="line">    ::<span class="function">std::shared_ptr&lt;MatchHandler&gt; <span class="title">handler</span><span class="params">(<span class="keyword">new</span> MatchHandler())</span></span>;</span><br><span class="line">    ::<span class="function">std::shared_ptr&lt;TProcessor&gt; <span class="title">processor</span><span class="params">(<span class="keyword">new</span> MatchProcessor(handler))</span></span>;</span><br><span class="line">    ::<span class="function">std::shared_ptr&lt;TServerTransport&gt; <span class="title">serverTransport</span><span class="params">(<span class="keyword">new</span> TServerSocket(port))</span></span>;</span><br><span class="line">    ::<span class="function">std::shared_ptr&lt;TTransportFactory&gt; <span class="title">transportFactory</span><span class="params">(<span class="keyword">new</span> TBufferedTransportFactory())</span></span>;</span><br><span class="line">    ::<span class="function">std::shared_ptr&lt;TProtocolFactory&gt; <span class="title">protocolFactory</span><span class="params">(<span class="keyword">new</span> TBinaryProtocolFactory())</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">TSimpleServer <span class="title">server</span><span class="params">(processor, serverTransport, transportFactory, protocolFactory)</span></span>;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Start Match Server&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="function">thread <span class="title">matching_thread</span><span class="params">(consume_task)</span></span>;</span><br><span class="line"></span><br><span class="line">    server.<span class="built_in">serve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重新编译链接运行：</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240127234523028.png" alt="image-20240127234523028"></p><p>同样上传云端，并标记为：<code>match-server version:2.0</code></p><h4 id="implement-save-client"><a href="#implement-save-client" class="headerlink" title="implement save-client"></a>implement save-client</h4><p>实现数据存储，服务端采用事先实现好的接口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">namespace cpp save_service</span><br><span class="line"></span><br><span class="line">service Save &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * username: myserver的名称</span><br><span class="line">     * password: myserver的密码的md5sum的前8位</span><br><span class="line">     * 用户名密码验证成功会返回0，验证失败会返回1</span><br><span class="line">     * 验证成功后，结果会被保存到myserver:homework/lesson_6/result.txt中</span><br><span class="line">     */</span><br><span class="line">    i32 save_data(1: string username, 2: string password, 3: i32 player1_id, 4: i32 player2_id)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240128210533108.png" alt="image-20240128210533108"></p><p>（求解密码的 <strong>md5sum</strong> 值：输入md5sum回车，再输入密码回车后加 Ctrl + D）</p><p>然后将客户端实现成cpp</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240128211453723.png" alt="image-20240128211453723"></p><p>查看 <code>save_client</code> 内容，存在一个服务端样例 <code>Save_server.skeleton.cpp</code>，这里不需要服务端，所以删除，否则代码会出现两个main函数</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240128211748674.png" alt="image-20240128211748674"></p><p>然后将服务端代码（Save_client端代码）写入项目里：对照官网中 c++——client 示例文件，缺少什么加什么到 <code>main.cpp</code>里面，还有头文件 <code>save.h（注意路径）</code> 以及 <code>save.client</code> 的命名空间</p><p>官网实例代码如下：（<code>将main函数内容放入main.cpp的Pool的save_result中,再根据项目修改</code>）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thrift/protocol/TBinaryProtocol.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thrift/transport/TSocket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thrift/transport/TTransportUtils.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;../gen-cpp/Calculator.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> apache::thrift;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> apache::thrift::protocol;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> apache::thrift::transport;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> tutorial;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> shared;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="function">std::shared_ptr&lt;TTransport&gt; <span class="title">socket</span><span class="params">(<span class="keyword">new</span> TSocket(<span class="string">&quot;localhost&quot;</span>, <span class="number">9090</span>))</span></span>;</span><br><span class="line">  <span class="function">std::shared_ptr&lt;TTransport&gt; <span class="title">transport</span><span class="params">(<span class="keyword">new</span> TBufferedTransport(socket))</span></span>;</span><br><span class="line">  <span class="function">std::shared_ptr&lt;TProtocol&gt; <span class="title">protocol</span><span class="params">(<span class="keyword">new</span> TBinaryProtocol(transport))</span></span>;</span><br><span class="line">  <span class="function">CalculatorClient <span class="title">client</span><span class="params">(protocol)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    transport-&gt;<span class="built_in">open</span>();</span><br><span class="line"></span><br><span class="line">    client.<span class="built_in">ping</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;ping()&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;1 + 1 = &quot;</span> &lt;&lt; client.<span class="built_in">add</span>(<span class="number">1</span>, <span class="number">1</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    Work work;</span><br><span class="line">    work.op = Operation::DIVIDE;</span><br><span class="line">    work.num1 = <span class="number">1</span>;</span><br><span class="line">    work.num2 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      client.<span class="built_in">calculate</span>(<span class="number">1</span>, work);</span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;Whoa? We can divide by zero!&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125; <span class="built_in">catch</span> (InvalidOperation&amp; io) &#123;</span><br><span class="line">      cout &lt;&lt; <span class="string">&quot;InvalidOperation: &quot;</span> &lt;&lt; io.why &lt;&lt; endl;</span><br><span class="line">      <span class="comment">// or using generated operator&lt;&lt;: cout &lt;&lt; io &lt;&lt; endl;</span></span><br><span class="line">      <span class="comment">// or by using std::exception native method what(): cout &lt;&lt; io.what() &lt;&lt; endl;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    work.op = Operation::SUBTRACT;</span><br><span class="line">    work.num1 = <span class="number">15</span>;</span><br><span class="line">    work.num2 = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int32_t</span> diff = client.<span class="built_in">calculate</span>(<span class="number">1</span>, work);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;15 - 10 = &quot;</span> &lt;&lt; diff &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Note that C++ uses return by reference for complex types to avoid</span></span><br><span class="line">    <span class="comment">// costly copy construction</span></span><br><span class="line">    SharedStruct ss;</span><br><span class="line">    client.<span class="built_in">getStruct</span>(ss, <span class="number">1</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Received log: &quot;</span> &lt;&lt; ss &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    transport-&gt;<span class="built_in">close</span>();</span><br><span class="line">  &#125; <span class="built_in">catch</span> (TException&amp; tx) &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;ERROR: &quot;</span> &lt;&lt; tx.<span class="built_in">what</span>() &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的 <code>localhost</code> 改成 Myserver服务器的ip地址：<code>123.57.67.128</code></p><p>完善后的 <code>main.cpp</code>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// This autogenerated skeleton file illustrates how to build a server.</span></span><br><span class="line"><span class="comment">// You should copy it to another filename to avoid overwriting it.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;match_server/Match.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;save_client/Save.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thrift/protocol/TBinaryProtocol.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thrift/server/TSimpleServer.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thrift/transport/TServerSocket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thrift/transport/TBufferTransports.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thrift/transport/TSocket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thrift/transport/TTransportUtils.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;condition_variable&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> ::apache::thrift;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> ::apache::thrift::protocol;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> ::apache::thrift::transport;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> ::apache::thrift::server;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span>  ::match_service;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span>  ::save_service;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Task</span></span><br><span class="line">&#123;</span><br><span class="line">    User user;</span><br><span class="line">    string type;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">MessageQueue</span></span><br><span class="line">&#123;</span><br><span class="line">    queue&lt;Task&gt; q;</span><br><span class="line">    mutex m;</span><br><span class="line">    condition_variable cv;</span><br><span class="line">&#125;message_queue;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Pool</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">save_result</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Match Result: %d %d\n&quot;</span>, a, b);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="function">std::shared_ptr&lt;TTransport&gt; <span class="title">socket</span><span class="params">(<span class="keyword">new</span> TSocket(<span class="string">&quot;123.57.67.128&quot;</span>, <span class="number">9090</span>))</span></span>;</span><br><span class="line">            <span class="function">std::shared_ptr&lt;TTransport&gt; <span class="title">transport</span><span class="params">(<span class="keyword">new</span> TBufferedTransport(socket))</span></span>;</span><br><span class="line">            <span class="function">std::shared_ptr&lt;TProtocol&gt; <span class="title">protocol</span><span class="params">(<span class="keyword">new</span> TBinaryProtocol(transport))</span></span>;</span><br><span class="line">            <span class="function">SaveClient <span class="title">client</span><span class="params">(protocol)</span></span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                transport-&gt;<span class="built_in">open</span>();</span><br><span class="line"></span><br><span class="line">                client.<span class="built_in">save_data</span>(<span class="string">&quot;acs_11870&quot;</span>, <span class="string">&quot;fdbee89b&quot;</span>, a, b);</span><br><span class="line"></span><br><span class="line">                transport-&gt;<span class="built_in">close</span>();</span><br><span class="line">            &#125; <span class="built_in">catch</span> (TException&amp; tx) &#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;ERROR: &quot;</span> &lt;&lt; tx.<span class="built_in">what</span>() &lt;&lt; endl;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">match</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">while</span> (users.<span class="built_in">size</span>() &gt;<span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">auto</span> a = users[<span class="number">0</span>], b = users[<span class="number">1</span>];</span><br><span class="line">                users.<span class="built_in">erase</span>(users.<span class="built_in">begin</span>());</span><br><span class="line">                users.<span class="built_in">erase</span>(users.<span class="built_in">begin</span>());</span><br><span class="line"></span><br><span class="line">                <span class="built_in">save_result</span>(a.id, b.id);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(User user)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            users.<span class="built_in">push_back</span>(user);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">remove</span><span class="params">(User user)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">uint32_t</span> i = <span class="number">0</span>; i &lt; users.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">                <span class="keyword">if</span> (users[i].id == user.id)</span><br><span class="line">                &#123;</span><br><span class="line">                    users.<span class="built_in">erase</span>(users.<span class="built_in">begin</span>() + <span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        vector&lt;User&gt; users;</span><br><span class="line">&#125;pool;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MatchHandler</span> : <span class="keyword">virtual</span> <span class="keyword">public</span> MatchIf &#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">MatchHandler</span>() &#123;</span><br><span class="line">            <span class="comment">// Your initialization goes here</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">int32_t</span> <span class="title">add_user</span><span class="params">(<span class="type">const</span> User&amp; user, <span class="type">const</span> std::string&amp; info)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// Your implementation goes here</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;add_user\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="function">unique_lock&lt;mutex&gt; <span class="title">lck</span><span class="params">(message_queue.m)</span></span>;</span><br><span class="line">            message_queue.q.<span class="built_in">push</span>(&#123;user, <span class="string">&quot;add&quot;</span>&#125;);</span><br><span class="line">            message_queue.cv.<span class="built_in">notify_all</span>();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">int32_t</span> <span class="title">remove_user</span><span class="params">(<span class="type">const</span> User&amp; user, <span class="type">const</span> std::string&amp; info)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// Your implementation goes here</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;remove_user\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="function">unique_lock&lt;mutex&gt; <span class="title">lck</span><span class="params">(message_queue.m)</span></span>;</span><br><span class="line">            message_queue.q.<span class="built_in">push</span>(&#123;user, <span class="string">&quot;remove&quot;</span>&#125;);</span><br><span class="line">            message_queue.cv.<span class="built_in">notify_all</span>();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">consume_task</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">unique_lock&lt;mutex&gt; <span class="title">lck</span><span class="params">(message_queue.m)</span></span>;</span><br><span class="line">        <span class="keyword">if</span> (message_queue.q.<span class="built_in">empty</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            message_queue.cv.<span class="built_in">wait</span>(lck);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">auto</span> task = message_queue.q.<span class="built_in">front</span>();</span><br><span class="line">            message_queue.q.<span class="built_in">pop</span>();</span><br><span class="line">            lck.<span class="built_in">unlock</span>();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (task.type == <span class="string">&quot;add&quot;</span>) pool.<span class="built_in">add</span>(task.user);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (task.type == <span class="string">&quot;remove&quot;</span>) pool.<span class="built_in">remove</span>(task.user);</span><br><span class="line"></span><br><span class="line">            pool.<span class="built_in">match</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> port = <span class="number">9090</span>;</span><br><span class="line">    ::<span class="function">std::shared_ptr&lt;MatchHandler&gt; <span class="title">handler</span><span class="params">(<span class="keyword">new</span> MatchHandler())</span></span>;</span><br><span class="line">    ::<span class="function">std::shared_ptr&lt;TProcessor&gt; <span class="title">processor</span><span class="params">(<span class="keyword">new</span> MatchProcessor(handler))</span></span>;</span><br><span class="line">    ::<span class="function">std::shared_ptr&lt;TServerTransport&gt; <span class="title">serverTransport</span><span class="params">(<span class="keyword">new</span> TServerSocket(port))</span></span>;</span><br><span class="line">    ::<span class="function">std::shared_ptr&lt;TTransportFactory&gt; <span class="title">transportFactory</span><span class="params">(<span class="keyword">new</span> TBufferedTransportFactory())</span></span>;</span><br><span class="line">    ::<span class="function">std::shared_ptr&lt;TProtocolFactory&gt; <span class="title">protocolFactory</span><span class="params">(<span class="keyword">new</span> TBinaryProtocolFactory())</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">TSimpleServer <span class="title">server</span><span class="params">(processor, serverTransport, transportFactory, protocolFactory)</span></span>;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Start Match Server&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="function">thread <span class="title">matching_thread</span><span class="params">(consume_task)</span></span>;</span><br><span class="line"></span><br><span class="line">    server.<span class="built_in">serve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240128220725259.png" alt="image-20240128220725259"></p><p>然后去云端看数据存储结果</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240128220811673.png" alt="image-20240128220811673"></p><p>同样上传云端，并标记为：<code>implement save-client</code></p><h4 id="Version-3-0"><a href="#Version-3-0" class="headerlink" title="Version 3.0"></a>Version 3.0</h4><p>当前匹配系统相对低效（先来先匹配），这里升级一下，按照分值匹配（分差50分以内）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// This autogenerated skeleton file illustrates how to build a server.</span></span><br><span class="line"><span class="comment">// You should copy it to another filename to avoid overwriting it.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;match_server/Match.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;save_client/Save.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thrift/protocol/TBinaryProtocol.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thrift/server/TSimpleServer.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thrift/transport/TServerSocket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thrift/transport/TBufferTransports.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thrift/transport/TSocket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thrift/transport/TTransportUtils.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;condition_variable&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> ::apache::thrift;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> ::apache::thrift::protocol;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> ::apache::thrift::transport;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> ::apache::thrift::server;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span>  ::match_service;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span>  ::save_service;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Task</span></span><br><span class="line">&#123;</span><br><span class="line">    User user;</span><br><span class="line">    string type;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">MessageQueue</span></span><br><span class="line">&#123;</span><br><span class="line">    queue&lt;Task&gt; q;</span><br><span class="line">    mutex m;</span><br><span class="line">    condition_variable cv;</span><br><span class="line">&#125;message_queue;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Pool</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">save_result</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Match Result: %d %d\n&quot;</span>, a, b);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="function">std::shared_ptr&lt;TTransport&gt; <span class="title">socket</span><span class="params">(<span class="keyword">new</span> TSocket(<span class="string">&quot;123.57.67.128&quot;</span>, <span class="number">9090</span>))</span></span>;</span><br><span class="line">            <span class="function">std::shared_ptr&lt;TTransport&gt; <span class="title">transport</span><span class="params">(<span class="keyword">new</span> TBufferedTransport(socket))</span></span>;</span><br><span class="line">            <span class="function">std::shared_ptr&lt;TProtocol&gt; <span class="title">protocol</span><span class="params">(<span class="keyword">new</span> TBinaryProtocol(transport))</span></span>;</span><br><span class="line">            <span class="function">SaveClient <span class="title">client</span><span class="params">(protocol)</span></span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                transport-&gt;<span class="built_in">open</span>();</span><br><span class="line"></span><br><span class="line">                client.<span class="built_in">save_data</span>(<span class="string">&quot;acs_11870&quot;</span>, <span class="string">&quot;fdbee89b&quot;</span>, a, b);</span><br><span class="line"></span><br><span class="line">                transport-&gt;<span class="built_in">close</span>();</span><br><span class="line">            &#125; <span class="built_in">catch</span> (TException&amp; tx) &#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;ERROR: &quot;</span> &lt;&lt; tx.<span class="built_in">what</span>() &lt;&lt; endl;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">match</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">while</span> (users.<span class="built_in">size</span>() &gt;<span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">sort</span>(users.<span class="built_in">begin</span>(), users.<span class="built_in">end</span>(), [&amp;](User &amp;a, User b) &#123;</span><br><span class="line">                    <span class="keyword">return</span> a.score &lt; b.score;</span><br><span class="line">                    &#125;);</span><br><span class="line"></span><br><span class="line">                <span class="type">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">uint32_t</span> i = <span class="number">1</span>; i &lt; users.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">auto</span> a = users[i - <span class="number">1</span>], b = users[i];</span><br><span class="line">                    <span class="keyword">if</span> (b.score - a.score &lt;= <span class="number">50</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        users.<span class="built_in">erase</span>(users.<span class="built_in">begin</span>() + i - <span class="number">1</span>, users.<span class="built_in">begin</span>() + i + <span class="number">1</span>);</span><br><span class="line">                        <span class="built_in">save_result</span>(a.id, b.id);</span><br><span class="line"></span><br><span class="line">                        flag = <span class="literal">false</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (flag) <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(User user)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            users.<span class="built_in">push_back</span>(user);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">remove</span><span class="params">(User user)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">uint32_t</span> i = <span class="number">0</span>; i &lt; users.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">                <span class="keyword">if</span> (users[i].id == user.id)</span><br><span class="line">                &#123;</span><br><span class="line">                    users.<span class="built_in">erase</span>(users.<span class="built_in">begin</span>() + <span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        vector&lt;User&gt; users;</span><br><span class="line">&#125;pool;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MatchHandler</span> : <span class="keyword">virtual</span> <span class="keyword">public</span> MatchIf &#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">MatchHandler</span>() &#123;</span><br><span class="line">            <span class="comment">// Your initialization goes here</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">int32_t</span> <span class="title">add_user</span><span class="params">(<span class="type">const</span> User&amp; user, <span class="type">const</span> std::string&amp; info)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// Your implementation goes here</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;add_user\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="function">unique_lock&lt;mutex&gt; <span class="title">lck</span><span class="params">(message_queue.m)</span></span>;</span><br><span class="line">            message_queue.q.<span class="built_in">push</span>(&#123;user, <span class="string">&quot;add&quot;</span>&#125;);</span><br><span class="line">            message_queue.cv.<span class="built_in">notify_all</span>();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">int32_t</span> <span class="title">remove_user</span><span class="params">(<span class="type">const</span> User&amp; user, <span class="type">const</span> std::string&amp; info)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// Your implementation goes here</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;remove_user\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="function">unique_lock&lt;mutex&gt; <span class="title">lck</span><span class="params">(message_queue.m)</span></span>;</span><br><span class="line">            message_queue.q.<span class="built_in">push</span>(&#123;user, <span class="string">&quot;remove&quot;</span>&#125;);</span><br><span class="line">            message_queue.cv.<span class="built_in">notify_all</span>();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">consume_task</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">unique_lock&lt;mutex&gt; <span class="title">lck</span><span class="params">(message_queue.m)</span></span>;</span><br><span class="line">        <span class="keyword">if</span> (message_queue.q.<span class="built_in">empty</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//message_queue.cv.wait(lck);</span></span><br><span class="line">            lck.<span class="built_in">unlock</span>();</span><br><span class="line">            pool.<span class="built_in">match</span>();</span><br><span class="line">            <span class="built_in">sleep</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">auto</span> task = message_queue.q.<span class="built_in">front</span>();</span><br><span class="line">            message_queue.q.<span class="built_in">pop</span>();</span><br><span class="line">            lck.<span class="built_in">unlock</span>();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (task.type == <span class="string">&quot;add&quot;</span>) pool.<span class="built_in">add</span>(task.user);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (task.type == <span class="string">&quot;remove&quot;</span>) pool.<span class="built_in">remove</span>(task.user);</span><br><span class="line"></span><br><span class="line">            pool.<span class="built_in">match</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> port = <span class="number">9090</span>;</span><br><span class="line">    ::<span class="function">std::shared_ptr&lt;MatchHandler&gt; <span class="title">handler</span><span class="params">(<span class="keyword">new</span> MatchHandler())</span></span>;</span><br><span class="line">    ::<span class="function">std::shared_ptr&lt;TProcessor&gt; <span class="title">processor</span><span class="params">(<span class="keyword">new</span> MatchProcessor(handler))</span></span>;</span><br><span class="line">    ::<span class="function">std::shared_ptr&lt;TServerTransport&gt; <span class="title">serverTransport</span><span class="params">(<span class="keyword">new</span> TServerSocket(port))</span></span>;</span><br><span class="line">    ::<span class="function">std::shared_ptr&lt;TTransportFactory&gt; <span class="title">transportFactory</span><span class="params">(<span class="keyword">new</span> TBufferedTransportFactory())</span></span>;</span><br><span class="line">    ::<span class="function">std::shared_ptr&lt;TProtocolFactory&gt; <span class="title">protocolFactory</span><span class="params">(<span class="keyword">new</span> TBinaryProtocolFactory())</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">TSimpleServer <span class="title">server</span><span class="params">(processor, serverTransport, transportFactory, protocolFactory)</span></span>;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Start Match Server&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="function">thread <span class="title">matching_thread</span><span class="params">(consume_task)</span></span>;</span><br><span class="line"></span><br><span class="line">    server.<span class="built_in">serve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240128230328621.png" alt="image-20240128230328621"></p><h4 id="Version-4-0"><a href="#Version-4-0" class="headerlink" title="Version 4.0"></a>Version 4.0</h4><p>Version 3.0采用单线程实现，这里采用多线程实现进行优化</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// This autogenerated skeleton file illustrates how to build a server.</span></span><br><span class="line"><span class="comment">// You should copy it to another filename to avoid overwriting it.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;match_server/Match.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;save_client/Save.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thrift/concurrency/ThreadManager.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thrift/concurrency/ThreadFactory.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thrift/protocol/TBinaryProtocol.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thrift/server/TSimpleServer.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thrift/server/TThreadedServer.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thrift/transport/TServerSocket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thrift/transport/TBufferTransports.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thrift/transport/TSocket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thrift/transport/TTransportUtils.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thrift/TToString.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;condition_variable&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> ::apache::thrift;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> ::apache::thrift::protocol;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> ::apache::thrift::transport;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> ::apache::thrift::server;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span>  ::match_service;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span>  ::save_service;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Task</span></span><br><span class="line">&#123;</span><br><span class="line">    User user;</span><br><span class="line">    string type;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">MessageQueue</span></span><br><span class="line">&#123;</span><br><span class="line">    queue&lt;Task&gt; q;</span><br><span class="line">    mutex m;</span><br><span class="line">    condition_variable cv;</span><br><span class="line">&#125;message_queue;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Pool</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">save_result</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Match Result: %d %d\n&quot;</span>, a, b);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="function">std::shared_ptr&lt;TTransport&gt; <span class="title">socket</span><span class="params">(<span class="keyword">new</span> TSocket(<span class="string">&quot;123.57.67.128&quot;</span>, <span class="number">9090</span>))</span></span>;</span><br><span class="line">            <span class="function">std::shared_ptr&lt;TTransport&gt; <span class="title">transport</span><span class="params">(<span class="keyword">new</span> TBufferedTransport(socket))</span></span>;</span><br><span class="line">            <span class="function">std::shared_ptr&lt;TProtocol&gt; <span class="title">protocol</span><span class="params">(<span class="keyword">new</span> TBinaryProtocol(transport))</span></span>;</span><br><span class="line">            <span class="function">SaveClient <span class="title">client</span><span class="params">(protocol)</span></span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                transport-&gt;<span class="built_in">open</span>();</span><br><span class="line"></span><br><span class="line">                client.<span class="built_in">save_data</span>(<span class="string">&quot;acs_11870&quot;</span>, <span class="string">&quot;fdbee89b&quot;</span>, a, b);</span><br><span class="line"></span><br><span class="line">                transport-&gt;<span class="built_in">close</span>();</span><br><span class="line">            &#125; <span class="built_in">catch</span> (TException&amp; tx) &#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;ERROR: &quot;</span> &lt;&lt; tx.<span class="built_in">what</span>() &lt;&lt; endl;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">match</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">while</span> (users.<span class="built_in">size</span>() &gt;<span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">sort</span>(users.<span class="built_in">begin</span>(), users.<span class="built_in">end</span>(), [&amp;](User &amp;a, User b) &#123;</span><br><span class="line">                    <span class="keyword">return</span> a.score &lt; b.score;</span><br><span class="line">                    &#125;);</span><br><span class="line"></span><br><span class="line">                <span class="type">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">uint32_t</span> i = <span class="number">1</span>; i &lt; users.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">auto</span> a = users[i - <span class="number">1</span>], b = users[i];</span><br><span class="line">                    <span class="keyword">if</span> (b.score - a.score &lt;= <span class="number">50</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        users.<span class="built_in">erase</span>(users.<span class="built_in">begin</span>() + i - <span class="number">1</span>, users.<span class="built_in">begin</span>() + i + <span class="number">1</span>);</span><br><span class="line">                        <span class="built_in">save_result</span>(a.id, b.id);</span><br><span class="line"></span><br><span class="line">                        flag = <span class="literal">false</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (flag) <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(User user)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            users.<span class="built_in">push_back</span>(user);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">remove</span><span class="params">(User user)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">uint32_t</span> i = <span class="number">0</span>; i &lt; users.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">                <span class="keyword">if</span> (users[i].id == user.id)</span><br><span class="line">                &#123;</span><br><span class="line">                    users.<span class="built_in">erase</span>(users.<span class="built_in">begin</span>() + <span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        vector&lt;User&gt; users;</span><br><span class="line">&#125;pool;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MatchHandler</span> : <span class="keyword">virtual</span> <span class="keyword">public</span> MatchIf &#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">MatchHandler</span>() &#123;</span><br><span class="line">            <span class="comment">// Your initialization goes here</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">int32_t</span> <span class="title">add_user</span><span class="params">(<span class="type">const</span> User&amp; user, <span class="type">const</span> std::string&amp; info)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// Your implementation goes here</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;add_user\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="function">unique_lock&lt;mutex&gt; <span class="title">lck</span><span class="params">(message_queue.m)</span></span>;</span><br><span class="line">            message_queue.q.<span class="built_in">push</span>(&#123;user, <span class="string">&quot;add&quot;</span>&#125;);</span><br><span class="line">            message_queue.cv.<span class="built_in">notify_all</span>();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">int32_t</span> <span class="title">remove_user</span><span class="params">(<span class="type">const</span> User&amp; user, <span class="type">const</span> std::string&amp; info)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// Your implementation goes here</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;remove_user\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="function">unique_lock&lt;mutex&gt; <span class="title">lck</span><span class="params">(message_queue.m)</span></span>;</span><br><span class="line">            message_queue.q.<span class="built_in">push</span>(&#123;user, <span class="string">&quot;remove&quot;</span>&#125;);</span><br><span class="line">            message_queue.cv.<span class="built_in">notify_all</span>();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MatchCloneFactory</span> : <span class="keyword">virtual</span> <span class="keyword">public</span> MatchIfFactory &#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        ~<span class="built_in">MatchCloneFactory</span>() <span class="keyword">override</span> = <span class="keyword">default</span>;</span><br><span class="line">        <span class="function">MatchIf* <span class="title">getHandler</span><span class="params">(<span class="type">const</span> ::apache::thrift::TConnectionInfo&amp; connInfo)</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            std::shared_ptr&lt;TSocket&gt; sock = std::<span class="built_in">dynamic_pointer_cast</span>&lt;TSocket&gt;(connInfo.transport);</span><br><span class="line">            <span class="comment">/*cout &lt;&lt; &quot;Incoming connection\n&quot;;</span></span><br><span class="line"><span class="comment">            cout &lt;&lt; &quot;\tSocketInfo: &quot;  &lt;&lt; sock-&gt;getSocketInfo() &lt;&lt; &quot;\n&quot;;</span></span><br><span class="line"><span class="comment">            cout &lt;&lt; &quot;\tPeerHost: &quot;    &lt;&lt; sock-&gt;getPeerHost() &lt;&lt; &quot;\n&quot;;</span></span><br><span class="line"><span class="comment">            cout &lt;&lt; &quot;\tPeerAddress: &quot; &lt;&lt; sock-&gt;getPeerAddress() &lt;&lt; &quot;\n&quot;;</span></span><br><span class="line"><span class="comment">            cout &lt;&lt; &quot;\tPeerPort: &quot;    &lt;&lt; sock-&gt;getPeerPort() &lt;&lt; &quot;\n&quot;;*/</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> MatchHandler;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">releaseHandler</span><span class="params">(MatchIf* handler)</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">            <span class="keyword">delete</span> handler;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">consume_task</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">unique_lock&lt;mutex&gt; <span class="title">lck</span><span class="params">(message_queue.m)</span></span>;</span><br><span class="line">        <span class="keyword">if</span> (message_queue.q.<span class="built_in">empty</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//message_queue.cv.wait(lck);</span></span><br><span class="line">            lck.<span class="built_in">unlock</span>();</span><br><span class="line">            pool.<span class="built_in">match</span>();</span><br><span class="line">            <span class="built_in">sleep</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">auto</span> task = message_queue.q.<span class="built_in">front</span>();</span><br><span class="line">            message_queue.q.<span class="built_in">pop</span>();</span><br><span class="line">            lck.<span class="built_in">unlock</span>();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (task.type == <span class="string">&quot;add&quot;</span>) pool.<span class="built_in">add</span>(task.user);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (task.type == <span class="string">&quot;remove&quot;</span>) pool.<span class="built_in">remove</span>(task.user);</span><br><span class="line"></span><br><span class="line">            pool.<span class="built_in">match</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*int port = 9090;</span></span><br><span class="line"><span class="comment">    ::std::shared_ptr&lt;MatchHandler&gt; handler(new MatchHandler());</span></span><br><span class="line"><span class="comment">    ::std::shared_ptr&lt;TProcessor&gt; processor(new MatchProcessor(handler));</span></span><br><span class="line"><span class="comment">    ::std::shared_ptr&lt;TServerTransport&gt; serverTransport(new TServerSocket(port));</span></span><br><span class="line"><span class="comment">    ::std::shared_ptr&lt;TTransportFactory&gt; transportFactory(new TBufferedTransportFactory());</span></span><br><span class="line"><span class="comment">    ::std::shared_ptr&lt;TProtocolFactory&gt; protocolFactory(new TBinaryProtocolFactory());</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);*/</span></span><br><span class="line">    </span><br><span class="line">    <span class="function">TThreadedServer <span class="title">server</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">            std::make_shared&lt;MatchProcessorFactory&gt;(std::make_shared&lt;MatchCloneFactory&gt;()),</span></span></span><br><span class="line"><span class="params"><span class="function">            std::make_shared&lt;TServerSocket&gt;(<span class="number">9090</span>), <span class="comment">//port</span></span></span></span><br><span class="line"><span class="params"><span class="function">            std::make_shared&lt;TBufferedTransportFactory&gt;(),</span></span></span><br><span class="line"><span class="params"><span class="function">            std::make_shared&lt;TBinaryProtocolFactory&gt;())</span></span>;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Start Match Server&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="function">thread <span class="title">matching_thread</span><span class="params">(consume_task)</span></span>;</span><br><span class="line"></span><br><span class="line">    server.<span class="built_in">serve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Version-5-0"><a href="#Version-5-0" class="headerlink" title="Version 5.0"></a>Version 5.0</h4><p>分值匹配范围随着时间的推移扩大</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// This autogenerated skeleton file illustrates how to build a server.</span></span><br><span class="line"><span class="comment">// You should copy it to another filename to avoid overwriting it.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;match_server/Match.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;save_client/Save.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thrift/concurrency/ThreadManager.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thrift/concurrency/ThreadFactory.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thrift/protocol/TBinaryProtocol.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thrift/server/TSimpleServer.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thrift/server/TThreadedServer.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thrift/transport/TServerSocket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thrift/transport/TBufferTransports.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thrift/transport/TSocket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thrift/transport/TTransportUtils.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thrift/TToString.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;condition_variable&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> ::apache::thrift;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> ::apache::thrift::protocol;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> ::apache::thrift::transport;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> ::apache::thrift::server;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span>  ::match_service;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span>  ::save_service;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Task</span></span><br><span class="line">&#123;</span><br><span class="line">    User user;</span><br><span class="line">    string type;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">MessageQueue</span></span><br><span class="line">&#123;</span><br><span class="line">    queue&lt;Task&gt; q;</span><br><span class="line">    mutex m;</span><br><span class="line">    condition_variable cv;</span><br><span class="line">&#125;message_queue;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Pool</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">save_result</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Match Result: %d %d\n&quot;</span>, a, b);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="function">std::shared_ptr&lt;TTransport&gt; <span class="title">socket</span><span class="params">(<span class="keyword">new</span> TSocket(<span class="string">&quot;123.57.67.128&quot;</span>, <span class="number">9090</span>))</span></span>;</span><br><span class="line">            <span class="function">std::shared_ptr&lt;TTransport&gt; <span class="title">transport</span><span class="params">(<span class="keyword">new</span> TBufferedTransport(socket))</span></span>;</span><br><span class="line">            <span class="function">std::shared_ptr&lt;TProtocol&gt; <span class="title">protocol</span><span class="params">(<span class="keyword">new</span> TBinaryProtocol(transport))</span></span>;</span><br><span class="line">            <span class="function">SaveClient <span class="title">client</span><span class="params">(protocol)</span></span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                transport-&gt;<span class="built_in">open</span>();</span><br><span class="line"></span><br><span class="line">                client.<span class="built_in">save_data</span>(<span class="string">&quot;acs_11870&quot;</span>, <span class="string">&quot;fdbee89b&quot;</span>, a, b);</span><br><span class="line"></span><br><span class="line">                transport-&gt;<span class="built_in">close</span>();</span><br><span class="line">            &#125; <span class="built_in">catch</span> (TException&amp; tx) &#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;ERROR: &quot;</span> &lt;&lt; tx.<span class="built_in">what</span>() &lt;&lt; endl;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="function"><span class="type">bool</span> <span class="title">check_match</span><span class="params">(<span class="type">uint32_t</span> i, <span class="type">uint32_t</span> j)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">auto</span> a = users[i], b = users[j];</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> dt = <span class="built_in">abs</span>(a.score - b.score);</span><br><span class="line">            <span class="type">int</span> a_max_dif = wt[i] * <span class="number">50</span>;</span><br><span class="line">            <span class="type">int</span> b_max_dif = wt[j] * <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> dt &lt;= a_max_dif &amp;&amp; dt &lt;= b_max_dif;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">match</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">uint32_t</span> i = <span class="number">0</span>; i &lt; wt.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">                wt[i] ++ ;   <span class="comment">// 等待秒数 + 1</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (users.<span class="built_in">size</span>() &gt; <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">uint32_t</span> i = <span class="number">0</span>; i &lt; users.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">uint32_t</span> j = i + <span class="number">1</span>; j &lt; users.<span class="built_in">size</span>(); j ++ )</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span> (<span class="built_in">check_match</span>(i, j))</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="keyword">auto</span> a = users[i], b = users[j];</span><br><span class="line">                            users.<span class="built_in">erase</span>(users.<span class="built_in">begin</span>() + j);</span><br><span class="line">                            users.<span class="built_in">erase</span>(users.<span class="built_in">begin</span>() + i);</span><br><span class="line">                            wt.<span class="built_in">erase</span>(wt.<span class="built_in">begin</span>() + j);</span><br><span class="line">                            wt.<span class="built_in">erase</span>(wt.<span class="built_in">begin</span>() + i);</span><br><span class="line">                            <span class="built_in">save_result</span>(a.id, b.id);</span><br><span class="line">                            flag = <span class="literal">false</span>;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (!flag) <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span> (flag) <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(User user)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            users.<span class="built_in">push_back</span>(user);</span><br><span class="line">            wt.<span class="built_in">push_back</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">remove</span><span class="params">(User user)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">uint32_t</span> i = <span class="number">0</span>; i &lt; users.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">                <span class="keyword">if</span> (users[i].id == user.id)</span><br><span class="line">                &#123;</span><br><span class="line">                    users.<span class="built_in">erase</span>(users.<span class="built_in">begin</span>() + <span class="number">1</span>);</span><br><span class="line">                    wt.<span class="built_in">erase</span>(wt.<span class="built_in">begin</span>() + i);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        vector&lt;User&gt; users;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; wt;  <span class="comment">// 等待时间, 单位：s</span></span><br><span class="line">&#125;pool;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MatchHandler</span> : <span class="keyword">virtual</span> <span class="keyword">public</span> MatchIf &#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">MatchHandler</span>() &#123;</span><br><span class="line">            <span class="comment">// Your initialization goes here</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">int32_t</span> <span class="title">add_user</span><span class="params">(<span class="type">const</span> User&amp; user, <span class="type">const</span> std::string&amp; info)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// Your implementation goes here</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;add_user\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="function">unique_lock&lt;mutex&gt; <span class="title">lck</span><span class="params">(message_queue.m)</span></span>;</span><br><span class="line">            message_queue.q.<span class="built_in">push</span>(&#123;user, <span class="string">&quot;add&quot;</span>&#125;);</span><br><span class="line">            message_queue.cv.<span class="built_in">notify_all</span>();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="type">int32_t</span> <span class="title">remove_user</span><span class="params">(<span class="type">const</span> User&amp; user, <span class="type">const</span> std::string&amp; info)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// Your implementation goes here</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;remove_user\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="function">unique_lock&lt;mutex&gt; <span class="title">lck</span><span class="params">(message_queue.m)</span></span>;</span><br><span class="line">            message_queue.q.<span class="built_in">push</span>(&#123;user, <span class="string">&quot;remove&quot;</span>&#125;);</span><br><span class="line">            message_queue.cv.<span class="built_in">notify_all</span>();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MatchCloneFactory</span> : <span class="keyword">virtual</span> <span class="keyword">public</span> MatchIfFactory &#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        ~<span class="built_in">MatchCloneFactory</span>() <span class="keyword">override</span> = <span class="keyword">default</span>;</span><br><span class="line">        <span class="function">MatchIf* <span class="title">getHandler</span><span class="params">(<span class="type">const</span> ::apache::thrift::TConnectionInfo&amp; connInfo)</span> <span class="keyword">override</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            std::shared_ptr&lt;TSocket&gt; sock = std::<span class="built_in">dynamic_pointer_cast</span>&lt;TSocket&gt;(connInfo.transport);</span><br><span class="line">            <span class="comment">/*cout &lt;&lt; &quot;Incoming connection\n&quot;;</span></span><br><span class="line"><span class="comment">            cout &lt;&lt; &quot;\tSocketInfo: &quot;  &lt;&lt; sock-&gt;getSocketInfo() &lt;&lt; &quot;\n&quot;;</span></span><br><span class="line"><span class="comment">            cout &lt;&lt; &quot;\tPeerHost: &quot;    &lt;&lt; sock-&gt;getPeerHost() &lt;&lt; &quot;\n&quot;;</span></span><br><span class="line"><span class="comment">            cout &lt;&lt; &quot;\tPeerAddress: &quot; &lt;&lt; sock-&gt;getPeerAddress() &lt;&lt; &quot;\n&quot;;</span></span><br><span class="line"><span class="comment">            cout &lt;&lt; &quot;\tPeerPort: &quot;    &lt;&lt; sock-&gt;getPeerPort() &lt;&lt; &quot;\n&quot;;*/</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> MatchHandler;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">releaseHandler</span><span class="params">(MatchIf* handler)</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">            <span class="keyword">delete</span> handler;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">consume_task</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">unique_lock&lt;mutex&gt; <span class="title">lck</span><span class="params">(message_queue.m)</span></span>;</span><br><span class="line">        <span class="keyword">if</span> (message_queue.q.<span class="built_in">empty</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//message_queue.cv.wait(lck);</span></span><br><span class="line">            lck.<span class="built_in">unlock</span>();</span><br><span class="line">            pool.<span class="built_in">match</span>();</span><br><span class="line">            <span class="built_in">sleep</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">auto</span> task = message_queue.q.<span class="built_in">front</span>();</span><br><span class="line">            message_queue.q.<span class="built_in">pop</span>();</span><br><span class="line">            lck.<span class="built_in">unlock</span>();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (task.type == <span class="string">&quot;add&quot;</span>) pool.<span class="built_in">add</span>(task.user);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (task.type == <span class="string">&quot;remove&quot;</span>) pool.<span class="built_in">remove</span>(task.user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*int port = 9090;</span></span><br><span class="line"><span class="comment">    ::std::shared_ptr&lt;MatchHandler&gt; handler(new MatchHandler());</span></span><br><span class="line"><span class="comment">    ::std::shared_ptr&lt;TProcessor&gt; processor(new MatchProcessor(handler));</span></span><br><span class="line"><span class="comment">    ::std::shared_ptr&lt;TServerTransport&gt; serverTransport(new TServerSocket(port));</span></span><br><span class="line"><span class="comment">    ::std::shared_ptr&lt;TTransportFactory&gt; transportFactory(new TBufferedTransportFactory());</span></span><br><span class="line"><span class="comment">    ::std::shared_ptr&lt;TProtocolFactory&gt; protocolFactory(new TBinaryProtocolFactory());</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);*/</span></span><br><span class="line">    </span><br><span class="line">    <span class="function">TThreadedServer <span class="title">server</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">            std::make_shared&lt;MatchProcessorFactory&gt;(std::make_shared&lt;MatchCloneFactory&gt;()),</span></span></span><br><span class="line"><span class="params"><span class="function">            std::make_shared&lt;TServerSocket&gt;(<span class="number">9090</span>), <span class="comment">//port</span></span></span></span><br><span class="line"><span class="params"><span class="function">            std::make_shared&lt;TBufferedTransportFactory&gt;(),</span></span></span><br><span class="line"><span class="params"><span class="function">            std::make_shared&lt;TBinaryProtocolFactory&gt;())</span></span>;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Start Match Server&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="function">thread <span class="title">matching_thread</span><span class="params">(consume_task)</span></span>;</span><br><span class="line"></span><br><span class="line">    server.<span class="built_in">serve</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="完整项目地址"><a href="#完整项目地址" class="headerlink" title="完整项目地址"></a>完整项目地址</h3><p><a href="https://git.acwing.com/Euphoria_01/thrift_lesson">https://git.acwing.com/Euphoria_01/thrift_lesson</a></p><h2 id="管道、环境变量与常用命令"><a href="#管道、环境变量与常用命令" class="headerlink" title="管道、环境变量与常用命令"></a>管道、环境变量与常用命令</h2><h3 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>管道类似于文件重定向，可以将前一个命令的 <code>stdout</code> 重定向到下一个命令的 <code>stdin</code></p><h4 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h4><ol><li>管道命令仅处理 <code>stdout</code>，会忽略 <code>stderr</code></li><li>管道右边的命令必须能接受 <code>stdin</code></li><li>多个管道命令可以串联</li></ol><h4 id="与文件重定向的区别"><a href="#与文件重定向的区别" class="headerlink" title="与文件重定向的区别"></a>与文件重定向的区别</h4><ul><li>文件重定向左边为命令，右边为文件</li><li>管道左右两边均为命令，左边有 <code>stdout</code>，右边有 <code>stdin</code></li></ul><h4 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h4><p>统计当前目录文件下所有python文件的总行数，其中 <code>find</code>、<code>xargs</code>、<code>wc</code>等命令可以参考<strong>常用命令</strong>这一节内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -name <span class="string">&#x27;*.py&#x27;</span> | xargs <span class="built_in">cat</span> | <span class="built_in">wc</span> -l</span><br></pre></td></tr></table></figure><h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><h4 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h4><p>Linux系统中会用很多环境变量来记录<code>配置信息</code></p><p>环境变量类似于全局变量，可以被各个进程访问到。我们可以通过修改环境变量来方便地修改系统配置</p><h4 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h4><p>列出当前环境下的所有环境变量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">env</span> <span class="comment"># 显示当前用户的变量</span></span><br><span class="line"><span class="built_in">set</span> <span class="comment"># 显示当前shell的变量，包括当前用户的变量</span></span><br><span class="line"><span class="built_in">export</span> <span class="comment"># 显示当前导出成用户变量的shell变量</span></span><br></pre></td></tr></table></figure><p>输出某个环境变量的值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> $变量名 <span class="comment"># 如：echo $PATH</span></span><br></pre></td></tr></table></figure><h4 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h4><p>环境变量的定义、修改、删除操作可以参考<code>shell语法——变量</code>这一节的内容。</p><p>为了将环境变量的修改应用到未来所有环境下，可以将修改命令放到 <code>~/.bashrc</code> 文件中（添加在末尾，因为执行时，下面命令会覆盖上面）。</p><p>修改完 <code>~/.bashrc</code> 文件后，记得执行 <code>source ~/.bashrc</code>，来将修改应用到当前的 <code>bash</code> 环境下。</p><p>为何将修改命令放到 <code>~/.bashrc</code>，就可以确保修改会影响未来所有的环境呢？</p><ul><li>每次启动 <code>bash</code>，都会先执行 <code>~/.bashrc</code></li><li>每次 <code>ssh</code> 登录远程服务器，都会启动一个 <code>bash</code> 命令行给我们</li><li>每次 <code>tmux</code> 新开一个 <code>pane</code>，都会启动一个 <code>bash</code> 命令行给我们</li><li>所以未来所有新开的环境都会加载我们修改的内容</li></ul><h4 id="常见环境变量"><a href="#常见环境变量" class="headerlink" title="常见环境变量"></a>常见环境变量</h4><ol><li><code>HOME</code>：用户的家目录</li><li><code>PATH</code>：可执行文件（命令）的存储路径。路径与路径之间用 <code>:</code> 分隔。当某个可执行文件同时出现在多个路径中时，会选择从左到右数第一个路径中的执行。<strong>下列所有存储路径的环境变量，均采用从左到右的优先顺序</strong></li><li><code>LD_LIBRARY_PATH</code>：用于指定动态链接库（.so文件）的路径，其内容是以冒号分隔的路径列表</li><li><code>C_INCLUDE_PATH</code>：C语言的头文件路径，内容是以冒号分隔的路径列表</li><li><code>CPLUS_INCLUDE_PATH</code>：CPP的头文件路径，内容是以冒号分隔的路径列表</li><li><code>PYTHONPATH</code>：Python导入包的路径，内容是以冒号分隔的路径列表</li><li><code>JAVA_HOME</code>：jdk的安装目录</li><li><code>CLASSPATH</code>：存放Java导入类的路径，内容是以冒号分隔的路径列表</li></ol><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><p>Linux 命令非常多，使用时上网查即可，这里只包括一些常用命令</p><h4 id="系统状况"><a href="#系统状况" class="headerlink" title="系统状况"></a>系统状况</h4><ul><li><p><code>top</code>：查看所有进程的信息（Linux的任务管理器）</p><ul><li>打开后，输入M：按使用内存排序</li><li>打开后，输入P：按使用CPU排序</li><li>打开后，输入q：退出</li></ul></li><li><p><code>df -h</code>：查看硬盘使用情况</p></li><li><p><code>free -h</code>：查看内存使用情况</p></li><li><p><code>du -sh</code>：查看当前目录占用的硬盘空间</p><ul><li><code>du -ch</code>：详细查看当前目录下每个文件所占用磁盘空间</li></ul></li><li><p><code>ps aux</code>：查看所有进程</p></li><li><p><code>kill -9 pid</code>：杀死编号为pid的进程</p><ul><li>传递某个具体的信号：<code>kill -s SIGTERM pid</code></li></ul></li><li><p><code>netstat -nt</code>：查看所有网络连接</p></li><li><p><code>w</code>：列出当前登陆的用户</p></li><li><p><code>ping www.baidu.com</code>：检查是否连网</p></li></ul><h4 id="文件权限"><a href="#文件权限" class="headerlink" title="文件权限"></a>文件权限</h4><p>分别对应用户本人权限、同组权限以及其他权限(每类权限均3位，类之间用 <strong>-</strong> 隔开)</p><ul><li><code>chmod</code>：修改文件权限（rwx）<ul><li><code>chmod +x xxx</code>：给 <code>xxx</code> 添加可执行权限</li><li><code>chmod -x xxx</code>：去掉 <code>xxx</code> 的可执行权限</li><li><code>chmod 777 xxx</code>：将 <code>xxx</code> 的权限改成 <code>777</code>（每一位都是0~7，对应权限的三位，<strong>二进制编码</strong>！）</li><li><code>chmod 777 xxx -R</code>：递归修改整个文件夹的权限</li></ul></li></ul><h4 id="文件检索"><a href="#文件检索" class="headerlink" title="文件检索"></a>文件检索</h4><ul><li><p><code>find /path/to/directory/ -name &#39;*.py&#39;</code>：搜索某个文件路径下的所有 <code>*.py</code> 文件</p></li><li><p>grep xxx：从 <code>stdin</code> 中读入若干行数据，如果某行中包含 <code>xxx</code>，则输出该行；否则忽略该行。</p></li><li><p><code>wc</code>：统计行数（换行符数量）、单词数、字节数</p><ul><li>既可以从 <code>stdin</code> 中直接读入内容；也可以在命令行参数中传入文件名列表；</li><li><code>wc -l</code>：统计行数</li><li><code>wc -w</code>：统计单词数</li><li><code>wc -c</code>：统计字节数</li></ul></li><li><p><code>tree</code>：展示当前目录的文件结构</p><ul><li><code>tree /path/to/directory/</code>：展示某个目录的文件结构</li><li><code>tree -a</code>：展示隐藏文件</li></ul></li><li><p><code>ag xxx</code>：搜索当前目录下的所有文件，检索 <code>xxx</code> 字符串</p></li><li><p><code>cut</code>：分割一行内容</p><ul><li>从 <code>stdin</code> 中读入多行数据</li><li><code>echo $PATH | cut -d &#39;:&#39; -f 3,5</code>：输出PATH用:分割后第3、5列数据</li><li><code>echo $PATH | cut -d &#39;:&#39; -f 3-5</code>：输出PATH用:分割后第3-5列数据</li><li><code>echo $PATH | cut -c 3,5</code>：输出PATH的第3、5个字符</li><li><code>echo $PATH | cut -c 3-5</code>：输出PATH的第3-5个字符</li></ul></li><li><p><code>sort</code>：将每行内容按字典序排序</p><ul><li>可以从 <code>stdin</code> 中读取多行数据</li><li>可以从命令行参数中读取文件名列表</li></ul></li><li><p><code>xargs</code>：将 <code>stdin</code> 中的数据用空格或回车分割成命令行参数</p><ul><li><code>find . -name &#39;*.py&#39; | xargs cat | wc -l</code>：统计当前目录下所有python文件的总行数</li></ul></li></ul><h4 id="查看文件内容"><a href="#查看文件内容" class="headerlink" title="查看文件内容"></a>查看文件内容</h4><p>建议使用 <code>vim</code>，更方便，hhh</p><ul><li><code>more</code>：浏览文件内容，每次展示一屏幕，不会全部展示出来<ul><li>回车：下一行</li><li>空格：下一页</li><li><code>b</code>：上一页</li><li><code>q</code>：退出</li></ul></li><li><code>less</code>：与 <code>more</code> 类似，功能更全<ul><li>回车：下一行</li><li><code>y</code>：上一行</li><li><code>Page Down</code>：下一页</li><li><code>Page Up</code>：上一页</li><li><code>q</code>：退出</li></ul></li><li><code>head -3 xxx</code>：展示 <code>xxx</code> 的前3行内容<ul><li>同时支持从 <code>stdin</code> 读入内容</li></ul></li><li><code>tail -3 xxx</code>：展示 <code>xxx</code> 末尾3行内容<ul><li>同时支持从 <code>stdin</code> 读入内容</li></ul></li></ul><h4 id="用户相关"><a href="#用户相关" class="headerlink" title="用户相关"></a>用户相关</h4><p><code>history</code> 只展示最近1000条（编号不变）</p><p><code>~/.bash_history</code> 存放的为持久化后的历史指令（保留最近2000条），即刚执行的指令在关闭终端后才会更新进入文件</p><ul><li><code>history</code>：展示当前用户的历史操作。内容存放在 <code>~/.bash_history</code> 中</li></ul><h4 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h4><ul><li><code>md5sum</code>：计算 <code>md5</code> 哈希值<ul><li>可以从 <code>stdin</code> 读入内容</li><li>也可以在命令行参数中传入文件名列表</li></ul></li><li><code>time command</code>：统计 <code>command</code> 命令的执行时间</li><li><code>ipython3</code>：交互式python3环境。可以当做计算器，或者批量管理文件<ul><li><code>! echo &quot;Hello World&quot;</code>：<code>!</code> 表示执行 <code>shell</code> 脚本</li></ul></li><li><code>watch -n 0.1 command</code>：每0.1秒执行一次 <code>command</code> 命令</li><li><code>tar</code>：压缩文件<ul><li><code>tar -zcvf xxx.tar.gz /path/to/file/*</code>：压缩</li><li><code>tar -zxvf xxx.tar.gz</code>：解压缩<ul><li><code>tar -zxvf xxx.tar.gz -C yyy</code>：将 <code>xxx.tar.gz</code> 解压到指定目录yyy中（-C：change）</li></ul></li></ul></li><li><code>diff xxx yyy</code>：查找文件 <code>xxx</code> 与 <code>yyy</code> 的不同点</li></ul><h4 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h4><ul><li><code>sudo command</code>：以 <code>root</code> 身份执行 <code>command</code> 命令</li><li><code>apt-get install xxx</code>：安装软件</li><li><code>pip install xxx --user --upgrade</code>：安装python包</li></ul><h2 id="租云服务器及配docker环境"><a href="#租云服务器及配docker环境" class="headerlink" title="租云服务器及配docker环境"></a>租云服务器及配docker环境</h2><h3 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h3><p><code>云平台的作用</code></p><ol><li>存放我们的 <strong>docker</strong> 容器，让计算跑在云端</li><li>获得公网 IP 地址，让每个人可以访问到我们的服务</li></ol><p><code>任选一个云平台即可，推荐配置</code></p><ul><li>1 核 2 GB（后期可以动态扩容，前期配置低一些没关系）</li><li>网络带宽采用按量付费，最大带宽拉满即可（费用取决于用量，与最大带宽无关）</li><li>系统版本：Ubuntu 20.04 LTS（推荐使用统一版本，避免后期出现配置不兼容问题）</li></ul><p><code>租到的服务器分两大类</code></p><ul><li>毛坯：（可定制化比较强，自己配置）<ul><li>框架</li><li>thrift</li></ul></li><li>服务：（提供服务的方式共两大类）<ul><li>socket：IP + port</li><li>http</li></ul></li></ul><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/24184c3212364054ce9eadfc991b799.png" alt="24184c3212364054ce9eadfc991b799"></p><h3 id="租云服务器及安装docker"><a href="#租云服务器及安装docker" class="headerlink" title="租云服务器及安装docker"></a>租云服务器及安装docker</h3><h4 id="云服务器网址"><a href="#云服务器网址" class="headerlink" title="云服务器网址"></a>云服务器网址</h4><p><a href="https://www.aliyun.com/">阿里云地址</a></p><p><a href="https://cloud.tencent.com/">腾讯云地址</a></p><p><a href="https://www.huaweicloud.com/">华为云地址</a></p><h4 id="创建工作用户-acs-并赋予-sudo-权限"><a href="#创建工作用户-acs-并赋予-sudo-权限" class="headerlink" title="创建工作用户 acs 并赋予 sudo 权限"></a>创建工作用户 <code>acs</code> 并赋予 <code>sudo</code> 权限</h4><p>登录到新服务器。打开 <strong>AC Terminal</strong>，然后：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh root@xxx.xxx.xxx.xxx <span class="comment"># xxx.xxx.xxx.xxx替换成新服务器的公网IP（注意，腾讯云登录的用户不是root，而是ubuntu)</span></span><br></pre></td></tr></table></figure><p>创建 <code>acs</code> 用户：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adduser acs <span class="comment"># 创建用户acs</span></span><br><span class="line">usermod -aG sudo acs <span class="comment"># 给用户acs分配sudo权限</span></span><br></pre></td></tr></table></figure><h4 id="配置免密登录方式"><a href="#配置免密登录方式" class="headerlink" title="配置免密登录方式"></a>配置免密登录方式</h4><p>退回 <strong>AC Terminal</strong>，然后配置 <code>acs</code> 用户的别名和免密登录，参考 <strong>4.ssh——ssh登录</strong></p><h4 id="配置新服务器的工作环境"><a href="#配置新服务器的工作环境" class="headerlink" title="配置新服务器的工作环境"></a>配置新服务器的工作环境</h4><p>将 <strong>AC Terminal</strong> 的配置传到新服务器上：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp .bashrc .vimrc .tmux.conf server_name:<span class="comment"># server_name需要换成自己配置的别名</span></span><br></pre></td></tr></table></figure><h4 id="安装-tmux-和-docker"><a href="#安装-tmux-和-docker" class="headerlink" title="安装 tmux 和 docker"></a>安装 tmux 和 docker</h4><p>登录自己的服务器，然后安装 <code>tmux</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install tmux</span><br></pre></td></tr></table></figure><p>打开 <code>tmux</code>。（养成好习惯，所以工作都在 <code>tmux</code> 里进行，防止意外关闭终端后，工作进度丢失）</p><p>然后再 <code>tmux</code> 中根据 <a href="https://docs.docker.com/engine/install/ubuntu/">docker安装教程</a> 安装 <code>docker</code> 即可，如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">tmux  <span class="comment"># 好习惯，进入tmux</span></span><br><span class="line"></span><br><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line">sudo apt-get install \</span><br><span class="line">    apt-transport-https \</span><br><span class="line">    ca-certificates \</span><br><span class="line">    curl \</span><br><span class="line">    gnupg \</span><br><span class="line">    lsb-release</span><br><span class="line"></span><br><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> \</span><br><span class="line"><span class="string">&quot;deb [arch=<span class="subst">$(dpkg --print-architecture)</span> signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \</span></span><br><span class="line"><span class="string"><span class="subst">$(lsb_release -cs)</span> stable&quot;</span> | sudo <span class="built_in">tee</span> /etc/apt/sources.list.d/docker.list &gt; /dev/null</span><br><span class="line"></span><br><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line">sudo apt-get install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure><h3 id="docker教程"><a href="#docker教程" class="headerlink" title="docker教程"></a>docker教程</h3><p> <img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BB%93%E6%9E%84.png" alt="服务器结构"></p><h4 id="将当前用户添加到-docker-用户组"><a href="#将当前用户添加到-docker-用户组" class="headerlink" title="将当前用户添加到 docker 用户组"></a>将当前用户添加到 <code>docker</code> 用户组</h4><p>为了避免每次使用 <code>docker</code> 命令都需要加上 <code>sudo</code> 权限，可以将当前用户加入安装中自动创建的 <code>docker</code> 用户组（可以参考<a href="https://docs.docker.com/engine/install/linux-postinstall/">官方文档</a>）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo usermod -aG docker $USER</span><br></pre></td></tr></table></figure><p>执行完此操作后，需要退出服务器，再重新登录回来，才可以省去 <code>sudo</code> 权限</p><p><code>docker</code> 会有很多镜像（<code>image</code>），每个镜像（<code>image</code>）能生成多个容器（<code>contain</code>），每个容器相当于一个独立的云端服务器</p><h4 id="镜像（images）"><a href="#镜像（images）" class="headerlink" title="镜像（images）"></a>镜像（images）</h4><p><code>xxxxx:xxx</code>，前面为名称，后面为 tag（版本号）</p><ol><li><code>docker pull ubuntu:20.04</code>：拉取一个镜像</li><li><code>docker images</code>：列出本地所有镜像</li><li><code>docker image rm ubuntu:20.04</code> 或 <code>docker rmi ubuntu:20.04</code>：删除镜像 <code>ubuntu:20.04</code></li><li><code>docker [container] commit CONTAINER IMAGE_NAME:TAG</code>：创建某个 <code>container</code> 的镜像，<code>[]</code>表示可选</li><li><code>docker save -o ubuntu_20_04.tar ubuntu:20.04</code>：将镜像 <code>ubuntu:20.04</code> 导出到本地文件 <code>ubuntu_20_04.tar</code>中</li><li><code>docker load -i ubuntu_20_04.tar</code>：将镜像 <code>ubuntu:20.04</code> 从本地文件 <code> ubuntu_20_04.tar</code> 中加载出来</li></ol><h4 id="容器（container）"><a href="#容器（container）" class="headerlink" title="容器（container）"></a>容器（container）</h4><p><code>[]</code> 表示可选，即可填可不填</p><ol><li><p><code>docker [container] create -it ubuntu:20.04</code>：利用镜像 <code>ubuntu:20.04</code> 创建一个容器。</p></li><li><p><code>docker ps -a</code>：查看本地的所有容器</p><ol><li><code>docker ps</code>：显示所有正在运行的容器</li></ol></li><li><p><code>docker [container] start CONTAINER</code>：启动容器（后面 <code>CONTAINER</code> 指 <code>CONTAINER ID</code>，也可以是 <code>NAMES</code>）</p></li><li><p><code>docker [container] stop CONTAINER</code>：停止容器</p></li><li><p><code>docker [container] restart CONTAINER</code>：重启容器</p></li><li><p><code>docker [contaienr] run -itd ubuntu:20.04</code>：创建并启动一个容器</p></li><li><p><code>docker [container] attach CONTAINER</code>：进入容器</p><ul><li><code>先按Ctrl-p，再按Ctrl-q可以挂起容器</code></li></ul></li><li><p><code>docker [container] exec CONTAINER COMMAND</code>：在容器中执行命令</p></li><li><p><code>docker [container] rm CONTAINER</code>：删除容器</p></li><li><p><code>docker container prune</code>：删除所有已停止的容器</p></li><li><p><code>docker export -o xxx.tar CONTAINER</code>：将容器CONTAINER导出到本地文件<strong>xxx.tar</strong>中</p></li><li><p><code>docker import xxx.tar image_name:tag</code>：将本地文件<strong>xxx.tar</strong>导入成镜像，并将镜像命名为<strong>image_name:tag</strong></p></li><li><p><code>docker export/import与docker save/load的区别</code>：</p><ul><li><strong>export&#x2F;import会丢弃历史记录和元数据信息，仅保存容器当时的快照状态</strong></li><li><strong>save&#x2F;load会保存完整记录，体积更大</strong></li></ul></li><li><p><code>docker top CONTAINER</code>：查看某个容器内的所有进程</p></li><li><p><code>docker stats</code>：查看所有容器的统计信息，包括CPU、内存、存储、网络等信息</p></li><li><p><code>docker cp xxx CONTAINER:xxx 或 docker cp CONTAINER:xxx xxx</code>：在本地和容器间复制文件（也可以是文件夹）</p></li><li><p><code>docker rename CONTAINER1 CONTAINER2</code>：重命名容器</p></li><li><p><code>docker update CONTAINER --memory 500MB</code>：修改容器限制</p></li></ol><h4 id="实战-2"><a href="#实战-2" class="headerlink" title="实战"></a>实战</h4><p>进入 <strong>AC Terminal</strong>，然后：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">scp /var/lib/acwing/docker/images/docker_lesson_1_0.tar server_name:  <span class="comment"># 将镜像上传到自己租的云端服务器</span></span><br><span class="line">ssh server_name  <span class="comment"># 登录自己的云端服务器</span></span><br><span class="line"></span><br><span class="line">docker load -i docker_lesson_1_0.tar  <span class="comment"># 将镜像加载到本地</span></span><br><span class="line">docker run -p 20000:22 --name my_docker_server -itd docker_lesson:1.0  <span class="comment"># 创建并运行docker_lesson:1.0镜像</span></span><br><span class="line"></span><br><span class="line">docker attach my_docker_server  <span class="comment"># 进入创建的docker容器</span></span><br><span class="line">passwd  <span class="comment"># 设置root密码</span></span><br></pre></td></tr></table></figure><p>去云平台控制台中修改安全组配置，放行端口 <code>20000</code></p><p>返回 <strong>AC Terminal</strong>，即可通过 <code>ssh</code> 登录自己的 <code>docker</code> 容器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh root@xxx.xxx.xxx.xxx -p 20000  <span class="comment"># 将xxx.xxx.xxx.xxx替换成自己租的服务器的IP地址</span></span><br></pre></td></tr></table></figure><p>然后，可以仿照上一小节内容，创建工作账户 <code>acs</code></p><p>最后，可以参考<strong>4.ssh——ssh登录</strong>配置 <code>docker</code> 容器的别名和免密登录</p><h4 id="小Tips"><a href="#小Tips" class="headerlink" title="小Tips"></a>小Tips</h4><p>如果 <code>apt-get</code> 下载软件速度较慢，可以参考<a href="https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/">清华大学开源软件镜像站</a>中的内容，修改软件源。</p>]]></content>
      
      
      <categories>
          
          <category> AcWing </category>
          
          <category> Linux基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux基础 </tag>
            
            <tag> tmux </tag>
            
            <tag> vim </tag>
            
            <tag> shell </tag>
            
            <tag> ssh </tag>
            
            <tag> git </tag>
            
            <tag> thrift </tag>
            
            <tag> 管道 </tag>
            
            <tag> 环境变量 </tag>
            
            <tag> 云服务器 </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django</title>
      <link href="/uncategorized/Django/"/>
      <url>/uncategorized/Django/</url>
      
        <content type="html"><![CDATA[<h1 id="Django"><a href="#Django" class="headerlink" title="Django"></a>Django</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Django是一个高级的Python Web框架，可以快速开发安全和可维护的网站，Youtube（月活20亿+）、Instagram（月活10亿+）等公司采用了Django框架。</p><p>Django优势:</p><ul><li>开发效率高，生态完善，有<a href="https://www.djangoproject.com/">官方社区</a>长期支持</li><li>运行效率高（常见误区：python运行效率低，所以python写的应用运行效率低）<ul><li>项目运行效率瓶颈有很多，比如：数据库查询、网络带宽&#x2F;延迟、硬盘读写速度等，这些与框架关系不大</li><li>计算密集型的模块可以用 C&#x2F;C++ 实现，然后编译成动态链接库再 <code>import</code> 进来</li><li>计算密集型的微服务可以通过 <code>thrift</code> 等工具对接，微服务的 <code>Server</code> 端代码可以用 C&#x2F;C++ 语言实现</li><li>有很多工具可以将 Python 代码翻译成 C&#x2F;C++，比如<code>Cython、Pypy</code></li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ 运算符重载</title>
      <link href="/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C/%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD/C++-%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD/"/>
      <url>/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C/%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD/C++-%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<h1 id="C-运算符重载"><a href="#C-运算符重载" class="headerlink" title="C++ 运算符重载"></a>C++ 运算符重载</h1><p>[more detail](<a href="https://www.runoob.com/cplusplus/cpp-overloading.html">C++ 重载运算符和重载函数 | 菜鸟教程</a>)</p><h2 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h2><p>C++中结构体是无法进行 <code>+、-、*、/、==、&gt;、&lt;、&gt;=、&lt;=、!=</code> 等运算符操作的，如要使用这些运算符对结构体进行操作，则要对这些运算符进行重载</p><h3 id="template"><a href="#template" class="headerlink" title="template"></a>template</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*在结构体中进行运算符重载*/</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node1</span> &#123;</span><br><span class="line">    <span class="type">int</span> x, y;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> &lt;(<span class="type">const</span> node1 &amp;a) <span class="type">const</span> &#123; <span class="comment">//重载&lt;,返回bool类型</span></span><br><span class="line">        <span class="keyword">if</span> (x == a.x) <span class="keyword">return</span> y &lt; a.y;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> x &lt; a.x;</span><br><span class="line">        <span class="comment">//也可以使用this指针来指向当前这个结构体的成员，要表示这个结构体则用 *this </span></span><br><span class="line">        <span class="comment">//if (this-&gt;x == a.x)return this-&gt;y &lt; a.y;</span></span><br><span class="line">        <span class="comment">//else return this-&gt;x &lt; a.x;   </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node2</span>&#123;</span><br><span class="line">    <span class="type">int</span> x,y;</span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span> &lt;(<span class="type">const</span> node2 &amp;a, <span class="type">const</span> node2 &amp;b)&#123; <span class="comment">//在结构体内重载运算符,添加两个参数需在前面添加friend关键字.</span></span><br><span class="line">        <span class="keyword">if</span> (a.x == b.x) <span class="keyword">return</span> a.y &lt; b.y;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> a.x &lt; b.x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*在结构体外面进行运算符重载,可以添加两个参数，不需要friend关键字.*/</span></span><br><span class="line"><span class="type">int</span> <span class="keyword">operator</span> +(<span class="type">const</span> node &amp;a, <span class="type">const</span> node &amp;b)&#123; <span class="comment">//重载+，返回int类型</span></span><br><span class="line"><span class="keyword">return</span> a.x + b.y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line"><span class="type">int</span> x, y;</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span> &lt;(<span class="type">const</span> node &amp;t) <span class="type">const</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (x == t.x) <span class="keyword">return</span> y &lt; t.y;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> x &lt; t.x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span> &gt;(<span class="type">const</span> node &amp;t) <span class="type">const</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (x == t.x) <span class="keyword">return</span> y &gt; t.y;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> x &gt; t.x;</span><br><span class="line">&#125;</span><br><span class="line">&#125; Node;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*typedef struct node &#123;</span></span><br><span class="line"><span class="comment">int x, y;</span></span><br><span class="line"><span class="comment">friend bool operator &lt;(const node &amp;a, const node &amp;b) &#123;</span></span><br><span class="line"><span class="comment">if (a.x == b.x) return a.y &lt; b.y;</span></span><br><span class="line"><span class="comment">else return a.x &lt; b.x;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">friend bool operator &gt;(const node &amp;a, const node &amp;b) &#123;</span></span><br><span class="line"><span class="comment">if (a.x == b.x) return a.y &gt; b.y;</span></span><br><span class="line"><span class="comment">else return a.x &gt; b.x;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125; Node;*/</span></span><br><span class="line"></span><br><span class="line">Node <span class="keyword">operator</span> +(<span class="type">const</span> node &amp;a, <span class="type">const</span> node &amp;b)&#123; <span class="comment">//重载+</span></span><br><span class="line">Node tmp;</span><br><span class="line">tmp.x = a.x + b.x;</span><br><span class="line">tmp.y = a.y + b.y;</span><br><span class="line"><span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Node a[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n; cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++ i) &#123;</span><br><span class="line">cin &gt;&gt; a[i].x &gt;&gt; a[i].y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(a, a + n);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;升序排列如下-----------------&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++ i) &#123;</span><br><span class="line">cout &lt;&lt; a[i].x &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; a[i].y &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(a, a + n, <span class="built_in">greater</span>&lt;Node&gt;());</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;降序排列如下-----------------&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++ i) &#123;</span><br><span class="line">cout &lt;&lt; a[i].x &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; a[i].y &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;降序排列中前两个元素之和-----------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">Node w = a[<span class="number">0</span>] + a[<span class="number">1</span>];</span><br><span class="line">cout &lt;&lt; w.x &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; w.y &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><p>与结构体中运算符重载类似</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Distance</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> feet;             <span class="comment">// 0 到无穷</span></span><br><span class="line"><span class="type">int</span> inches;           <span class="comment">// 0 到 12</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">// 所需的构造函数</span></span><br><span class="line"><span class="built_in">Distance</span>() &#123;</span><br><span class="line">feet = <span class="number">0</span>;</span><br><span class="line">inches = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Distance</span>(<span class="type">int</span> f, <span class="type">int</span> i) &#123;</span><br><span class="line">feet = f;</span><br><span class="line">inches = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 显示距离的方法</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">displayDistance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;F: &quot;</span> &lt;&lt; feet &lt;&lt; <span class="string">&quot; I:&quot;</span> &lt;&lt; inches &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 重载负运算符（ - ）</span></span><br><span class="line">Distance <span class="keyword">operator</span>- () &#123;</span><br><span class="line">feet = -feet;</span><br><span class="line">inches = -inches;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Distance</span>(feet, inches);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 重载小于运算符（ &lt; ）</span></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span> &lt;(<span class="type">const</span> Distance&amp; d) <span class="type">const</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (feet == d.feet) <span class="keyword">return</span> inches &lt; d.inches;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> feet &lt; d.feet;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="function">Distance <span class="title">D1</span><span class="params">(<span class="number">11</span>, <span class="number">10</span>)</span>, <span class="title">D2</span><span class="params">(<span class="number">5</span>, <span class="number">11</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( D1 &lt; D2 ) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;D1 is less than D2 &quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;D2 is less than D1 &quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>涉及到类数组排序问题如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Box</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">double</span> length;      <span class="comment">// 长度</span></span><br><span class="line"><span class="type">double</span> width;       <span class="comment">// 宽度</span></span><br><span class="line"><span class="type">double</span> height;      <span class="comment">// 高度</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Box</span> () &#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;length = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">this</span>-&gt;width = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">this</span>-&gt;height = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Box</span> (<span class="type">double</span> length, <span class="type">double</span> width, <span class="type">double</span> height) &#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;length = length;</span><br><span class="line"><span class="keyword">this</span>-&gt;width = width;</span><br><span class="line"><span class="keyword">this</span>-&gt;height = height;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">getVolume</span><span class="params">(<span class="type">void</span>)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> length * width * height;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重载 + 运算符，用于把两个 Box 对象相加</span></span><br><span class="line">Box <span class="keyword">operator</span>+(<span class="type">const</span> Box&amp; b) &#123;</span><br><span class="line">Box box;</span><br><span class="line">box.length = <span class="keyword">this</span>-&gt;length + b.length;</span><br><span class="line">box.width = <span class="keyword">this</span>-&gt;width + b.width;</span><br><span class="line">box.height = <span class="keyword">this</span>-&gt;height + b.height;</span><br><span class="line"><span class="keyword">return</span> box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span> &lt;(<span class="type">const</span> Box &amp;t) <span class="type">const</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (length == t.length &amp;&amp; width == t.width) <span class="keyword">return</span> height &lt; t.height;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (length == t.length) <span class="keyword">return</span> width &lt; t.width;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> length &lt; t.length;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Box list[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">( )</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++ i) &#123;</span><br><span class="line"><span class="type">int</span> a, b, c;</span><br><span class="line">cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line">list[i] = <span class="built_in">Box</span>(a, b, c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(list, list + n);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++ i) &#123;</span><br><span class="line">cout &lt;&lt; list[i].length &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; list[i].width &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; list[i].height &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;---------------------------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Box Box1;                <span class="comment">// 声明 Box1，类型为 Box</span></span><br><span class="line">Box Box2;                <span class="comment">// 声明 Box2，类型为 Box</span></span><br><span class="line">Box Box3;                <span class="comment">// 声明 Box3，类型为 Box</span></span><br><span class="line"><span class="type">double</span> volume = <span class="number">0.0</span>;     <span class="comment">// 把体积存储在该变量中</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Box1 详述</span></span><br><span class="line">Box1 = <span class="built_in">Box</span>(<span class="number">6.0</span>, <span class="number">7.0</span>, <span class="number">5.0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Box2 详述</span></span><br><span class="line">Box2 = <span class="built_in">Box</span>(<span class="number">12.0</span>, <span class="number">13.0</span>, <span class="number">10.0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Box1 的体积</span></span><br><span class="line">volume = Box1.<span class="built_in">getVolume</span>();</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Volume of Box1 : &quot;</span> &lt;&lt; volume &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Box2 的体积</span></span><br><span class="line">volume = Box2.<span class="built_in">getVolume</span>();</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Volume of Box2 : &quot;</span> &lt;&lt; volume &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把两个对象相加，得到 Box3</span></span><br><span class="line">Box3 = Box1 + Box2;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Box3 的体积</span></span><br><span class="line">volume = Box3.<span class="built_in">getVolume</span>();</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Volume of Box3 : &quot;</span> &lt;&lt; volume &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
          <category> C++ </category>
          
          <category> 运算符重载 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 运算符重载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UML</title>
      <link href="/UML/UML/"/>
      <url>/UML/UML/</url>
      
        <content type="html"><![CDATA[<h1 id="UML类图"><a href="#UML类图" class="headerlink" title="UML类图"></a>UML类图</h1><h2 id="UML概述"><a href="#UML概述" class="headerlink" title="UML概述"></a>UML概述</h2><p>UML：<code>Unified Modeling Language</code></p><p><code>统一建模语言</code></p><ul><li>UML是一个通用的<strong>可视化建模语言</strong>，不同于编程语言，它<strong>通过一些标准的图形符号和文字来对系统进行建模</strong></li><li>用于对软件进行描述、可视化处理、构造和建立软件系统制品的文档</li></ul><h2 id="UML的结构"><a href="#UML的结构" class="headerlink" title="UML的结构"></a>UML的结构</h2><h3 id="视图（View）"><a href="#视图（View）" class="headerlink" title="视图（View）"></a>视图（View）</h3><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240106132824164.png" alt="image-20240106132824164"></p><h3 id="图（Diagram）：13种"><a href="#图（Diagram）：13种" class="headerlink" title="图（Diagram）：13种"></a>图（Diagram）：13种</h3><p>用例图(Use Case Diagram)，</p><p>类图(Class Diagram)，</p><p>对象图(Object Diagram)，</p><p>包图(Package Diagram)，</p><p>组合结构图(Composite Structure Diagram)，</p><p>状态图(State Diagram)，</p><p>活动图(Activity Diagram)，</p><p>顺序图(Sequence Diagram)，</p><p>通信图(Communication Diagram)，</p><p>定时图(Timing Diagram)，</p><p>交互概览图(Interaction Overview Diagram)，</p><p>组件图(Component Diagram)，</p><p>部署图(Deployment Diagram)</p><h3 id="模型元素（Model-Element）"><a href="#模型元素（Model-Element）" class="headerlink" title="模型元素（Model Element）"></a>模型元素（Model Element）</h3><ul><li>UML图中所使用的一些概念，对应于普通的面向对象概念</li><li>同一个模型元素可以在多个不同的UML图中使用，但是，无论在哪个图中，<strong>同一个模型元素都必须保持相同的意义并具有相同的符号</strong></li></ul><h3 id="通用机制（General-Mechanism）"><a href="#通用机制（General-Mechanism）" class="headerlink" title="通用机制（General Mechanism）"></a>通用机制（General Mechanism）</h3><p>​UML提供的通用机制<strong>为模型元素提供额外的注释、语义和其他信息</strong>，包括<strong>扩展机制</strong>，允许用户对UML进行扩展</p><h2 id="类与类的UML表示"><a href="#类与类的UML表示" class="headerlink" title="类与类的UML表示"></a>类与类的UML表示</h2><h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><ul><li>类（Class）<strong>封装了数据和行为</strong>，是面向对象的重要组成部分，它是具有相同属性、操作、关系的对象集合的总称</li><li>在系统中，<strong>每个类都具有一定的职责</strong>，职责指的是类要完成什么样的功能，要承担什么样的义务。<strong>一个类可以有多种职责，设计得好的类通常有且仅有一种职责</strong>。在定义类的时候，将类的职责分解成为类的属性和操作（即方法）</li><li><strong>类的属性即类的数据职责，类的操作即类的行为职责</strong></li><li>类<strong>实例化成对象（object）</strong>，对象对应于某个具体的事物，是<strong>类的实例（Instance）</strong></li><li><strong>类图（Class Diagram）</strong>使用出现在系统中的不同类来<strong>描述系统的静态结构</strong>，它<strong>用来描述不同的类以及它们之间的关系</strong></li></ul><h3 id="类的UML图示"><a href="#类的UML图示" class="headerlink" title="类的UML图示"></a>类的UML图示</h3><p><strong>在UML类图中，类一般由三部分组成：</strong><code>类名、类的属性、类的操作</code></p><h4 id="类名"><a href="#类名" class="headerlink" title="类名"></a>类名</h4><ul><li>每个类都必须有一个名字，类名是一个字符串</li><li>按照Java语言的命名规范，类名中每一个单词的首字母均大写</li></ul><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240112004046646.png" alt="image-20240112004046646"></p><h4 id="类的属性（Attributes）"><a href="#类的属性（Attributes）" class="headerlink" title="类的属性（Attributes）"></a>类的属性（Attributes）</h4><ul><li><p>属性是指类的性质，即<strong>类的成员变量</strong>。一个类可以有任意多个属性，也可以没有属性。</p></li><li><p>按照Java语言的命名规范，属性名中的第一个单词全小写，之后每个单词首字母大写。（驼峰命名法）</p><p><code>[可见性] 名称:类型 [ = 默认值  ]  </code></p></li></ul><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240112004145514.png" alt="image-20240112004145514"></p><h4 id="类的操作（Operations）"><a href="#类的操作（Operations）" class="headerlink" title="类的操作（Operations）"></a>类的操作（Operations）</h4><ul><li>操作是类的任意一个实例对象都拥有的行为，是类的成员方法。</li><li>按照Java语言的命名规范，方法名中第一个单词全小写，之后每个单词首字母大写。</li></ul><p><code>[可见性] 名称([参数列表]) [:返回类型 ]</code></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240112004216639.png" alt="image-20240112004216639"></p><h2 id="类之间的关系"><a href="#类之间的关系" class="headerlink" title="类之间的关系"></a>类之间的关系</h2><h3 id="泛化关系"><a href="#泛化关系" class="headerlink" title="泛化关系"></a>泛化关系</h3><ul><li>泛化（Generalization）关系也就是<strong>继承关系</strong>，用于描述父类与子类之间的关系，<ul><li>父类又称为基类或超类</li><li>子类又称为派生类</li></ul></li><li>在UML中，泛化关系用<strong>带空心三角形的实线</strong>来表示</li><li>在代码实现时，使用面向对象的继承机制来实现泛化关系，在Java中，使用<code>extends</code>关键字实现</li></ul><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240112004234747.png" alt="image-20240112004234747"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//父类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> String name;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">move</span><span class="params">()</span>  &#123;</span><br><span class="line">        <span class="comment">//......</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//......</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//子类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span>  &#123;</span><br><span class="line">    <span class="keyword">private</span> String studentNo;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">study</span><span class="params">()</span>  &#123;</span><br><span class="line">        <span class="comment">//......</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现关系"><a href="#实现关系" class="headerlink" title="实现关系"></a>实现关系</h3><ul><li>接口之间也可以有与类之间类似的继承关系和依赖关系，但是<strong>接口和类</strong>之间还存在一种<strong>实现（Realization）关系</strong>，在这种关系中，类实现了接口，类中的操作实现了接口所声明的操作</li><li>在UML中，类与接口之间的实现关系用<strong>带空心三角形的虚线</strong>来表示，实现类指向接口</li><li>在Java中，使用implements关键字实现</li><li>一个class类实现interface接口（可以多实现）</li></ul><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240112004435322.png" alt="image-20240112004435322"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Vehicle</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">move</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Ship</span> <span class="keyword">implements</span> <span class="title class_">Vehicle</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">move</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//......</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Car</span> <span class="keyword">implements</span> <span class="title class_">Vehicle</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">move</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//......</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="依赖关系"><a href="#依赖关系" class="headerlink" title="依赖关系"></a>依赖关系</h3><ul><li><strong>依赖（Dependency）关系</strong>是一种使用关系，特定事物的改变有可能会影响到使用该事物的其他事物，<strong>在需要表示一个事物使用另一个事物时使用</strong></li><li>大多数情况下，<strong>依赖关系体现在某个类的方法使用另一个类的对象作为参数</strong></li><li>在UML中，依赖关系用<strong>带箭头的虚线</strong>表示，由依赖的一方指向被依赖的一方。</li></ul><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240112004529172.png" alt="image-20240112004529172"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Driver</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">drive</span><span class="params">(Car car)</span></span><br><span class="line">    &#123;</span><br><span class="line">        car.move();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">move</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//......</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>在系统实现阶段，依赖关系通常通过三种方式来实现</code></p><ol><li>将一个类的对象作为另一个类中<strong>方法的参数</strong></li><li>在一个类的方法中，将另一个类的对象作为其<strong>局部变量</strong></li><li>在一个类的方法中<strong>调用</strong>另一个类的<strong>静态方法</strong></li></ol><h3 id="关联关系"><a href="#关联关系" class="headerlink" title="关联关系"></a>关联关系</h3><ul><li><strong>关联（Association）关系</strong>是类与类之间最常用的一种关系，它是一种结构化关系，<strong>用于表示一类对象与另一类对象之间有联系</strong></li><li>分为<code>一般关联关系、聚合关系和组合关系</code></li></ul><h4 id="一般关联关系"><a href="#一般关联关系" class="headerlink" title="一般关联关系"></a>一般关联关系</h4><ul><li>在UML类图中，用<strong>实线连接有关联关系的对象所对应的类</strong>，在使用Java、C++和C#等编程语言实现关联关系时，通常<strong>将一个类的对象作为另一个类的成员变量</strong></li><li>在使用类图表示关联关系时<strong>可以在关联线上标注角色名</strong></li></ul><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240112004624423.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginForm</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> JButton loginButton; <span class="comment">//定义为成员变量</span></span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JButton</span> &#123;</span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="双向关联"><a href="#双向关联" class="headerlink" title="双向关联"></a>双向关联</h5><p>默认情况下，关联是<strong>双向的</strong></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240112004723980.png" alt="image-20240112004723980"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Customer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Product[] products;</span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Product</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Customer customer;</span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="单向关联"><a href="#单向关联" class="headerlink" title="单向关联"></a>单向关联</h5><p>类的关联关系也可以是<strong>单向的</strong>，单向关联<strong>用带箭头的实线</strong>表示</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240112004817493.png" alt="image-20240112004817493"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Customer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Address address;</span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Address</span> &#123;</span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="自关联"><a href="#自关联" class="headerlink" title="自关联"></a>自关联</h5><p>在系统中可能会存在<strong>一些类的属性对象类型为该类本身</strong>，这种特殊的关联关系称为自关联</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240112004850212.png" alt="image-20240112004850212"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Node subNode;</span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h5 id="多重性关联"><a href="#多重性关联" class="headerlink" title="多重性关联"></a>多重性关联</h5><ul><li>多重性关联关系又称为<strong>重数性（Multiplicity）关联关系</strong>，表示两个关联对象在数量上的对应关系。</li><li>在UML中，对象之间的多重性可以直接在关联直线上用一个数字或一个数字范围表示</li></ul><table><thead><tr><th align="center"><strong>表示方式</strong></th><th align="center"><strong>多重性说明</strong></th></tr></thead><tbody><tr><td align="center">1..1</td><td align="center">表示另一个类的一个对象只与该类的一个对象有关系</td></tr><tr><td align="center">0..*</td><td align="center">表示另一个类的一个对象与该类的零个或多个对象有关系</td></tr><tr><td align="center">1..*</td><td align="center">表示另一个类的一个对象与该类的一个或多个对象有关系</td></tr><tr><td align="center">0..1</td><td align="center">表示另一个类的一个对象没有或只与该类的一个对象有关系</td></tr><tr><td align="center">m..n</td><td align="center">表示另一个类的一个对象与该类最少m，最多n个对象有关系 (m≤n)</td></tr></tbody></table><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240112005022620.png" alt="image-20240112005022620"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Form</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Button[] buttons; <span class="comment">//定义一个集合对象</span></span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Button</span> &#123;</span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="聚合关系"><a href="#聚合关系" class="headerlink" title="聚合关系"></a>聚合关系</h4><ul><li><strong>聚合（Aggregation）关系</strong>表示整体与部分的关系</li><li>在聚合关系中，成员对象是整体对象的一部分，但是成员对象可以脱离整体对象独立存在</li><li>在UML中，聚合关系用<strong>带空心菱形的直线</strong>表示</li></ul><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240112005103409.png" alt="image-20240112005103409"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Engine engine;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Car</span><span class="params">(Engine engine)</span> &#123;    <span class="comment">//构造注入</span></span><br><span class="line">        <span class="built_in">this</span>.engine = engine;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEngine</span><span class="params">(Engine engine)</span> &#123;    <span class="comment">//设值注入</span></span><br><span class="line">        <span class="built_in">this</span>.engine = engine;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Engine</span> &#123;</span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="组合关系"><a href="#组合关系" class="headerlink" title="组合关系"></a>组合关系</h4><ul><li><strong>组合（Composition）关系</strong>也表示类之间整体和部分的关系，但是在组合关系中<strong>整体对象可以控制成员对象的生命周期</strong>，一旦整体对象不存在，成员对象也将不存在</li><li>成员对象与整体对象之间具有<strong>同生共死</strong>关系</li><li>在UML中，组合关系用<strong>带实心菱形的直线</strong>表示</li></ul><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240112005146722.png" alt="image-20240112005146722"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Head</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Mouth mouth;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Head</span><span class="params">()</span> &#123;</span><br><span class="line">        mouth = <span class="keyword">new</span> <span class="title class_">Mouth</span>();  <span class="comment">//实例化成员类</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Mouth</span> &#123;</span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="补充知识"><a href="#补充知识" class="headerlink" title="补充知识"></a>补充知识</h2><p><code>注释</code></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240112005313306.png"></p><p><code>正向工程</code></p><p>模型（Model）-&gt; 代码（Code）</p><p><code>逆向工程</code></p><p>代码（Code）-&gt; 模型（Model）</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240112005402282.png" alt="image-20240112005402282"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> UML </category>
          
          <category> UML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 面向对象设计原则 </tag>
            
            <tag> UML类图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java设计模式</title>
      <link href="/Java/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/Java/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="Java设计模式"><a href="#Java设计模式" class="headerlink" title="Java设计模式"></a>Java设计模式</h1><p>[TOC]</p><h2 id="面向对象设计原则"><a href="#面向对象设计原则" class="headerlink" title="面向对象设计原则"></a>面向对象设计原则</h2><p><code>可维护性(Maintainability)</code>：指软件能够被理解、改正、适应及拓展的难易程度</p><p><code>可复用性(Reusability)</code>：指软件能够被重复使用的难易程度</p><p>面向对象设计的目标之一在于<strong>支持可维护性复用</strong></p><p>面向对象设计原则为<strong>支持可维护性复用而诞生</strong></p><h3 id="单一职责原则"><a href="#单一职责原则" class="headerlink" title="单一职责原则"></a>单一职责原则</h3><p><code>Single Responsibility Principle（SRP）</code></p><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><ul><li><p>一个对象应该只包含单一的职责，并且该职责被完整地封装在一个类中。</p></li><li><p>最简单的面向对象设计原则，用于控制类的粒度大小</p></li><li><p>就一个类而言，应该仅有一个引起它变化的原因</p></li></ul><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><ul><li>一个类（大到模块，小到方法）承担的职责越多，它被复用的可能性就越小</li><li>当一个职责变化时，可能会影响其他职责的运作</li><li>将这些职责进行分离，将不同的职责封装在不同的类中</li><li>将不同的变化原因封装在不同的类中</li><li>单一职责原则是实现高内聚、低耦合的指导方针</li></ul><h3 id="开闭原则"><a href="#开闭原则" class="headerlink" title="开闭原则"></a>开闭原则</h3><p><code>Open-Closed Principle（OCP）</code></p><h4 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h4><ul><li><p>软件实体应当对拓展开放，对修改关闭</p></li><li><p>面向对象的可复用设计的第一块基石，是最重要的面向对象设计原则</p></li></ul><h4 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h4><ul><li>由Bertrand Meyer于1988年提出</li><li>在开闭原则的定义中，软件实体可以是一个软件模块、一个由多个类组成的局部结构或一个独立的类</li><li>软件实体应尽量在不修改原有代码的情况下进行拓展</li><li><strong>抽象化</strong>是开闭原则的关键</li><li>相对稳定的抽象层 + 灵活的具体层</li></ul><h3 id="里氏代换原则"><a href="#里氏代换原则" class="headerlink" title="里氏代换原则"></a>里氏代换原则</h3><p><code>Liskov Substitution Principle（LSP）</code></p><h4 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h4><ul><li>所用引用基类的地方必须能透明地使用其子类的对象</li></ul><h4 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h4><ul><li>在软件中将一个基类对象替换成它的子类对象，程序将不会产生任何错误和异常，反过来则不成立。如果一个软件实体使用的是一个子类对象的话，那么它不一定能够使用基类对象</li><li>在程序中尽量使用基类类型来对对象进行定义，而在运行时再确定其子类类型</li></ul><h3 id="依赖倒转原则"><a href="#依赖倒转原则" class="headerlink" title="依赖倒转原则"></a>依赖倒转原则</h3><p><code>Dependency Inversion Principle（DIP）</code></p><h4 id="定义-3"><a href="#定义-3" class="headerlink" title="定义"></a>定义</h4><ul><li><p>高层模块不应该依赖底层模块，它们都应该依赖抽象。抽象不应该依赖于细节，细节应该依赖于抽象</p></li><li><p>要针对接口编程，不要针对实现编程</p></li></ul><h4 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h4><ul><li>在程序代码中传递参数时或在关联关系中，尽量引用层次高的抽象层类，即使用接口和抽象类进行变量类型声明、参数类型声明、方法返回类型声明，以及数据类型的转换等</li><li>在程序中尽量使用抽象层进行编程，而将具体类写在配置文件中</li><li>针对抽象层编程，将具体类的对象通过<strong>依赖注入（Dependency Injection）</strong>的方式注入到其他对象<ul><li>构造注入</li><li>设值注入（Setter注入）</li><li>接口注入</li></ul></li></ul><h3 id="接口隔离原则"><a href="#接口隔离原则" class="headerlink" title="接口隔离原则"></a>接口隔离原则</h3><p><code>Interface Segregation Principle（ISP）</code></p><h4 id="定义-4"><a href="#定义-4" class="headerlink" title="定义"></a>定义</h4><ul><li>客户端不应该依赖那些它不需要的接口</li></ul><h4 id="分析-4"><a href="#分析-4" class="headerlink" title="分析"></a>分析</h4><ul><li>当一个接口太大时，需要将它分割成一些更细小的接口</li><li>使用该接口的客户端仅需知道与之相关的方法即可</li><li>每一个接口应该承担一种相对独立的角色，不干不该干的事，该干的事都要干</li></ul><h3 id="合成复用原则"><a href="#合成复用原则" class="headerlink" title="合成复用原则"></a>合成复用原则</h3><p>又称：组合&#x2F;聚合复用原则</p><p><code>Composition / Aggregate Reuse Principle（CARP）</code></p><h4 id="定义-5"><a href="#定义-5" class="headerlink" title="定义"></a>定义</h4><ul><li>优先使用对象组合，而不是继承来达到复用的目的</li></ul><h4 id="分析-5"><a href="#分析-5" class="headerlink" title="分析"></a>分析</h4><ul><li>在一个新的对象里通过关联关系（包括组合关系和聚合关系）来使用一些已有的对象，使之成为新对象的一部分</li><li>新对象通过委派调用已有对象的方法达到复用功能的目的</li><li>复用时要尽量使用组合&#x2F;聚合关系（关联关系），少用继承</li></ul><p><code>继承复用</code>：实现简单，易于扩展。破坏系统的封装性；从基类继承而来的实现是静态的，不可能在运行时发生改变，没有足够的灵活性；只能在有限的环境中使用。（<strong>白箱复用</strong>）</p><p><code>组合/聚合复用</code>：耦合度相对较低，有选择性地调用成员对象的操作；可以在运行时动态进行，新对象可以动态地引用与成员对象类型相同的其他对象。（<strong>黑箱复用</strong> ）</p><h3 id="迪米特法则"><a href="#迪米特法则" class="headerlink" title="迪米特法则"></a>迪米特法则</h3><p>又称：最少知识原则</p><p><code>Least Knowledge Principle（LKP）</code></p><p><code>Law of Demeter（LoD）</code></p><h4 id="定义-6"><a href="#定义-6" class="headerlink" title="定义"></a>定义</h4><ul><li>每一个软件单位对其他的单位都只有最少的知识，而且局限于那些与本单位密切相关的软件单位</li></ul><h4 id="分析-6"><a href="#分析-6" class="headerlink" title="分析"></a>分析</h4><ul><li>迪米特法则要求一个软件实体应当尽可能少地与其他实体发生相互作用</li><li>应用迪米特法则可<strong>降低系统的耦合度</strong>，使类与类之间保持松散的耦合关系</li><li>要求在设计系统时，应该尽量减少对象之间的交互</li><li>如果两个对象之间不必彼此直接通信，那么这两个对象就不应该发生任何直接的相互调用</li><li>如果其中一个对象需要调用另一个对象的方法，可以通过第三者转发这个调用</li><li>通过引入一个合理的第三者来降低现有对象之间的耦合度</li></ul><h2 id="创造型模式"><a href="#创造型模式" class="headerlink" title="创造型模式"></a>创造型模式</h2><h3 id="工厂方法模式-Factory-Method-Pattern"><a href="#工厂方法模式-Factory-Method-Pattern" class="headerlink" title="工厂方法模式(Factory Method Pattern)"></a>工厂方法模式(Factory Method Pattern)</h3><p><code>类创建型模式</code></p><h4 id="定义-7"><a href="#定义-7" class="headerlink" title="定义"></a>定义</h4><ul><li><p>定义一个用于创建对象的接口，但是让子类决定将哪一个类实例化。工厂方法模式让一个类的实例化延迟到子类。</p></li><li><p>简称为工厂模式（Factory Pattern）</p></li><li><p>又可称作虚拟构造器模式（Virtual Constructor Pattern）或多态工厂模式（Polymorphic Factory Pattern）</p></li><li><p>工厂父类负责定义创建产品对象的公共接口，而工厂子类则负责生成具体的产品对象</p></li></ul><h4 id="UML结构"><a href="#UML结构" class="headerlink" title="UML结构"></a>UML结构</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20231228180654676.png" alt="image-20231228180654676"></p><ul><li>Product（抽象产品）</li><li>ConcreteProduct（具体产品）</li><li>Factory（抽象工厂）</li><li>ConcreteFactory（具体工厂）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//典型的抽象工厂类代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Factory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Product <span class="title function_">factoryMethod</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//典型的具体工厂类代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConcreteFactory</span> <span class="keyword">implements</span> <span class="title class_">Factory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Product <span class="title function_">factoryMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ConcreteProduct</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//典型的客户端代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Factory factory;</span><br><span class="line">        factory = <span class="keyword">new</span> <span class="title class_">ConcreteFactory</span>();<span class="comment">//可通过配置文件和反射机制实现</span></span><br><span class="line">        Product product;</span><br><span class="line">        product = factory.factoryMethod();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Java反射机制"><a href="#Java反射机制" class="headerlink" title="Java反射机制"></a>Java反射机制</h4><ul><li>Java反射(Java Reflection)是指：在程序运行时获取已知名称的类或已有对象的相关信息的一种机制，包括类的方法、属性、父类等信息，还包括实例的创建和实例类型的判断等</li><li>Class类的实例表示正在运行的Java应用程序中的类和接口，其<code>forName(String className)</code>方法可以返回与带有给定字符串名的类或接口相关联的Class对象，再通过Class对象的<code>newInstance()</code>方法创建此对象所表示的类的一个新实例，即通过一个类名字符串得到类的实例</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过类名生成实例对象并将其返回</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.String&quot;</span>);</span><br><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> c.newInstance();</span><br><span class="line"><span class="keyword">return</span> obj;</span><br></pre></td></tr></table></figure><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><ul><li>纯文本文件，例如XML文件、properties文件……等</li><li>通常是XML文件，可以将类名存储在配置文件中，例如具体工厂类的类名</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!— config.xml --&gt;</span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">className</span>&gt;</span>designpatterns.factorymethod.FileLoggerFactory<span class="tag">&lt;/<span class="name">className</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">config</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> designpatterns.factorymethod;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">    LoggerFactory factory;</span><br><span class="line">    Logger logger;</span><br><span class="line">    factory = (LoggerFactory)XMLUtil.getBean(); <span class="comment">//getBean()的返回类型为Object，需要进行强制类型转换</span></span><br><span class="line">    logger = factory.createLogger();</span><br><span class="line">    logger.writeLog();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="增加新产品的步骤"><a href="#增加新产品的步骤" class="headerlink" title="增加新产品的步骤"></a>增加新产品的步骤</h4><ol><li>添加一个新的具体产品类作为抽象产品类的子类</li><li>添加一个新的具体工厂类作为抽象工厂类的子类，该工厂用于创建新增的具体产品对象</li><li>修改配置文件，用新的具体工厂类的类名字符串替换原有工厂类类名字符串</li><li>编译运行即可</li></ol><h4 id="工厂方法的隐藏"><a href="#工厂方法的隐藏" class="headerlink" title="工厂方法的隐藏"></a>工厂方法的隐藏</h4><p>目的：为了进一步简化客户端的使用</p><p>实现：在工厂类中直接调用产品类的业务方法，客户端无须调用工厂方法创建产品对象，直接使用工厂对象即可调用创建的产品对象中的业务方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将接口改为抽象类</span></span><br><span class="line"><span class="comment">//抽象工厂类LoggerFactory代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">LoggerFactory</span> &#123;</span><br><span class="line">    <span class="comment">//在工厂类中直接调用日志记录器类的业务方法writeLog()</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">writeLog</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> <span class="built_in">this</span>.createLogger();</span><br><span class="line">        logger.writeLog();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> Logger <span class="title function_">createLogger</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//客户端代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">        LoggerFactory factory;</span><br><span class="line">        factory = (LoggerFactory)XMLUtil.getBean();</span><br><span class="line">        factory.writeLog(); <span class="comment">//直接使用工厂对象来调用产品对象的业务方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="模式优缺点及适用环境"><a href="#模式优缺点及适用环境" class="headerlink" title="模式优缺点及适用环境"></a>模式优缺点及适用环境</h4><p><code>模式优点</code></p><ul><li>工厂方法用来创建客户所需要的产品，同时还向客户隐藏了哪种具体产品类将被实例化这一细节</li><li>能够让工厂自主确定创建何种产品对象，而如何创建这个对象的细节则完全封装在具体工厂内部</li><li>在系统中加入新产品时，完全符合开闭原则</li></ul><p><code>模式缺点</code></p><ul><li>系统中类的个数将成对增加，在一定程度上增加了系统的复杂度，会给系统带来一些额外的开销</li><li>增加了系统的抽象性和理解难度</li></ul><p><code>模式适用环境</code></p><ul><li>客户端不知道它所需要的对象的类（客户端不需要知道具体产品类的类名，只需要知道所对应的工厂即可，具体产品对象由具体工厂类创建）</li><li>抽象工厂类通过其子类来指定创建哪个对象</li></ul><h3 id="抽象工厂模式-Abstract-Factory-Pattern"><a href="#抽象工厂模式-Abstract-Factory-Pattern" class="headerlink" title="抽象工厂模式(Abstract Factory Pattern)"></a>抽象工厂模式(Abstract Factory Pattern)</h3><p>​由于工厂方法模式中，每一个具体工厂只有一个或者一组重载的工厂方法，只能生产一种产品，可能会导致系统中存在大量的工厂类，势必会增加系统的开销</p><p>​抽象工厂模式：一个工厂可以生产一系列产品（一族产品），极大减少了工厂类的数量。</p><p><code>产品等级结构</code>：即产品的继承结构</p><p><code>产品族</code>：由同一个工厂生产的，位于不同产品等级结构中的一组产品</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20231228180908208.png" alt="image-20231228180908208"></p><p><code>对象创建型模式</code></p><h4 id="定义-8"><a href="#定义-8" class="headerlink" title="定义"></a>定义</h4><ul><li><p>提供一个创建一系列相关或相互依赖对象的接口，而无须指定它们具体的类。</p></li><li><p>又称为工具（Kit）模式</p></li><li><p>抽象工厂模式中的具体工厂不只是创建一种产品，它负责创建一族产品</p></li><li><p>当一个工厂等级结构可以创建出分属于不同产品等级结构的一个产品族中的所有对象时，抽象工厂模式比工厂方法模式更为简单、更有效率</p></li></ul><h4 id="UML结构-1"><a href="#UML结构-1" class="headerlink" title="UML结构"></a>UML结构</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20231228181033966.png" alt="image-20231228181033966"></p><ul><li>AbstractFactory（抽象工厂）</li><li>ConcreteFactory（具体工厂）</li><li>AbstractProduct（抽象产品）</li><li>ConcreteProduct（具体产品）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//典型的抽象工厂类代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AbstractFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> AbstractProductA <span class="title function_">createProductA</span><span class="params">()</span>; <span class="comment">//工厂方法一</span></span><br><span class="line">    <span class="keyword">public</span> AbstractProductB <span class="title function_">createProductB</span><span class="params">()</span>; <span class="comment">//工厂方法二</span></span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//典型的具体工厂类代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConcreteFactory1</span> <span class="keyword">implements</span> <span class="title class_">AbstractFactory</span> &#123;</span><br><span class="line">    <span class="comment">//工厂方法一</span></span><br><span class="line">    <span class="keyword">public</span> AbstractProductA <span class="title function_">createProductA</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ConcreteProductA1</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//工厂方法二</span></span><br><span class="line">    <span class="keyword">public</span> AbstractProductB <span class="title function_">createProductB</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ConcreteProductB1</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="开闭原则的倾斜性"><a href="#开闭原则的倾斜性" class="headerlink" title="开闭原则的倾斜性"></a>开闭原则的倾斜性</h4><ul><li><p>增加产品族</p><p>对于增加新的产品族，抽象工厂模式很好地支持了开闭原则，只需要增加具体产品并对应增加一个新的具体工厂，对已有代码无须做任何修改</p></li><li><p>增加新的产品等级结构</p><p>对于增加新的产品等级结构，需要修改所有的工厂角色，包括抽象工厂类，在所有的工厂类中都需要增加生产新产品的方法，违背了开闭原则</p></li></ul><h4 id="模式优缺点及适用环境-1"><a href="#模式优缺点及适用环境-1" class="headerlink" title="模式优缺点及适用环境"></a>模式优缺点及适用环境</h4><p><code>模式优点</code></p><ul><li>隔离了具体类的生成，使得客户端并不需要知道什么被创建</li><li>当一个产品族中的多个对象被设计成一起工作时，它能够保证客户端始终只使用同一个产品族中的对象</li><li>增加新的产品族很方便，无须修改已有系统，符合开闭原则</li></ul><p><code>模式缺点</code></p><p>​增加新的产品等级结构麻烦，需要对原有系统进行较大的修改，甚至需要修改抽象层代码，这显然会带来较大的不便，违背了开闭原则</p><p><code>模式适用环境</code></p><ul><li>一个系统不应当依赖于产品类实例如何被创建、组合和表达的细节</li><li>系统中有多于一个的产品族，但每次只使用其中某一产品族</li><li>属于同一个产品族的产品将在一起使用，这一约束必须在系统的设计中体现出来</li><li>产品等级结构稳定，在设计完成之后不会向系统中增加新的产品等级结构或者删除已有的产品等级结构</li></ul><h3 id="建造者模式-Builder-Pattern"><a href="#建造者模式-Builder-Pattern" class="headerlink" title="建造者模式(Builder Pattern)"></a>建造者模式(Builder Pattern)</h3><p><code>对象创建型模式</code></p><h4 id="定义-9"><a href="#定义-9" class="headerlink" title="定义"></a>定义</h4><ul><li><p>将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示</p></li><li><p>将客户端与包含多个部件的复杂对象的创建过程分离，客户端无须知道复杂对象的内部组成部分与装配方式，只需要知道所需建造者的类型即可</p></li><li><p>关注如何逐步创建一个复杂的对象，不同的建造者定义了不同的创建过程</p></li></ul><h4 id="UML结构-2"><a href="#UML结构-2" class="headerlink" title="UML结构"></a>UML结构</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20231228181133223.png" alt="image-20231228181133223"></p><ul><li>Builder（抽象建造者）</li><li>ConcreteBuilder（具体建造者）</li><li>Product（产品）</li><li>Director（指挥者）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//典型的复杂对象类代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Product</span> &#123;</span><br><span class="line"><span class="keyword">private</span> String partA; <span class="comment">//定义部件，部件可以是任意类型，包括值类型和引用类型</span></span><br><span class="line"><span class="keyword">private</span> String partB;</span><br><span class="line"><span class="keyword">private</span> String partC;</span><br><span class="line"></span><br><span class="line"><span class="comment">//partA的Getter方法和Setter方法省略</span></span><br><span class="line"><span class="comment">//partB的Getter方法和Setter方法省略</span></span><br><span class="line"><span class="comment">//partC的Getter方法和Setter方法省略</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//典型的对象建造者类代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Builder</span> &#123;</span><br><span class="line">    <span class="comment">//创建产品对象</span></span><br><span class="line">    <span class="keyword">protected</span> Product product=<span class="keyword">new</span> <span class="title class_">Product</span>();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">buildPartA</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">buildPartB</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">buildPartC</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回产品对象</span></span><br><span class="line">    <span class="keyword">public</span> Product <span class="title function_">getResult</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> product;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//典型的具体建造者类代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConcreteBuilder1</span> <span class="keyword">extends</span> <span class="title class_">Builder</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buildPartA</span><span class="params">()</span> &#123;</span><br><span class="line">        product.setPartA(<span class="string">&quot;A1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buildPartB</span><span class="params">()</span> &#123;</span><br><span class="line">        product.setPartB(<span class="string">&quot;B1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buildPartC</span><span class="params">()</span> &#123;</span><br><span class="line">        product.setPartC(<span class="string">&quot;C1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//典型的指挥者代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Director</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Builder builder;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Director</span><span class="params">(Builder builder)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.builder=builder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBuilder</span><span class="params">(Builder builder)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.builder=builer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//产品构建与组装方法</span></span><br><span class="line">    <span class="keyword">public</span> Product <span class="title function_">construct</span><span class="params">()</span> &#123;</span><br><span class="line">        builder.buildPartA();</span><br><span class="line">        builder.buildPartB();</span><br><span class="line">        builder.buildPartC();</span><br><span class="line">        <span class="keyword">return</span> builder.getResult();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//客户端代码片段</span></span><br><span class="line">......</span><br><span class="line"><span class="type">Builder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConcreteBuilder1</span>(); <span class="comment">//可通过配置文件实现</span></span><br><span class="line"><span class="type">Director</span> <span class="variable">director</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Director</span>(builder);</span><br><span class="line"><span class="type">Product</span> <span class="variable">product</span> <span class="operator">=</span> director.construct();</span><br><span class="line">......</span><br></pre></td></tr></table></figure><h4 id="模式优缺点及适用环境-2"><a href="#模式优缺点及适用环境-2" class="headerlink" title="模式优缺点及适用环境"></a>模式优缺点及适用环境</h4><p><code>模式优点</code></p><ul><li>客户端不必知道产品内部组成的细节，将产品本身与产品的创建过程解耦，使得相同的创建过程可以创建不同的产品对象</li><li>每一个具体建造者都相对独立，与其他的具体建造者无关，因此可以很方便地替换具体建造者或增加新的具体建造者，拓展方便，符合开闭原则</li><li>可以更加精细地控制产品的创建过程</li></ul><p><code>模式缺点</code></p><ul><li>建造者模式所创建的产品一般具有较多的共同点，其组成部分相似，如果产品之间的差异性很大，不适合使用建造者模式，因此其使用范围受到一定的限制</li><li>如果产品的内部变化复杂，可能会需要定义很多具体建造者类来实现这种变化，导致系统变得很庞大，增加了系统的理解难度和运行成本</li></ul><p><code>模式适用环境</code></p><ul><li>需要生成的产品对象有复杂的内部结构，这些产品对象通常包含多个成员变量</li><li>需要生成的产品对象的属性相互依赖，需要指定其生成顺序</li><li>对象的创建过程独立于创建该对象的类。在建造者模式中通过引入了指挥者类，将创建过程封装在指挥者类中，而不在建造者类和客户类中</li><li>隔离复杂对象的创建和使用，并使得相同的创建过程可以创建不同的产品</li></ul><h3 id="原型模式-Prototype-Pattern"><a href="#原型模式-Prototype-Pattern" class="headerlink" title="原型模式(Prototype Pattern)"></a>原型模式(Prototype Pattern)</h3><p><code>对象创建型模式</code></p><h4 id="定义-10"><a href="#定义-10" class="headerlink" title="定义"></a>定义</h4><ul><li><p>使用原型实例指定待创建对象的类型，并且通过复制这个原型来创建新的对象</p></li><li><p>工作原理：将一个原型对象传给要发动创建的对象（即客户端对象），这个要发动创建的对象通过请求原型对象复制自己来实现创建过程</p></li><li><p>创建新对象（也称为克隆对象）的工厂就是原型类自身，工厂方法由负责复制原型对象的克隆方法来实现</p></li><li><p>通过克隆方法所创建的对象是全新的对象，它们在内存中拥有新的地址，每一个克隆对象都是独立的</p></li><li><p>通过不同的方式对克隆对象进行修改以后，可以得到一系列相似但又不完全相同的对象</p></li></ul><h4 id="UML结构-3"><a href="#UML结构-3" class="headerlink" title="UML结构"></a>UML结构</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20231228181222831.png" alt="image-20231228181222831"></p><ul><li>Prototype（抽象原型类）</li><li>ConcretePrototype（具体原型类）</li><li>Client（客户类）</li></ul><h4 id="浅克隆与深克隆"><a href="#浅克隆与深克隆" class="headerlink" title="浅克隆与深克隆"></a>浅克隆与深克隆</h4><ul><li><p>浅克隆（Shallow Clone）</p><p>当原型对象被复制时，只复制它本身和其中包含的值类型的成员变量，而引用类型的成员变量并没有复制</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20231228181303974.png" alt="image-20231228181303974"></p></li><li><p>深克隆（Deep Clone）</p><p>除了对象本身被复制外，对象所包含的所有成员变量也将被复制</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20231228181339417.png" alt="image-20231228181339417"></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Prototype</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Prototype <span class="title function_">clone</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConcretePrototype</span> <span class="keyword">implements</span> <span class="title class_">Prototype</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String attr; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAttr</span><span class="params">(String attr)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.attr = attr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAttr</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.attr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//克隆方法</span></span><br><span class="line">    <span class="keyword">public</span> Prototype <span class="title function_">clone</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Prototype</span> <span class="variable">prototype</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConcretePrototype</span>(); <span class="comment">//创建新对象</span></span><br><span class="line">        prototype.setAttr(<span class="built_in">this</span>.attr);</span><br><span class="line">        <span class="keyword">return</span> prototype;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Client</span></span><br><span class="line">    ......</span><br><span class="line">    <span class="type">Prototype</span> <span class="variable">prototype</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConcretePrototype</span>();</span><br><span class="line">    prototype.setAttr(<span class="string">&quot;Sunny&quot;</span>);</span><br><span class="line">    <span class="type">ConcretePrototype</span> <span class="variable">copy</span> <span class="operator">=</span> (ConcretePrototype)prototype.clone();</span><br><span class="line">    ......</span><br></pre></td></tr></table></figure><h4 id="Java语言中的clone方法和Cloneable接口"><a href="#Java语言中的clone方法和Cloneable接口" class="headerlink" title="Java语言中的clone方法和Cloneable接口"></a>Java语言中的clone方法和Cloneable接口</h4><p>​在Java语言中，提供了一个clone()方法用于实现浅克隆，该方法使用起来很方便，直接调用super.clone()方法即可实现克隆</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConcretePrototype</span> <span class="keyword">implements</span> <span class="title class_">Cloneable</span> &#123;</span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line">    <span class="comment">//Shallow Clone</span></span><br><span class="line">    <span class="keyword">public</span> Prototype <span class="title function_">clone</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            object = <span class="built_in">super</span>.clone;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(CloneNotSupportedException) &#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;Not support cloneable&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (Prototype)object</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Client</span></span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line">    <span class="type">Prototype</span> <span class="variable">prototype</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConcretePrototype</span>();</span><br><span class="line">    <span class="type">Prototype</span> <span class="variable">copy</span> <span class="operator">=</span> prototype.clone();</span><br><span class="line">    <span class="comment">//......</span></span><br></pre></td></tr></table></figure><h4 id="原型管理器"><a href="#原型管理器" class="headerlink" title="原型管理器"></a>原型管理器</h4><p>​原型管理器(Prototype Manager)将多个原型对象存储在一个集合中供客户端使用，它是一个专门负责克隆对象的工厂，其中定义了一个集合用于存储原型对象，如果需要某个原型对象的一个克隆，可以通过复制集合中对应的原型对象来获得</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20231228181423033.png" alt="image-20231228181423033"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PrototypeManager</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Hashtable prototypeTable=<span class="keyword">new</span> <span class="title class_">Hashtable</span>();  <span class="comment">//使用Hashtable存储原型对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PrototypeManager</span><span class="params">()</span> &#123;</span><br><span class="line">        prototypeTable.put(<span class="string">&quot;A&quot;</span>, <span class="keyword">new</span> <span class="title class_">ConcretePrototypeA</span>());</span><br><span class="line">        prototypeTable.put(<span class="string">&quot;B&quot;</span>, <span class="keyword">new</span> <span class="title class_">ConcretePrototypeB</span>());</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(String key, Prototype prototype)</span> &#123;</span><br><span class="line">        prototypeTable.put(key,prototype);</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Prototype <span class="title function_">get</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="type">Prototype</span> <span class="variable">clone</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        clone = ((Prototype) prototypeTable.get(key)).clone(); <span class="comment">//通过克隆方法创建新对象</span></span><br><span class="line">        <span class="keyword">return</span> clone;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="模式优缺点及适用环境-3"><a href="#模式优缺点及适用环境-3" class="headerlink" title="模式优缺点及适用环境"></a>模式优缺点及适用环境</h4><p><code>模型优点</code></p><ul><li>简化对象的创建过程，通过复制一个已有实例可以提高新实例的创建效率</li><li>拓展性较好</li><li>提供了简化的创建建构，原型模式中产品的复制是通过封装在原型类中的克隆方法实现的，无须专门的工厂类来创建产品</li><li>可以使用深克隆的方式保存对象的状态，以便在需要的时候使用，可辅助实现撤销操作</li></ul><p><code>模式缺点</code></p><ul><li>需要为每一个类配备一个克隆方法，而且该克隆方法位于一个类的内部，当对已有的类进行改造时，需要修改源代码，违背了开闭原则</li><li>在实现深克隆时需要编写较为复杂的代码，而且当对象之间存在多重的嵌套引用时，为了实现深克隆，每一层对象对应的类都必须支持深克隆，实现起来可能会比较麻烦</li></ul><p><code>模式适用环境</code></p><ul><li>创建新对象成本较大，新对象可以通过复制已有对象来获得，如果是相似对象，则可以对其成员变量稍作修改</li><li>系统要保存对象的状态，而对象的状态变化很小</li><li>需要避免使用分层次的工厂类来创建分层次的对象</li><li>Ctrl + C -&gt; Ctrl + V</li></ul><h3 id="单例模式-Singleton-Pattern"><a href="#单例模式-Singleton-Pattern" class="headerlink" title="单例模式(Singleton Pattern)"></a>单例模式(Singleton Pattern)</h3><p><code>对象创建型模式</code></p><h4 id="定义-11"><a href="#定义-11" class="headerlink" title="定义"></a>定义</h4><ul><li><p>确保一个类只有一个实例，并提供一个全局访问点来访问这个唯一实例</p></li><li><p>某个类只能有一个实例</p></li><li><p>必须自行创建这个实例</p></li><li><p>必须自行向整个系统提供这个实例</p></li></ul><h4 id="UML结构-4"><a href="#UML结构-4" class="headerlink" title="UML结构"></a>UML结构</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20231228181503221.png" alt="image-20231228181503221"></p><ul><li>Singleton（单例）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//单例模式只包含一个单例对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Singleton instance=<span class="literal">null</span>;  <span class="comment">//静态私有成员变量</span></span><br><span class="line">     </span><br><span class="line">     <span class="comment">//私有构造函数</span></span><br><span class="line"><span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">//静态公有工厂方法，返回唯一实例</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(instance==<span class="literal">null</span>)</span><br><span class="line">    instance=<span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="饿汉式单例和懒汉式单例"><a href="#饿汉式单例和懒汉式单例" class="headerlink" title="饿汉式单例和懒汉式单例"></a>饿汉式单例和懒汉式单例</h4><ul><li><code>饿汉式单例类(Eager Singleton)</code></li></ul><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20231228181528401.png" alt="image-20231228181528401"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EagerSingleton</span> &#123; </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">EagerSingleton</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EagerSingleton</span>(); </span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">EagerSingleton</span><span class="params">()</span> &#123; &#125; </span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> EagerSingleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> instance; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>懒汉式单例类(Lazy Singleton)</code></li></ul><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20231228181545784.png" alt="image-20231228181545784"></p><h4 id="延迟加载"><a href="#延迟加载" class="headerlink" title="延迟加载"></a>延迟加载</h4><p>​也称为懒加载，也叫延迟实例化、延迟初始化等，主要表达的思想就是：把对象的创建延迟到使用的时候创建，而不是对象实例化的时候创建。延迟加载机制是为了避免一些无谓的性能开销而提出来的，这种方式避免了性能的浪费。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LazySingleton</span> &#123; </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">LazySingleton</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="literal">null</span>; </span><br><span class="line"> </span><br><span class="line"><span class="keyword">private</span> <span class="title function_">LazySingleton</span><span class="params">()</span> &#123; &#125; </span><br><span class="line"> </span><br><span class="line">    <span class="comment">//多个线程同时访问将导致创建多个单例对象！怎么办？</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> LazySingleton <span class="title function_">getInstance</span><span class="params">()</span> &#123; </span><br><span class="line"><span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">instance = <span class="keyword">new</span> <span class="title class_">LazySingleton</span>();<span class="comment">//需要较长时间 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> instance; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="锁方法"><a href="#锁方法" class="headerlink" title="锁方法"></a>锁方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LazySingleton</span> &#123; </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">LazySingleton</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="literal">null</span>; </span><br><span class="line"> </span><br><span class="line"><span class="keyword">private</span> <span class="title function_">LazySingleton</span><span class="params">()</span> &#123; &#125; </span><br><span class="line"> </span><br><span class="line"><span class="keyword">synchronized</span> <span class="keyword">public</span> <span class="keyword">static</span> LazySingleton <span class="title function_">getInstance</span><span class="params">()</span> &#123; </span><br><span class="line"><span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">instance = <span class="keyword">new</span> <span class="title class_">LazySingleton</span>(); </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> instance; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="锁代码段"><a href="#锁代码段" class="headerlink" title="锁代码段"></a>锁代码段</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> LazySingleton <span class="title function_">getInstance</span><span class="params">()</span> &#123; </span><br><span class="line">    <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (LazySingleton.class) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> <span class="title class_">LazySingleton</span>(); </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> instance; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="双重检查锁定-Double-Check-Locking"><a href="#双重检查锁定-Double-Check-Locking" class="headerlink" title="双重检查锁定(Double-Check Locking)"></a>双重检查锁定(Double-Check Locking)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LazySingleton</span> &#123; </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> <span class="type">LazySingleton</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="literal">null</span>; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">LazySingleton</span><span class="params">()</span> &#123; &#125; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> LazySingleton <span class="title function_">getInstance</span><span class="params">()</span> &#123; </span><br><span class="line">        <span class="comment">//第一重判断</span></span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//锁定代码块</span></span><br><span class="line">            <span class="keyword">synchronized</span> (LazySingleton.class) &#123;</span><br><span class="line">                <span class="comment">//第二重判断</span></span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> <span class="title class_">LazySingleton</span>(); <span class="comment">//创建单例实例</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> instance; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="饿汉式单例类与懒汉式单例类的比较"><a href="#饿汉式单例类与懒汉式单例类的比较" class="headerlink" title="饿汉式单例类与懒汉式单例类的比较"></a>饿汉式单例类与懒汉式单例类的比较</h4><ul><li><p>饿汉式单例类</p><p>无须考虑多个线程同时访问的问题；调用速度和反应时间优于懒汉式单例；资源利用效率不及懒汉式单例；系统加载时间可能会比较长</p></li><li><p>懒汉单例类</p><p>实现了延迟加载；必须处理好多个线程同时访问的问题；需通过双重检查锁定等机制进行控制，将导致系统性能受到一定影响</p></li></ul><h4 id="使用静态内部类实现单例模式"><a href="#使用静态内部类实现单例模式" class="headerlink" title="使用静态内部类实现单例模式"></a>使用静态内部类实现单例模式</h4><ul><li>Java中最好的实现方式</li><li>Initialization on Demand Holder(IoDH)：使用静态内部类(static inner class)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Initialization on Demand Holder</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//静态内部类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">HolderClass</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> HolderClass.instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">Singleton s1, s2; </span><br><span class="line">s1 = Singleton.getInstance();</span><br><span class="line">s2 = Singleton.getInstance();</span><br><span class="line">System.out.println(s1==s2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="模式优缺点及适用环境-4"><a href="#模式优缺点及适用环境-4" class="headerlink" title="模式优缺点及适用环境"></a>模式优缺点及适用环境</h4><p><code>模式优点</code></p><ul><li>提供了对唯一实例的受控访问</li><li>可以节约系统资源，提高系统的性能</li><li>允许可变数目的实例（多例类）</li></ul><p><code>模式缺点</code></p><ul><li>拓展困难（缺少抽象层）</li><li>单例类的职责过重</li><li>由于自动垃圾回收机制，可能会导致共享的单例对象的状态丢失</li></ul><p><code>模式适用环境</code></p><ul><li>系统只需要一个实例对象，或者因为资源消耗过大而只允许创建一个对象</li><li>客户调用类的单个实例只允许使用一个公共访问点，除了该公共访问点，不能通过其他途径访问该实例</li></ul><h2 id="结构型模式"><a href="#结构型模式" class="headerlink" title="结构型模式"></a>结构型模式</h2><p>**结构型模式(Structural Pattern)**关注如何将现有类或对象组织在一起形成更加强大的结构</p><ul><li><p>类结构型模式</p><p><strong>关注类的组合</strong>，由多个类组合成一个更大的系统，在类结构型模式中一般只存在<strong>继承关系和实现关系</strong></p></li><li><p>对象结构型模式</p><p><strong>关注类与对象的组合</strong>，通过<strong>关联关系</strong>，在一个类中定义另一个类的实例对象，然后通过该对象调用相应的方法</p></li></ul><h3 id="适配器模式-Adapter-Pattern"><a href="#适配器模式-Adapter-Pattern" class="headerlink" title="适配器模式(Adapter Pattern)"></a>适配器模式(Adapter Pattern)</h3><p><code>对象结构型模式/类结构型模式</code></p><h4 id="定义-12"><a href="#定义-12" class="headerlink" title="定义"></a>定义</h4><ul><li><p>将一个类的接口转换成客户希望的另一个接口。适配器模式让那些接口不兼容的类可以一起工作</p></li><li><p>别名为<strong>包装器（Wrapper）模式</strong></p></li><li><p>定义中所提及的接口是指广义的接口，它可以表示一个方法或者方法的集合</p></li></ul><h4 id="UML结构-5"><a href="#UML结构-5" class="headerlink" title="UML结构"></a>UML结构</h4><ul><li><p>类适配器<br><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20231228181658323.png" alt="image-20231228181658323"></p></li><li><p>对象适配器<br><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20231228181711944.png" alt="image-20231228181711944"></p></li><li><p>Target（目标抽象类）</p></li><li><p>Adapter（适配器类）</p></li><li><p>Adaptee（适配者类）</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//典型的类适配器代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Adapter</span> <span class="keyword">extends</span> <span class="title class_">Adaptee</span> <span class="keyword">implements</span> <span class="title class_">Target</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">request</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.specificRequest();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//典型的对象适配器代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Adapter</span> <span class="keyword">extends</span> <span class="title class_">Target</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Adaptee adaptee; <span class="comment">//维持一个对适配者对象的引用</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Adapter</span><span class="params">(Adaptee adaptee)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.adaptee=adaptee;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">request</span><span class="params">()</span> &#123;</span><br><span class="line">        adaptee.specificRequest(); <span class="comment">//转发调用</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="缺省适配器模式-Default-Adapter-Pattern"><a href="#缺省适配器模式-Default-Adapter-Pattern" class="headerlink" title="缺省适配器模式(Default Adapter Pattern)"></a>缺省适配器模式(Default Adapter Pattern)</h4><h5 id="定义-13"><a href="#定义-13" class="headerlink" title="定义"></a>定义</h5><p>当不需要实现一个接口所提供的所有方法时，可先设计一个抽象类实现该接口，并为接口中每个方法提供一个默认实现（空方法），那么该抽象类的子类可以选择性地覆盖父类的某些方法来实现需求，它适用于不想使用一个接口中的所有方法的情况，又称为单接口适配器模式。</p><h5 id="UML结构-6"><a href="#UML结构-6" class="headerlink" title="UML结构"></a>UML结构</h5><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20231228181759335.png" alt="image-20231228181759335"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//缺省适配器类的典型代码片段</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractServiceClass</span> <span class="keyword">implements</span> <span class="title class_">ServiceInterface</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">serviceMethod1</span><span class="params">()</span> &#123;  &#125;  <span class="comment">//空方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">serviceMethod2</span><span class="params">()</span> &#123;  &#125;  <span class="comment">//空方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">serviceMethod3</span><span class="params">()</span> &#123;  &#125;  <span class="comment">//空方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="双向适配器"><a href="#双向适配器" class="headerlink" title="双向适配器"></a>双向适配器</h4><h5 id="UML结构-7"><a href="#UML结构-7" class="headerlink" title="UML结构"></a>UML结构</h5><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20231228181817485.png" alt="image-20231228181817485"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//双向适配器典型代码片段</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Adapter</span> <span class="keyword">implements</span> <span class="title class_">Target</span>,Adaptee &#123;</span><br><span class="line">    <span class="keyword">private</span> Target target;</span><br><span class="line">    <span class="keyword">private</span> Adaptee adaptee;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Adapter</span><span class="params">(Target target)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Adapter</span><span class="params">(Adaptee adaptee)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.adaptee = adaptee;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">request</span><span class="params">()</span> &#123;</span><br><span class="line">        adaptee.specificRequest();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">specificRequest</span><span class="params">()</span> &#123;</span><br><span class="line">        target.request();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="模式优缺点及适用环境-5"><a href="#模式优缺点及适用环境-5" class="headerlink" title="模式优缺点及适用环境"></a>模式优缺点及适用环境</h4><p><code>模式优点</code></p><ul><li>将目标类和适配者类解耦，通过引入一个适配器类来重用现有的适配者类，无须修改原有结构</li><li>增加了类的透明性和复用性，提高了适配者的复用性，同一个适配者类可以在多个不同的系统中复用</li><li>灵活性和拓展性非常好</li><li><strong>类适配器模式</strong>：置换一些适配者的方法很方便</li><li><strong>对象适配器模式</strong>：可以把多个不同的适配者适配到同一个目标，还可以适配一个适配者的子类</li></ul><p><code>模式缺点</code></p><ul><li><strong>类适配器模式</strong><ul><li>一次最多只能适配一个适配者类，不能同时适配多个适配者</li><li>适配者类不能为最终类</li><li>目标抽象类只能为接口，不能为类</li></ul></li><li><strong>对象适配器模式</strong><ul><li>在适配器中置换适配者类的某些方法比较麻烦</li></ul></li></ul><p><code>模式适用环境</code></p><ul><li>系统需要使用一些现有的类，而这些类的接口不符合系统的需要，甚至没有这些类的源代码</li><li>创建一个可以重复使用的类，用于和一些彼此之间没有太大关联的类，包括一些可能在将来引进的类一起工作</li></ul><h3 id="桥接模式-Bridge-Pattern"><a href="#桥接模式-Bridge-Pattern" class="headerlink" title="桥接模式(Bridge Pattern)"></a>桥接模式(Bridge Pattern)</h3><p><code>对象结构型模式</code></p><h4 id="定义-14"><a href="#定义-14" class="headerlink" title="定义"></a>定义</h4><ul><li><p>将抽象部分与它的实现部分解耦，使得两者都能够独立变化</p></li><li><p>又被称为柄体（Handle and Body）模式或接口（Interface）模式</p></li><li><p>用抽象关联取代了传统的多层继承</p></li><li><p>将类之间的静态继承关系转换为动态的对象组合关系</p></li></ul><h4 id="UML结构-8"><a href="#UML结构-8" class="headerlink" title="UML结构"></a>UML结构</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20231228181922809.png" alt="image-20231228181922809"></p><ul><li>Abstraction（抽象类）</li><li>RefinedAbstraction（扩充抽象类）</li><li>Implementor（实现类接口）</li><li>ConcreteImplementor（具体实现类）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//典型的实现类接口代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Implementor</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operationImpl</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//典型的具体实现类代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConcreteImplementor</span> <span class="keyword">implements</span> <span class="title class_">Implementor</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operationImpl</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//具体业务方法的实现</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//典型的抽象类代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Abstraction</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> Implementor impl;<span class="comment">//实现定义类接口对象</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setImpl</span><span class="params">(Implementor impl)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.impl = impl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">operation</span><span class="params">()</span>;<span class="comment">//声明抽象业务方法</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//典型的扩充抽象类（细化抽象类）代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RefinedAbstraction</span> <span class="keyword">extends</span> <span class="title class_">Abstraction</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operation</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//业务代码</span></span><br><span class="line">        impl.operationImpl();<span class="comment">//调用实现类的方法</span></span><br><span class="line">        <span class="comment">//业务代码</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="模式优缺点及适用环境-6"><a href="#模式优缺点及适用环境-6" class="headerlink" title="模式优缺点及适用环境"></a>模式优缺点及适用环境</h4><p><code>模式优点</code></p><ul><li>分离抽象接口及其实现部分</li><li>可以取代多层继承方案，极大地减少了子类的个数</li><li>提高了系统的可扩展性，在两个变化维度中任意拓展一个维度，不需要修改原有系统，符合开闭原则</li></ul><p><code>模式缺点</code></p><ul><li>会增加系统的理解与设计难度，由于关联关系建立在抽象层，要求开发者一开始就针对抽象层进行设计与编程</li><li>正确识别出系统中两个独立变化的维度并不是一件容易的事情</li></ul><p><code>模式适用环境</code></p><ul><li>需要在抽象化和具体化之间增加更多的灵活性，避免在两个层次之间建立静态的继承关系</li><li>抽象部分和实现部分可以以继承的方式独立扩展而互不影响</li><li>一个类存在两个（或多个）独立变化的维度，且这两个（或多个）维度都需要独立地进行扩展</li><li>不希望使用继承或因为多层继承导致系统类的个数急剧增加的系统</li></ul><h3 id="组合模式-Composite-Pattern"><a href="#组合模式-Composite-Pattern" class="headerlink" title="组合模式(Composite Pattern)"></a>组合模式(Composite Pattern)</h3><p><code>对象结构型模式</code></p><h4 id="分析-7"><a href="#分析-7" class="headerlink" title="分析"></a>分析</h4><ul><li>在树形目录结构中，包含文件和文件夹两类不同的元素<ul><li>在文件夹中可以包含文件，还可以继续包含子文件夹</li><li>在文件中不能再包含子文件或者子文件夹</li></ul></li><li>文件夹 &lt;——&gt; 容器(Container)</li><li>文件 &lt;——&gt; 叶子(Leaf)</li><li>当容器对象的某一个方法被调用时，将遍历整个树形结构，寻找也包含这个方法的成员对象并调用执行，牵一而动百，其中使用了<strong>递归调用的机制</strong>来对整个结构进行处理</li><li>由于容器对象和叶子对象在功能上的区别，在使用这些对象的代码中必须有区别地对待容器对象和叶子对象，而实际上大多数情况下客户端希望一致地处理它们，因为对于这些对象的区别对待将会使程序非常复杂</li></ul><h4 id="定义-15"><a href="#定义-15" class="headerlink" title="定义"></a>定义</h4><ul><li><p>组合多个对象形成<strong>树形结构</strong>以表示<strong>具有部分-整体关系的层次结构</strong>。组合模式让客户端可以<strong>统一</strong>对待单个对象和组合对象</p></li><li><p>又称为<strong>部分-整体(Part-Whole)模式</strong></p></li><li><p>将对象组织到<strong>树形结构</strong>中，可以用来描述整体与部分的关系</p></li></ul><h4 id="UML结构-9"><a href="#UML结构-9" class="headerlink" title="UML结构"></a>UML结构</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20231228182039402.png" alt="image-20231228182039402"></p><ul><li>Component（抽象构件）</li><li>Leaf（叶子构件）</li><li>Composite（容器构件）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//抽象构件角色典型代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Component</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Component c)</span>; <span class="comment">//增加成员</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(Component c)</span>; <span class="comment">//删除成员</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> Component <span class="title function_">getChild</span><span class="params">(<span class="type">int</span> i)</span>; <span class="comment">//获取成员</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">operation</span><span class="params">()</span>;  <span class="comment">//业务方法</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//叶子构件角色典型代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Leaf</span> <span class="keyword">extends</span> <span class="title class_">Component</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Component c)</span> &#123; </span><br><span class="line">        <span class="comment">//异常处理或错误提示</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(Component c)</span> &#123; </span><br><span class="line">        <span class="comment">//异常处理或错误提示</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Component <span class="title function_">getChild</span><span class="params">(<span class="type">int</span> i)</span> &#123; </span><br><span class="line">        <span class="comment">//异常处理或错误提示</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operation</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//叶子构件具体业务方法的实现</span></span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//容器构件角色典型代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Composite</span> <span class="keyword">extends</span> <span class="title class_">Component</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;Component&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Component&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Component c)</span> &#123;</span><br><span class="line">        list.add(c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(Component c)</span> &#123;</span><br><span class="line">        list.remove(c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Component <span class="title function_">getChild</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (Component)list.get(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operation</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//容器构件具体业务方法的实现，将递归调用成员构件的业务方法</span></span><br><span class="line">        <span class="keyword">for</span>(Object obj:list) &#123;</span><br><span class="line">            ((Component)obj).operation();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="模式优缺点及适用环境-7"><a href="#模式优缺点及适用环境-7" class="headerlink" title="模式优缺点及适用环境"></a>模式优缺点及适用环境</h4><p><code>模式优点</code></p><ul><li>可以清楚地定义分层次的复杂对象，表示对象的全部或部分层次，让客户端忽略了层次的差异，方便对整个层次结构进行控制</li><li>客户端可以一致地使用一个组合结构或其中单个对象，不必关心处理的是单个对象还是整个组合结构，简化了客户端代码</li><li>增加新的容器构件和叶子构件都很方便，符合开闭原则</li><li>为树形结构的面向对象实现提供了一种灵活的解决方案</li></ul><p><code>模式缺点</code></p><ul><li>在增加新构件时很难对容器中的构件类型进行限制</li></ul><p><code>模式适用环境</code></p><ul><li>在具有整体和部分的层次结构中，希望通过一种方式忽略整体与部分的差异，客户端可以一致地对待它们</li><li>在一个使用面向对象语言开发的系统中需要处理一个树形结构</li><li>在一个系统中能够分离出叶子对象和容器对象，而且它们的类型不固定，需要增加一些新的类型</li></ul><h3 id="装饰模式-Decorator-Pattern"><a href="#装饰模式-Decorator-Pattern" class="headerlink" title="装饰模式(Decorator Pattern)"></a>装饰模式(Decorator Pattern)</h3><p><code>对象结构型模式</code></p><h4 id="分析-8"><a href="#分析-8" class="headerlink" title="分析"></a>分析</h4><ul><li>可以在不改变一个对象本身功能的基础上给对象增加额外的新行为</li><li>是一种用于替代继承的技术，它通过一种无须定义子类的方式给对象动态增加职责，使用对象之间的关联关系取代类之间的继承关系</li><li>引入了装饰类，在装饰类中既可以调用待装饰的原有类的方法，还可以增加新的方法，以扩展原有类的功能</li></ul><h4 id="定义-16"><a href="#定义-16" class="headerlink" title="定义"></a>定义</h4><ul><li><strong>动态地</strong>给一个对象增加一些额外的职责。就扩展功能而言。装饰模式提供了一种<strong>比使用子类更加灵活的替代方案</strong></li><li>以对客户透明的方式<strong>动态地给一个对象附加上更多的责任</strong></li><li>可以在不需要创建更多子类的情况下，让对象的功能得以扩展</li></ul><h4 id="UML结构-10"><a href="#UML结构-10" class="headerlink" title="UML结构"></a>UML结构</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20231228182125436.png" alt="image-20231228182125436"></p><ul><li>Component（抽象构件）</li><li>ConcreteComponent（具体构件）</li><li>Decorator（抽象装饰类）</li><li>ConcreteDecorator（具体装饰类）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//抽象构件类典型代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Component</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">operation</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//具体构件类典型代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConcreteComponent</span>  <span class="keyword">extends</span> <span class="title class_">Component</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operation</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//实现基本功能    </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//抽象装饰类典型代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Decorator</span> <span class="keyword">extends</span> <span class="title class_">Component</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Component component; <span class="comment">//维持一个对抽象构件对象的引用</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//注入一个抽象构件类型的对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Decorator</span><span class="params">(Component component)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.component=component;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operation</span><span class="params">()</span> &#123;</span><br><span class="line">        component.operation();  <span class="comment">//调用原有业务方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//具体装饰类典型代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConcreteDecorator</span> <span class="keyword">extends</span> <span class="title class_">Decorator</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ConcreteDecorator</span><span class="params">(Component component)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(component); </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operation</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.operation(); <span class="comment">//调用原有业务方法</span></span><br><span class="line">        addedBehavior(); <span class="comment">//调用新增业务方法</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//新增业务方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addedBehavior</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//......</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="透明（Transparent）装饰模式"><a href="#透明（Transparent）装饰模式" class="headerlink" title="透明（Transparent）装饰模式"></a>透明（Transparent）装饰模式</h4><ul><li>要求客户端完全针对抽象编程，装饰模式的透明性要求客户端程序不应该将对象声明为具体构件类型或具体装饰类型，而应该全部声明为抽象构件类型</li><li>对客户端而言，具体构件对象和具体装饰对象没有任何区别</li><li>可以让客户端透明地使用装饰之前的对象和装饰之后的对象，无须关心它们的区别</li><li>可以对一个已装饰过的对象进行多次装饰，得到更为复杂、功能更为强大的对象</li><li>无法在客户端单独调用新增方法addedBehavior()</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//......</span></span><br><span class="line">Component component_o,component_d1,component_d2; <span class="comment">//全部使用抽象构件定义</span></span><br><span class="line">component_o = <span class="keyword">new</span> <span class="title class_">ConcreteComponent</span>();</span><br><span class="line">component_d1 = <span class="keyword">new</span> <span class="title class_">ConcreteDecorator1</span>(component_o);</span><br><span class="line">component_d2 = <span class="keyword">new</span> <span class="title class_">ConcreteDecorator2</span>(component_d1);</span><br><span class="line">component_d2.operation();</span><br><span class="line"><span class="comment">//无法单独调用component_d2的addedBehavior()方法</span></span><br><span class="line"><span class="comment">//......</span></span><br></pre></td></tr></table></figure><h4 id="半透明（Semi-transparent）装饰模式"><a href="#半透明（Semi-transparent）装饰模式" class="headerlink" title="半透明（Semi-transparent）装饰模式"></a>半透明（Semi-transparent）装饰模式</h4><ul><li>用具体装饰类型来定义装饰之后的对象，而具体构件使用抽象构件类型来定义</li><li>对于客户端而言，具体构件类型无须关心，是透明的；但是具体装饰类型必须指定，这是不透明的</li><li>可以给系统带来更多的灵活性，设计相对简单，使用起来也非常方便</li><li>客户端使用具体装饰类型来定义装饰后的对象，因此可以单独调用addedBehavior()方法</li><li>最大的缺点在于不能实现对同一个对象的多次装饰，而且客户端需要有区别地对待装饰之前的对象和装饰之后的对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//......</span></span><br><span class="line">Component component_o; <span class="comment">//使用抽象构件类型定义</span></span><br><span class="line">component_o = <span class="keyword">new</span> <span class="title class_">ConcreteComponent</span>();</span><br><span class="line">component_o.operation();</span><br><span class="line">ConcreteDecorator component_d; <span class="comment">//使用具体装饰类型定义</span></span><br><span class="line">component_d = <span class="keyword">new</span> <span class="title class_">ConcreteDecorator</span>(component_o);</span><br><span class="line">component_d.operation();</span><br><span class="line">component_d.addedBehavior(); <span class="comment">//单独调用新增业务方法</span></span><br><span class="line"><span class="comment">//......</span></span><br></pre></td></tr></table></figure><h4 id="模式优缺点及适用环境-8"><a href="#模式优缺点及适用环境-8" class="headerlink" title="模式优缺点及适用环境"></a>模式优缺点及适用环境</h4><p><code>模式优点</code></p><ul><li>对于扩展一个对象的功能，装饰模式比继承更加灵活，不会导致类的个数急剧增加</li><li>可以通过一种动态的方式来扩展一个对象的功能，通过配置文件可以在运行时选择不同的具体装饰类，从而实现不同的行为</li><li>可以对一个对象进行多次装饰</li><li>具体构件类与具体装饰类可以独立变化，用户可以根据需要增加新的具体构件类和具体装饰类，且原有类库代码无须改变，符合开闭原则</li></ul><p><code>模式缺点</code></p><ul><li>使用装饰模式进行系统设计时将产生很多小对象，大量小对象的产生势必会占用更多的系统资源，在一定程度上影响程序的性能</li><li>比继承更加易于出错，排错也更困难，对于多次装饰的对象，调试时寻找错误可能需要逐级排查，较为烦琐</li></ul><p><code>模式适用环境</code></p><ul><li>在不影响其他对象的情况下，以动态、透明的方式给单个对象添加职责</li><li>当不能采用继承的方式对系统进行扩展或者采用继承不利于系统扩展和维护时可以使用装饰模式</li></ul><h3 id="外观模式-Facade-Pattern"><a href="#外观模式-Facade-Pattern" class="headerlink" title="外观模式(Facade Pattern)"></a>外观模式(Facade Pattern)</h3><p><code>对象结构型模式</code></p><h4 id="分析-9"><a href="#分析-9" class="headerlink" title="分析"></a>分析</h4><ul><li>一个客户类需要和多个业务类交互，而这些需要交互的业务类经常会作为一个整体出现</li><li>引入一个新的外观类(Facade)来负责和多个业务类【子系统(Subsystem)】进行交互，而客户类只需与外观类交互</li><li>为多个业务类的调用提供了一个统一的入口，简化了类与类之间的交互</li><li>没有外观类：每个客户类需要和多个子系统之间进行复杂的交互，系统的耦合度将很大</li><li>引入外观类：客户类只需要直接与外观类交互，客户类与子系统之间原有的复杂引用关系由外观类来实现，从而降低了系统的耦合度</li></ul><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20231228182222104.png" alt="image-20231228182222104"></p><ul><li>一个子系统的外部与其内部的通信通过一个统一的外观类进行，外观类将客户类与子系统的内部复杂性分隔开，使得客户类只需要与外观角色打交道，而不需要与子系统内部的很多对象打交道</li><li>为复杂子系统提供了一个简单的访问入口</li></ul><h4 id="定义-17"><a href="#定义-17" class="headerlink" title="定义"></a>定义</h4><ul><li>为子系统中的一组接口提供一个<strong>统一的入口</strong>。外观模式定义了<strong>一个高层接口</strong>，这个接口使得这一子系统更加容易使用</li><li>又称为<strong>门面模式</strong></li><li>是<strong>迪米特法则</strong>的一种具体实现</li><li>通过引入一个新的外观角色来降低原有系统的复杂度，同时降低客户类与子系统的耦合度</li><li>所指的子系统是一个广义的概念，它可以是一个类、一个功能模块、系统的一个组成部分或者一个完整的系统</li></ul><h4 id="UML结构-11"><a href="#UML结构-11" class="headerlink" title="UML结构"></a>UML结构</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20231228182247053.png" alt="image-20231228182247053"></p><ul><li>Facade（外观角色）</li><li>SubSystem（子系统角色）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SubSystemA</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">methodA</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//业务实现代码</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SubSystemB</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">methodB</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//业务实现代码</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SubSystemC</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">methodC</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//业务实现代码</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//外观类典型代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Facade</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">SubSystemA</span> <span class="variable">obj1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SubSystemA</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">SubSystemB</span> <span class="variable">obj2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SubSystemB</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">SubSystemC</span> <span class="variable">obj3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SubSystemC</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> &#123;</span><br><span class="line">        obj1.method();</span><br><span class="line">        obj2.method();</span><br><span class="line">        obj3.method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//客户类典型代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">        <span class="type">Facade</span> <span class="variable">facade</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Facade</span>();</span><br><span class="line">        facade.method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="模式优缺点及适用环境-9"><a href="#模式优缺点及适用环境-9" class="headerlink" title="模式优缺点及适用环境"></a>模式优缺点及适用环境</h4><p><code>模式优点</code></p><ul><li>它对客户端屏蔽了子系统组件，减少了客户端所需处理的对象数目，并使得子系统使用起来更加容易</li><li>它实现了子系统与客户端之间的松耦合关系，这使得子系统的变化不会影响到调用它的客户端，只需要调整外观类即可</li><li>一个子系统的修改对其他子系统没有任何影响，而且子系统的内部变化也不会影响到外观对象</li></ul><p><code>模式缺点</code></p><ul><li>不能很好地限制客户端直接使用子系统类，如果对客户端访问子系统类做太多的限制则减少了可变性和灵活性</li><li>如果设计不当，增加新的子系统可能需要修改外观类的源代码，违背了开闭原则</li></ul><p><code>模式适用环境</code></p><ul><li>要为访问一系列复杂的子系统提供一个简单入口</li><li>客户端程序与多个子系统之间存在很大的依赖性</li><li>在层次化结构中，可以使用外观模式的定义系统中每一层的入口，层与层之间不直接产生联系，而是通过外观类建立联系，降低层之间的耦合度</li></ul><h3 id="享元模式-Flyweight-Pattern"><a href="#享元模式-Flyweight-Pattern" class="headerlink" title="享元模式(Flyweight Pattern)"></a>享元模式(Flyweight Pattern)</h3><p><code>对象结构型模式</code></p><h4 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h4><ul><li>如果一个软件系统在运行时所创建的相同或相似对象数量太多，将导致运行代价过高，带来系统资源浪费、性能下降等问题</li><li>如何避免系统中出现大量相同或相似的对象，同时又不影响客户端程序通过面向对象的方式对这些对象进行操作呢？</li></ul><p><code>字符享元对象示意图</code></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20231228182326932.png" alt="image-20231228182326932"></p><h4 id="分析-10"><a href="#分析-10" class="headerlink" title="分析"></a>分析</h4><ul><li>享元模式：通过<strong>共享技术</strong>实现相同或相似对象的<strong>重用</strong></li><li>享元池(Flyweight Pool)：存储共享实例对象的地方</li><li>内部状态(Intrinsic State)：存储在享元对象内部并且不会随环境改变而改变的状态，内部状态可以共享（例如：字符的内容）</li><li>外部状态(Extrinsic State)：随环境改变而改变的、不可以共享的状态。享元对象的外部状态通常由客户端保存，并在享元对象被创建之后，需要使用的时候再传入到享元对象内部。一个外部状态与另一个外部状态之间是相互独立的（例如：字符的颜色和大小）</li></ul><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><ul><li>将具有相同内部状态的对象存储在享元池中，享元池中的对象是可以实现共享的</li><li>需要的时候将对象从享元池中取出，即可实现对象的复用</li><li>通过向取出的对象注入不同的外部状态，可以得到一系列相似的对象，而这些对象在内存中实际上只存储一份</li></ul><h4 id="定义-18"><a href="#定义-18" class="headerlink" title="定义"></a>定义</h4><ul><li>运用<strong>共享技术</strong>有效地支持大量细粒度对象的复用</li><li>又称为<strong>轻量级模式</strong></li><li>要求能够被共享的对象必须是细粒度对象</li></ul><h4 id="UML结构-12"><a href="#UML结构-12" class="headerlink" title="UML结构"></a>UML结构</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20231228182353320.png" alt="image-20231228182353320"></p><ul><li>Flyweight（抽象享元类）</li><li>ConcreteFlyweight（具体享元类）</li><li>UnsharedConcreteFlyweight（非共享具体享元类）</li><li>FlyweightFactory（享元工厂类）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//典型的抽象享元类代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Flyweight</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">operation</span><span class="params">(String extrinsicState)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//典型的具体享元类代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConcreteFlyweight</span> <span class="keyword">extends</span> <span class="title class_">Flyweight</span> &#123;</span><br><span class="line">    <span class="comment">//内部状态intrinsicState作为成员变量，同一个享元对象其内部状态是一致的</span></span><br><span class="line">    <span class="keyword">private</span> String intrinsicState;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ConcreteFlyweight</span><span class="params">(String intrinsicState)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.intrinsicState = intrinsicState;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//外部状态extrinsicState在使用时由外部设置，不保存在享元对象中，即使是同一个对象，在每一次调用时可以传入不同的外部状态</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operation</span><span class="params">(String extrinsicState)</span> &#123;</span><br><span class="line">        <span class="comment">//实现业务方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//典型的非共享具体享元类代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UnsharedConcreteFlyweight</span> <span class="keyword">extends</span> <span class="title class_">Flyweight</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operation</span><span class="params">(String extrinsicState)</span> &#123;</span><br><span class="line">        <span class="comment">//实现业务方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//典型的享元工厂类代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FlyweightFactory</span> &#123;</span><br><span class="line">    <span class="comment">//定义一个HashMap用于存储享元对象，实现享元池</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">HashMap</span> <span class="variable">flyweights</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Flyweight <span class="title function_">getFlyweight</span><span class="params">(String key)</span> &#123;</span><br><span class="line">       <span class="comment">//如果对象存在，则直接从享元池获取</span></span><br><span class="line">       <span class="keyword">if</span> (flyweights.containsKey(key)) &#123;</span><br><span class="line">            <span class="keyword">return</span> (Flyweight)flyweights.get(key);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果对象不存在，先创建一个新的对象添加到享元池中，然后返回</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">Flyweight</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConcreteFlyweight</span>();</span><br><span class="line">            flyweights.put(key,fw);</span><br><span class="line">            <span class="keyword">return</span> fw;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="单纯享元模式"><a href="#单纯享元模式" class="headerlink" title="单纯享元模式"></a>单纯享元模式</h4><p>所有的具体享元类都是可以共享的，不存在非共享具体享元类</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20231228182414373.png" alt="image-20231228182414373"></p><h4 id="复合享元模式"><a href="#复合享元模式" class="headerlink" title="复合享元模式"></a>复合享元模式</h4><ul><li>将一些单纯享元对象使用组合模式加以组合</li><li>如果希望为多个内部状态不同的享元对象设置相同的外部状态，可以考虑使用复合享元模式</li></ul><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20231228182429073.png" alt="image-20231228182429073"></p><h4 id="模式优缺点及适用环境-10"><a href="#模式优缺点及适用环境-10" class="headerlink" title="模式优缺点及适用环境"></a>模式优缺点及适用环境</h4><p><code>模式优点</code></p><ul><li>可以减少内存中对象的数量，使得相同或者相似的对象在内存中只保存一份，从而可以节约系统资源，提高系统性能</li><li>外部状态相对独立，而且不会影响其内部状态，从而使得享元对象可以在不同的环境中被共享</li></ul><p><code>模式缺点</code></p><ul><li>使得系统变得复杂，需要分离出内部状态和外部状态，这使得程序的逻辑复杂化</li><li>为了使对象可以共享，享元模式需要将享元对象的部分状态外部化，而读取外部状态将使得运行时间变长</li></ul><p><code>模式适用环境</code></p><ul><li>一个系统有大量相同或者相似的对象，造成内存的大量耗费</li><li>对象的大部分状态都可以外部化，可以将这些外部状态传入对象中</li><li>在使用享元模式时需要维护一个存储享元对象的享元池，而这需要耗费一定的系统资源，因此，在需要多次重复使用享元对象时才值得使用享元模式</li></ul><h3 id="代理模式-Proxy-Pattern"><a href="#代理模式-Proxy-Pattern" class="headerlink" title="代理模式(Proxy Pattern)"></a>代理模式(Proxy Pattern)</h3><p><code>对象结构型模式</code></p><h4 id="分析-11"><a href="#分析-11" class="headerlink" title="分析"></a>分析</h4><ul><li>代购商品：顾客 -&gt; 代购网站 -&gt; 商品</li><li>软件开发：客户端 -&gt; 代理对象 -&gt; 真实对象</li></ul><h4 id="定义-19"><a href="#定义-19" class="headerlink" title="定义"></a>定义</h4><ul><li>给某一个对象提供<strong>一个代理或占位符</strong>，并由代理对象来控制对原对象的访问</li><li>引入一个新的<strong>代理对象</strong></li><li>代理对象<strong>在客户端对象和目标对象之间起到中介的作用</strong></li><li>去掉客户不能看到的内容和服务或者增添客户需要的额外的新服务</li></ul><h4 id="UML结构-13"><a href="#UML结构-13" class="headerlink" title="UML结构"></a>UML结构</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20231228182531237.png" alt="image-20231228182531237"></p><ul><li>Subject（抽象主题角色）</li><li>Proxy（代理主题角色）</li><li>RealSubject（真实主题角色）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//抽象主题类典型代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Subject</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">request</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//真实主题类典型代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RealSubject</span> <span class="keyword">extends</span> <span class="title class_">Subject</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">request</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//业务方法具体实现代码</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//代理类典型代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Proxy</span> <span class="keyword">extends</span> <span class="title class_">Subject</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">RealSubject</span> <span class="variable">realSubject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RealSubject</span>();  <span class="comment">//维持一个对真实主题对象的引用 </span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">preRequest</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//......</span></span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">request</span><span class="params">()</span> &#123;</span><br><span class="line">        preRequest();</span><br><span class="line">        realSubject.request();  <span class="comment">//调用真实主题对象的方法</span></span><br><span class="line">        postRequest();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postRequest</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//......</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="几种常见的代理模式"><a href="#几种常见的代理模式" class="headerlink" title="几种常见的代理模式"></a>几种常见的代理模式</h4><ul><li><p><strong>远程代理(Remote Proxy)<strong>：为一个位于不同的地址空间的对象提供一个本地的代理对象，这个不同的地址空间可以在同一台主机中，也可以在另一台主机中，远程代理又称为</strong>大使(Ambassador)</strong></p></li><li><p>**虚拟代理(Virtual Proxy)**：如果需要创建一个资源消耗较大的对象，先创建一个消耗相对较小的对象来表示，真实对象只在需要时才会被真正创建</p></li><li><p>**保护代理(Protect Proxy)**：控制对一个对象的访问，可以给不同的用户提供不同级别的使用权限</p></li><li><p>**缓冲代理(Cache Proxy)**：为某一个目标操作的结果提供临时的存储空间，以便多个客户端可以共享这些结果</p></li><li><p>**智能引用代理(Smart Reference Proxy)**：当一个对象被引用时，提供一些额外的操作，例如将对象被调用的次数记录下来等</p></li></ul><h4 id="模式优缺点及适用环境-11"><a href="#模式优缺点及适用环境-11" class="headerlink" title="模式优缺点及适用环境"></a>模式优缺点及适用环境</h4><p><code>模式优点</code></p><ul><li>能够协调调用者和被调用者，在一定程度上降低了系统的耦合度</li><li>客户端可以针对抽象主题角色进行编程，增加和更换代理类无须修改源代码，符合开闭原则，系统具有较好的灵活性和可扩展性</li></ul><p><code>逐个分析</code></p><ul><li><strong>远程代理</strong>：可以将一些消耗资源较多的对象和操作移至性能更好的计算机上，提高了系统的整体运行效率</li><li><strong>虚拟代理</strong>：通过一个消耗资源较少的对象来代表一个消耗资源较多的对象，可以在一定程度上节省系统的运行开销</li><li><strong>缓冲代理</strong>：为某一个操作的结果提供临时的缓存存储空间，以便在后续使用中能够共享这些结果，优化系统性能，缩短执行时间</li><li><strong>保护代理</strong>：可以控制对一个对象的访问权限，为不同用户提供不同级别的使用权限</li></ul><p><code>模式缺点</code></p><ul><li>由于在客户端和真实主题之间增加了代理对象，因此有些类型的代理模式可能会造成请求的处理速度变慢（例如保护代理）</li><li>实现代理模式需要额外的工作，而且有些代理模式的实现过程较为复杂（例如远程代理）</li></ul><p><code>模式适用环境</code></p><ul><li>当客户端对象需要访问远程主机中的对象时可以使用<strong>远程代理</strong></li><li>当需要用一个消耗资源较少的对象来代表一个消耗资源较多的对象，从而降低系统开销、缩短运行时间时可以使用<strong>虚拟代理</strong></li><li>当需要为某一个被频繁访问的操作结果提供一个临时存储空间，以供多个客户端共享访问这些结果时可以使用<strong>缓冲代理</strong></li><li>当需要控制对一个对象的访问，为不同用户提供不同级别的访问权限时可以使用<strong>保护代理</strong></li><li>当需要为一个对象的访问（引用）提供一些额外的操作时可以使用<strong>智能引用代理</strong></li></ul><h2 id="行为型模式"><a href="#行为型模式" class="headerlink" title="行为型模式"></a>行为型模式</h2><p>**行为型模式(Behavioral Pattern)**关注系统中对象之间的交互，研究系统在运行时对象之间的相互通信与协作，进一步明确对象的职责</p><p>行为型模式不仅仅关注类和对象本身，还重点关注它们之间的相互作用和职责划分</p><p><code>类行为型模式</code></p><p>使用<strong>继承关系</strong>在几个类之间分配行为，主要通过<strong>多态</strong>等方式来分配父类与子类的职责</p><p><code>对象行为型模式</code></p><p>使用对象的<strong>关联关系</strong>来分配行为，主要通过<strong>对象关联</strong>等方式来分配两个或多个类的职责</p><h3 id="职责链模式-Chain-of-Responsibility-Pattern"><a href="#职责链模式-Chain-of-Responsibility-Pattern" class="headerlink" title="职责链模式(Chain of Responsibility Pattern)"></a>职责链模式(Chain of Responsibility Pattern)</h3><p><code>对象行为型模式</code></p><h4 id="分析-12"><a href="#分析-12" class="headerlink" title="分析"></a>分析</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20231228174721790.png" alt="image-20231228174721790"></p><ul><li>辅导员、系主任、院长、校长可以处理奖学金申请表，他们构成一个处理申请表的链式结构，申请表沿着这条链进行传递，这条链就称为<strong>职责链</strong></li><li>职责链可以是<strong>一条直线、一个环或者一个树形结构</strong>，最常见的职责链是<strong>直线型</strong>，即沿着一条单向的链来传递请求</li></ul><h4 id="定义-20"><a href="#定义-20" class="headerlink" title="定义"></a>定义</h4><ul><li>避免将一个请求的发送者与接收者<strong>耦合</strong>在一起，<strong>让多个对象都有机会处理请求</strong>。将接收请求的对象连接成一条链，并且沿着这条链传递请求，直到有一个对象能够处理它为止</li><li>将<strong>请求的处理者组织成一条链</strong>，并<strong>让请求沿着链传递</strong>，由链上的处理者对请求进行相应的处理</li><li><strong>客户端无须关心请求的处理细节以及请求的传递</strong>，只需将请求发送到链上，将<strong>请求的发送者和请求的处理者解耦</strong></li></ul><h4 id="UML结构-14"><a href="#UML结构-14" class="headerlink" title="UML结构"></a>UML结构</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20231228175211376.png" alt="image-20231228175211376"></p><ul><li>Handler（抽象处理者）</li><li>ConcreteHandler（具体处理者）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//典型的抽象处理者代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Handler</span> &#123;</span><br><span class="line">    <span class="comment">//维持对下家的引用</span></span><br><span class="line">    <span class="keyword">protected</span> Handler successor;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSuccessor</span><span class="params">(Handler successor)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.successor=successor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">handleRequest</span><span class="params">(String request)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//典型的具体处理者代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConcreteHandler</span> <span class="keyword">extends</span> <span class="title class_">Handler</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleRequest</span><span class="params">(String request)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (请求满足条件) &#123;</span><br><span class="line">            <span class="comment">//处理请求</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.successor.handleRequest(request); <span class="comment">//转发请求</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//典型的客户端代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Handler handler1, handler2, handler3;</span><br><span class="line">handler1 = <span class="keyword">new</span> <span class="title class_">ConcreteHandlerA</span>();</span><br><span class="line">handler2 = <span class="keyword">new</span> <span class="title class_">ConcreteHandlerB</span>();</span><br><span class="line">handler3 = <span class="keyword">new</span> <span class="title class_">ConcreteHandlerC</span>();</span><br><span class="line"><span class="comment">//创建职责链</span></span><br><span class="line">handler1.setSuccessor(handler2);</span><br><span class="line">handler2.setSuccessor(handler3);</span><br><span class="line"><span class="comment">//发送请求，请求对象通常为自定义类型</span></span><br><span class="line">handler1.handleRequest(<span class="string">&quot;请求对象&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="纯与不纯的职责链模式"><a href="#纯与不纯的职责链模式" class="headerlink" title="纯与不纯的职责链模式"></a>纯与不纯的职责链模式</h4><p><code>纯的职责链模式</code></p><ul><li>一个具体的处理者对象只能在两个行为中选择一个：<strong>要么承担全部责任，要么将责任推给下家</strong></li><li>不允许出现某个具体处理者对象在承担了一部分或全部责任后又将责任向下传递的情况</li><li>一个请求必须被某一个处理者对象所接收，不能出现某个请求未被任何一个处理者对象处理的情况</li></ul><p><code>不纯的职责链模式</code></p><ul><li>允许某个请求被一个具体处理者部分处理后向下传递，或者一个具体处理者处理完某请求后其后继处理者可以继续处理该请求</li><li>一个请求<strong>可以最终不被任何处理者对象所接收并处理</strong></li><li>JavaScript的<strong>事件浮升(Event Bubbling)处理机制</strong></li></ul><h4 id="模式优缺点及适用环境-12"><a href="#模式优缺点及适用环境-12" class="headerlink" title="模式优缺点及适用环境"></a>模式优缺点及适用环境</h4><p><code>优点</code></p><ul><li>使得一个对象无须知道是其他哪一个对象处理其请求，降低了系统的耦合度</li><li>可简化对象之间的相互连接</li><li>给对象职责的分配带来更多的灵活性</li><li>增加一个新的具体请求处理者时无须修改原有系统的代码，只需要客户端重新建链即可</li></ul><p><code>缺点</code></p><ul><li>不能保证请求一定会被处理</li><li>对于比较长的职责链，系统性能将受到一定影响，在进行代码调试时不太方便</li><li>如果建链不当，可能会造成<strong>循环调用</strong>，将导致系统陷入死循环</li></ul><p><code>模式适用环境</code></p><ul><li>有多个对象可以处理同一个请求，具体哪个对象处理该请求待运行时刻再确定</li><li>在不明确指定接收者的情况下，向多个对象中的一个提交一个请求</li><li>可动态指定一组对象处理请求</li></ul><h3 id="命令模式-Command-Pattern"><a href="#命令模式-Command-Pattern" class="headerlink" title="命令模式(Command Pattern)"></a>命令模式(Command Pattern)</h3><p><code>对象行为型模式</code></p><h4 id="定义-21"><a href="#定义-21" class="headerlink" title="定义"></a>定义</h4><ul><li><strong>将一个请求封装为一个对象</strong>，从而让你可以用不同的请求<strong>对客户进行参数化</strong>，<strong>对请求排队</strong>或者<strong>记录请求日志</strong>，以及<strong>支持可撤销的操作</strong>。</li><li>别名为**动作(Action)<strong>模式或</strong>事务(Transaction)**模式</li></ul><h4 id="UML结构-15"><a href="#UML结构-15" class="headerlink" title="UML结构"></a>UML结构</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20231228183018861.png" alt="image-20231228183018861"></p><ul><li>Command（抽象命令类）</li><li>ConcreteCommand（具体命令类）</li><li>Invoker（调用者）</li><li>Receiver（接收者）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//本质是对请求进行封装</span></span><br><span class="line"><span class="comment">//一个请求对应于一个命令，将发出命令的责任和执行命令的责任分开</span></span><br><span class="line"><span class="comment">//命令模式允许请求的一方和接收的一方独立开来，使得请求的一方不必知道接收请求的一方的接口，更不必知道请求如何被接收、操作是否被执行、何时被执行，以及是怎么被执行的</span></span><br><span class="line"><span class="comment">//典型的抽象命令类代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Command</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//典型的调用者(请求发送者)类代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Invoker</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Command command;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造注入</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Invoker</span><span class="params">(Command command)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.command = command;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设值注入</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCommand</span><span class="params">(Command command)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.command = command;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//业务方法，用于调用命令类的execute()方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">call</span><span class="params">()</span> &#123;</span><br><span class="line">        command.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//典型的具体命令类代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConcreteCommand</span> <span class="keyword">extends</span> <span class="title class_">Command</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Receiver receiver; <span class="comment">//维持一个对请求接收者对象的引用</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">()</span> &#123;</span><br><span class="line">        receiver.action(); <span class="comment">//调用请求接收者的业务处理方法action()</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//典型的请求接收者类代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Receiver</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">action</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//具体操作</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="实现命令队列"><a href="#实现命令队列" class="headerlink" title="实现命令队列"></a>实现命令队列</h4><p><code>动机</code></p><ul><li>当一个请求发送者发送一个请求时，有<strong>不止一个请求接收者产生响应</strong>，这些请求接收者将逐个执行业务方法，完成对请求的处理</li><li>增加一个<strong>CommandQueue类</strong>，由该类负责<strong>存储多个命令对象</strong>，而不同的命令对象可以对应不同的请求接收者</li><li>批处理</li></ul><p><code>实现</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommandQueue</span> &#123;</span><br><span class="line">    <span class="comment">//定义一个ArrayList来存储命令队列</span></span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;Command&gt; commands = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Command&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addCommand</span><span class="params">(Command command)</span> &#123;</span><br><span class="line">        commands.add(command);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeCommand</span><span class="params">(Command command)</span> &#123;</span><br><span class="line">        commands.remove(command);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//循环调用每一个命令对象的execute()方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Object command : commands) &#123;</span><br><span class="line">            ((Command)command).execute();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Invoker</span> &#123;</span><br><span class="line">    <span class="comment">//维持一个CommandQueue对象的引用</span></span><br><span class="line">    <span class="keyword">private</span> CommandQueue commandQueue; </span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造注入</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Invoker</span><span class="params">(CommandQueue commandQueue)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.commandQueue = commandQueue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设值注入</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCommandQueue</span> <span class="params">(CommandQueue commandQueue)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.commandQueue = commandQueue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//调用CommandQueue类的execute()方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">call</span><span class="params">()</span> &#123;</span><br><span class="line">        commandQueue.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="记录请求日志"><a href="#记录请求日志" class="headerlink" title="记录请求日志"></a>记录请求日志</h4><p><code>动机</code></p><p><strong>将请求的历史记录保存下来</strong>，通常以**日志文件(Log File)**的形式永久存储在计算机中</p><ul><li>为系统提供一种恢复机制</li><li>可以用于实现批处理</li><li>防止因为断电或者系统重启等原因造成请求丢失。而且可以避免重新发送全部请求时造成某些命令的重复执行</li></ul><p><code>实现</code></p><ul><li>将发送请求的命令对象<strong>通过序列化写到日志文件中</strong></li><li>命令类必须实现接口<strong>Serializable</strong></li></ul><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20231228184329378.png" alt="image-20231228184329378"></p><h4 id="实现撤销操作"><a href="#实现撤销操作" class="headerlink" title="实现撤销操作"></a>实现撤销操作</h4><p>可以通过对命令类进行修改使得系统支持<strong>撤销Undo)操作</strong>和<strong>恢复(Redo)操作</strong></p><h4 id="宏命令"><a href="#宏命令" class="headerlink" title="宏命令"></a>宏命令</h4><p><code>动机</code></p><ul><li>**宏命令(Macro Command)<strong>又称为</strong>组合命令(Composite Command)**，它是组合模式和命令模式联用的产物</li><li>宏命令是一个具体命令类，它<strong>拥有一个集合</strong>，在该集合中包含了对其他命令对象的引用</li><li>当调用宏命令的execute()方法时，将递归调用它所包含的每个成员命令的execute()方法。一个宏命令的成员可以是简单命令，还可以继续是宏命令</li><li>执行一个宏命令将触发多个具体命令的执行，从而<strong>实现对命令的批处理</strong></li></ul><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20231228184748887.png" alt="image-20231228184748887"></p><h4 id="模式优缺点及适用环境-13"><a href="#模式优缺点及适用环境-13" class="headerlink" title="模式优缺点及适用环境"></a>模式优缺点及适用环境</h4><p><code>模式优点</code></p><ul><li>降低系统的耦合度</li><li>新的命令很容易地加入到系统中，符合开闭原则</li><li>可以比较容易地设计一个命令队列或宏命令（组合命令）</li><li>为请求的撤销（Undo）和恢复（Redo）操作提供了一种设计和实现方案</li></ul><p><code>模式缺点</code></p><p>使用命令模式<strong>可能会导致某些系统有过多的具体命令类</strong>（针对每一个对请求接收者的调用操作都需要设计一个具体命令类）</p><p><code>模式适用环境</code></p><ul><li>系统需要<strong>将请求调用者和请求接收者解耦</strong>，使得调用者和接收者不直接交互</li><li>系统需要<strong>在不同的时间指定请求、将请求排队和执行请求</strong></li><li>系统需要<strong>支持命令的撤销（Undo）操作和恢复（Redo）操作</strong></li><li>系统需要<strong>将一组操作组合在一起形成宏命令</strong></li></ul><h3 id="解释器模式-Interpreter-Pattern"><a href="#解释器模式-Interpreter-Pattern" class="headerlink" title="解释器模式(Interpreter Pattern)"></a>解释器模式(Interpreter Pattern)</h3><p><code>类行为型模式</code></p><h4 id="定义-22"><a href="#定义-22" class="headerlink" title="定义"></a>定义</h4><ul><li>给定一个语言，定义它的文法的一种表示，并定义一个解释器，这个解释器使用该表示来解释语言中的句子</li><li>所指的<strong>语言</strong>是使用规定格式和语法的代码</li><li>是一种使用频率相对较低但学习难度相对较大的设计模式，用于描述如何使用面向对象语言构成一个简单的语言解释器</li><li>能够加深对面向对象思想的理解，并且理解编程语言中文法规则的解释过程</li></ul><h4 id="文法规则"><a href="#文法规则" class="headerlink" title="文法规则"></a>文法规则</h4><p>1 + 2 + 3 - 4 + 1</p><p>expression ::&#x3D; value | operation</p><p>operation ::&#x3D; expression ‘+’ expression | expression ‘-‘ expression</p><p>value ::&#x3D; an integer &#x2F;&#x2F;一个整数值</p><ul><li>“::&#x3D;”表示“定义为”</li><li>“|”表示“或”</li><li>“{”和“}”表示“组合”</li><li>“*”表示“出现0次或多次”</li></ul><h4 id="抽象语法树（Abstract-Syntax-Tree，AST）"><a href="#抽象语法树（Abstract-Syntax-Tree，AST）" class="headerlink" title="抽象语法树（Abstract Syntax Tree，AST）"></a>抽象语法树（Abstract Syntax Tree，AST）</h4><p>描述了如何构成一个复杂的句子，通过对抽象语法树的分析，可以识别出语言中的终结符类和非终结符类</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20231228211741770.png" alt="image-20231228211741770"></p><h4 id="UML结构-16"><a href="#UML结构-16" class="headerlink" title="UML结构"></a>UML结构</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20231228211753646.png" alt="image-20231228211753646"></p><ul><li>AbstractExpression（抽象表达式）</li><li>TerminalExpression（终结符表达式）</li><li>NonterminalExpression（非终结符表达式）</li><li>Context（环境类）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//典型的抽象表达式类代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractExpression</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">interpret</span><span class="params">(Context ctx)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//典型的终结符表达式类代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TerminalExpression</span> <span class="keyword">extends</span> <span class="title class_">AbstractExpression</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">interpret</span><span class="params">(Context ctx)</span> &#123;</span><br><span class="line">        <span class="comment">//终结符表达式的解释操作</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//典型的非终结符表达式类代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NonterminalExpression</span> <span class="keyword">extends</span> <span class="title class_">AbstractExpression</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> AbstractExpression left;</span><br><span class="line">    <span class="keyword">private</span> AbstractExpression right;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">NonterminalExpression</span><span class="params">(AbstractExpression left,AbstractExpression right)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.left=left;</span><br><span class="line">        <span class="built_in">this</span>.right=right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">interpret</span><span class="params">(Context ctx)</span> &#123;</span><br><span class="line">        <span class="comment">//递归调用每一个组成部分的interpret()方法</span></span><br><span class="line">        <span class="comment">//在递归调用时指定组成部分的连接方式，即非终结符的功能</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//环境类Context</span></span><br><span class="line"><span class="comment">//用于存储一些全局信息,一般包含一个HashMap或ArrayList等类型的集合对象（也可以直接由HashMap等集合类充当环境类）,存储一系列公共信息，例如变量名与值的映射关系(key/value)等,用于在执行具体的解释操作时从中获取相关信息</span></span><br><span class="line"><span class="comment">//可以在环境类中增加一些所有表达式解释器都共有的功能，以减轻解释器的职责</span></span><br><span class="line"><span class="comment">//当系统无须提供全局公共信息时可以省略环境类，根据实际情况决定是否需要环境类</span></span><br><span class="line"><span class="comment">//典型的环境类代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Context</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> HashMap&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, String&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">assign</span><span class="params">(String key, String value)</span> &#123;</span><br><span class="line">        <span class="comment">//往环境类中设值</span></span><br><span class="line">        map.put(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">lookup</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="comment">//获取存储在环境类中的值</span></span><br><span class="line">        <span class="keyword">return</span> map.get(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="模式优缺点及适用环境-14"><a href="#模式优缺点及适用环境-14" class="headerlink" title="模式优缺点及适用环境"></a>模式优缺点及适用环境</h4><p><code>模式优点</code></p><ul><li>易于改变和扩展文法</li><li>可以方便地实现一个简单的语言</li><li>实现文法较为容易（有自动生成工具）</li><li>增加新的解释表达式较为方便</li></ul><p><code>模式缺点</code></p><ul><li>对于复杂文法难以维护</li><li>执行效率较低</li></ul><p><code>模式适用环境</code></p><ul><li>可以将一个需要解释执行的语言中的句子表示为一棵抽象语法树</li><li>一些重复出现的问题可以用一种简单的语言来进行表达</li><li>一个语言的文法较为简单</li><li>执行效率不是关键问题</li></ul><h3 id="迭代器模式-Iterator-Pattern"><a href="#迭代器模式-Iterator-Pattern" class="headerlink" title="迭代器模式(Iterator Pattern)"></a>迭代器模式(Iterator Pattern)</h3><p><code>对象行为型模式</code></p><h4 id="分析-13"><a href="#分析-13" class="headerlink" title="分析"></a>分析</h4><ul><li><strong>访问一个聚合对象中的元素但又不需要暴露它的内部结构</strong></li><li>聚合对象的两个职责：<ul><li><strong>存储数据</strong>，聚合对象的基本职责</li><li><strong>遍历数据</strong>，既是可变化的，又是可分离的</li></ul></li><li>将遍历数据的行为从聚合对象中分离出来，封装在迭代器对象中</li><li>由迭代器来提供遍历聚合对象内部数据的行为，简化聚合对象的设计，更符合单一职责原则</li></ul><h4 id="定义-23"><a href="#定义-23" class="headerlink" title="定义"></a>定义</h4><ul><li>提供一种方法<strong>顺序访问一个聚合对象中各个元素，且不用暴露该对象的内部表示</strong></li><li>又名游标（Cursor）模式</li><li>通过引入迭代器，客户端无须了解聚合对象的内部结构即可实现对聚合对象中成员的遍历，还可以根据需要很方便地增加新的遍历方式</li></ul><h4 id="UML结构-17"><a href="#UML结构-17" class="headerlink" title="UML结构"></a>UML结构</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20231228190013992.png"></p><ul><li>Iterator（抽象迭代器）</li><li>ConcreteIterator（具体迭代器）</li><li>Aggregate（抽象聚合类）</li><li>ConcreteAggregate（具体聚合类）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//典型的抽象迭代器代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Iterator</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">first</span><span class="params">()</span>;                    <span class="comment">//将游标指向第一个元素</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">next</span><span class="params">()</span>;                    <span class="comment">//将游标指向下一个元素</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span>;        <span class="comment">//判断是否存在下一个元素</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">currentItem</span><span class="params">()</span>;   <span class="comment">//获取游标指向的当前元素</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//典型的具体迭代器代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConcreteIterator</span> <span class="keyword">implements</span> <span class="title class_">Iterator</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> ConcreteAggregate objects; <span class="comment">//维持一个对具体聚合对象的引用，以便于访问存储在聚合对象中的数据</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> cursor;  <span class="comment">//定义一个游标，用于记录当前访问位置</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ConcreteIterator</span><span class="params">(ConcreteAggregate objects)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.objects=objects;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">first</span><span class="params">()</span> &#123;  ......  &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">next</span><span class="params">()</span> &#123;  ......  &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span> &#123;  ......  &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">currentItem</span><span class="params">()</span> &#123;  ......  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//典型的抽象聚合类代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Aggregate</span> &#123;</span><br><span class="line">    Iterator <span class="title function_">createIterator</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//典型的具体聚合类代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConcreteAggregate</span> <span class="keyword">implements</span> <span class="title class_">Aggregate</span> &#123;</span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line">    <span class="keyword">public</span> Iterator <span class="title function_">createIterator</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ConcreteIterator</span>(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="模式优缺点及适用环境-15"><a href="#模式优缺点及适用环境-15" class="headerlink" title="模式优缺点及适用环境"></a>模式优缺点及适用环境</h4><p><code>模式优点</code></p><ul><li>支持<strong>以不同的方式遍历一个聚合对象</strong>，在同一个聚合对象上可以定义多种遍历方式</li><li>简化了聚合类</li><li>由于引入了抽象层，增加新的聚合类和迭代器类都很方便，无须修改原有代码，符合开闭原则</li></ul><p><code>模式缺点</code></p><ul><li>在增加新的聚合类时需要对应地增加新的迭代器类，类的个数成对增加，这在一定程度上增加了系统的复杂性</li><li>抽象迭代器的设计难度较大，需要充分考虑到系统将来的扩展。在自定义迭代器时，创建一个考虑全面的抽象迭代器并不是一件很容易的事情</li></ul><p><code>模式适用环境</code></p><ul><li>访问一个聚合对象的内容而无须暴露它的内部表示</li><li>需要为一个聚合对象提供多种遍历方式</li><li><strong>为遍历不同的聚合结构提供一个统一的接口</strong>，在该接口的实现类中为不同的聚合结构提供不同的遍历方式，而<strong>客户端可以一致性地操作该接口</strong></li></ul><h3 id="中介者模式-Mediator-Pattern"><a href="#中介者模式-Mediator-Pattern" class="headerlink" title="中介者模式(Mediator Pattern)"></a>中介者模式(Mediator Pattern)</h3><p><code>对象行为型模式</code></p><ul><li><strong>定义一个对象来封装一系列对象的交互</strong>。中介者模式使各对象之间不需要显式地相互引用，从而使其<strong>耦合松散</strong>，而且<strong>让你可以独立地改变它们之间的交互</strong></li><li>又称为<strong>调停者模式</strong></li><li>在中介者模式中，通过引入中介者来简化对象之间的复杂交互</li><li>中介者模式是<strong>迪米特法则</strong>的一个典型应用</li><li>对象之间<strong>多对多</strong>的复杂关系转化为相对简单的<strong>一对多</strong>关系</li></ul><h4 id="UML结构-18"><a href="#UML结构-18" class="headerlink" title="UML结构"></a>UML结构</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20231228191001744.png" alt="image-20231228191001744"></p><ul><li>Mediator（抽象中介者）</li><li>ConcreteMediator（具体中介者）</li><li>Colleague（抽象同事类）</li><li>ConcreteColleague（具体同事类）</li></ul><p><code>中介者类的职责</code></p><ul><li><strong>中转作用（结构性）</strong>：各个同事对象不再需要显式地引用其他同事，当需要和其他同事进行通信时，可通过中介者来实现间接调用</li><li><strong>协调作用（行为性）</strong>：中介者可以更进一步的对同事之间的关系进行封装，同事可以一致地和中介者进行交互，而不需要指明中介者需要具体怎么做，中介者根据封装在自身内部的协调逻辑对同事的请求进行进一步处理，将同事成员之间的关系行为进行分离和封装</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//典型的抽象中介者类代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Mediator</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> ArrayList&lt;Colleague&gt; colleagues = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Colleague&gt;(); <span class="comment">//用于存储同事对象</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//注册方法，用于增加同事对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">register</span><span class="params">(Colleague colleague)</span> &#123;</span><br><span class="line">        colleagues.add(colleague);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//声明抽象的业务方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">operation</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//典型的具体中介者类代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConcreteMediator</span> <span class="keyword">extends</span> <span class="title class_">Mediator</span> &#123;</span><br><span class="line">    <span class="comment">//实现业务方法，封装同事之间的调用</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operation</span><span class="params">()</span> &#123;</span><br><span class="line">        ......</span><br><span class="line">        ((Colleague)(colleagues.get(<span class="number">0</span>))).method1(); <span class="comment">//通过中介者调用同事类的方法</span></span><br><span class="line">        ......</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//典型的抽象同事类代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Colleague</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> Mediator mediator; <span class="comment">//维持一个抽象中介者的引用</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Colleague</span><span class="params">(Mediator mediator)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.mediator=mediator;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span>; <span class="comment">//声明自身方法，处理自己的行为</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义依赖方法，与中介者进行通信</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span> &#123;</span><br><span class="line">        mediator.operation();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//典型的具体同事类代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConcreteColleague</span> <span class="keyword">extends</span> <span class="title class_">Colleague</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ConcreteColleague</span><span class="params">(Mediator mediator)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(mediator);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//实现自身方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span> &#123;</span><br><span class="line">        ......</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="模式优缺点及适用环境-16"><a href="#模式优缺点及适用环境-16" class="headerlink" title="模式优缺点及适用环境"></a>模式优缺点及适用环境</h4><p><code>模式优点</code></p><ul><li><strong>简化了对象之间的交互</strong>，它用中介者和同事的<strong>一对多</strong>交互代替了原来同事之间的<strong>多对多</strong>交互，将原本难以理解的<strong>网状结构</strong>转换成相对简单的<strong>星型结构</strong></li><li>可将各同事对象解耦</li><li><strong>可以减少子类生成</strong>，中介者模式将原本分布于多个对象间的行为集中在一起，改变这些行为只需生成新的中介者子类即可，这使得各个同事类可被重用，无须直接对同事类进行扩展</li></ul><p><code>模式缺点</code></p><ul><li>在具体中介者类中包含了大量的同事之间的交互细节，可能会导致具体中介者类非常复杂，使得系统难以维护</li></ul><p><code>模式适用环境</code></p><ul><li>系统中<strong>对象之间存在复杂的引用关系</strong>，系统结构混乱且难以理解</li><li>一个对象由于引用了其他很多对象并且直接和这些对象通信，导致难以复用该对象</li><li>想通过一个中间类来封装多个类中的行为，又不想生成太多的子类</li></ul><h3 id="备忘录模式-Memento-Pattern"><a href="#备忘录模式-Memento-Pattern" class="headerlink" title="备忘录模式(Memento Pattern)"></a>备忘录模式(Memento Pattern)</h3><p><code>对象行为型模式</code></p><h4 id="定义-24"><a href="#定义-24" class="headerlink" title="定义"></a>定义</h4><ul><li>在不破坏封装的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态，这样就可以在以后将对象恢复到原先保存的状态</li><li>别名为标记（Token）模式</li><li>提供了一种<strong>状态恢复</strong>的实现机制，使得用户可以方便地回到一个特定的历史步骤</li><li>当前在很多软件所提供的撤销（Undo）操作中就使用了备忘录模式</li></ul><h4 id="UML结构-19"><a href="#UML结构-19" class="headerlink" title="UML结构"></a>UML结构</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20231228193025751.png" alt="image-20231228193025751"></p><ul><li>Originator（原发器）</li><li>Memento（备忘录)</li><li>Caretaker（负责人）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//典型的原发器类代码</span></span><br><span class="line"><span class="keyword">package</span> designpatterns.memento;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Originator</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String state;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Originator</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建一个备忘录对象</span></span><br><span class="line">    <span class="keyword">public</span> Memento <span class="title function_">createMemento</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Memento</span>(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据备忘录对象恢复原发器状态</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">restoreMemento</span><span class="params">(Memento m)</span> &#123;</span><br><span class="line">        state = m.state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setState</span><span class="params">(String state)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.state=state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getState</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.state;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//典型的备忘录类代码</span></span><br><span class="line"><span class="keyword">package</span> designpatterns.memento;</span><br><span class="line"></span><br><span class="line"><span class="comment">//备忘录类，默认可见性，包内可见</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Memento</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String state;</span><br><span class="line"></span><br><span class="line">    Memento(Originator o) &#123;</span><br><span class="line">        state = o.getState();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setState</span><span class="params">(String state)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.state=state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">getState</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.state;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>除了Originator类，不允许其他类来调用备忘录类Memento的构造函数与相关方法</li><li>如果允许其他类调用setState()等方法，将导致在备忘录中保存的历史状态发生改变，通过撤销操作所恢复的状态就不再是真实的历史状态，备忘录模式也就失去了本身的意义</li><li>理想的情况是只允许生成该备忘录的原发器访问备忘录的内部状态</li><li>Java语言实现：<ul><li>将Memento类与Originator类定义在同一个包(package)中来实现封装，使用默认可见性定义Memento类，即保证其在包内可见</li><li>将备忘录类作为原发器类的内部类，使得只有原发器才可以访问备忘录中的数据，其他对象都无法使用备忘录中的数据</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//典型的负责人类代码</span></span><br><span class="line"><span class="keyword">package</span> designpatterns.memento;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Caretaker</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Memento memento;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Memento <span class="title function_">getMemento</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> memento;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMemento</span><span class="params">(Memento memento)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.memento=memento;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="模式优缺点及适用环境-17"><a href="#模式优缺点及适用环境-17" class="headerlink" title="模式优缺点及适用环境"></a>模式优缺点及适用环境</h4><p><code>模式优点</code></p><ul><li><strong>提供了一种状态恢复的实现机制</strong>，使得用户可以方便地回到一个特定的历史步骤</li><li><strong>实现了对信息的封装</strong>，一个备忘录对象是一种原发器对象状态的表示，不会被其他代码所改动</li></ul><p><code>模式缺点</code></p><ul><li><strong>资源消耗过大</strong>，如果需要保存的原发器类的成员变量太多，就不可避免地需要占用大量的存储空间，每保存一次对象的状态都需要消耗一定的系统资源</li></ul><p><code>模式适用环境</code></p><ul><li><strong>保存一个对象在某一个时刻的全部状态或部分状态</strong>，这样以后需要时能够恢复到先前的状态，实现撤销操作</li><li><strong>防止外界对象破坏一个对象历史状态的封装性</strong>，避免将对象历史状态的实现细节暴露给外界对象</li></ul><h3 id="观察者模式-Observer-Pattern"><a href="#观察者模式-Observer-Pattern" class="headerlink" title="观察者模式(Observer Pattern)"></a>观察者模式(Observer Pattern)</h3><p><code>对象行为型模式</code></p><h4 id="定义-25"><a href="#定义-25" class="headerlink" title="定义"></a>定义</h4><ul><li>定义对象之间的一种<strong>一对多依赖关系</strong>，使得每当<strong>一个对象状态发生改变</strong>时，其相关依赖对象<strong>都得到通知并被自动更新</strong></li><li>别名：<ul><li>发布-订阅（Publish&#x2F;Subscribe）模式</li><li>模型-视图（Model&#x2F;View）模式</li><li>源-监听器（Source&#x2F;Listener）模式</li><li>从属者（Dependents）模式</li></ul></li></ul><h4 id="UML结构-20"><a href="#UML结构-20" class="headerlink" title="UML结构"></a>UML结构</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20231228194334988.png" alt="image-20231228194334988"></p><ul><li>Subject（目标）</li><li>ConcreteSubject（具体目标）</li><li>Observer（观察者）</li><li>ConcreteObserver（具体观察者）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//典型的抽象目标类代码</span></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Subject</span> &#123;</span><br><span class="line">    <span class="comment">//定义一个观察者集合用于存储所有观察者对象</span></span><br><span class="line">    <span class="keyword">protected</span> ArrayList observers&lt;Observer&gt; = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注册方法，用于向观察者集合中增加一个观察者</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attach</span><span class="params">(Observer observer)</span> &#123;</span><br><span class="line">        observers.add(observer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注销方法，用于在观察者集合中删除一个观察者</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">detach</span><span class="params">(Observer observer)</span> &#123;</span><br><span class="line">        observers.remove(observer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//声明抽象通知方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">notify</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//典型的具体目标类代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConcreteSubject</span> <span class="keyword">extends</span> <span class="title class_">Subject</span> &#123;</span><br><span class="line">    <span class="comment">//实现通知方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">notify</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//遍历观察者集合，调用每一个观察者的响应方法</span></span><br><span class="line">        <span class="keyword">for</span>(Object obs:observers) &#123;</span><br><span class="line">            ((Observer)obs).update();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//典型的抽象观察者代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Observer</span> &#123;</span><br><span class="line">    <span class="comment">//声明响应方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//典型的具体观察者代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConcreteObserver</span> <span class="keyword">implements</span> <span class="title class_">Observer</span> &#123;</span><br><span class="line">    <span class="comment">//实现响应方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//具体响应代码</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//典型的客户端代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//......</span></span><br><span class="line"><span class="type">Subject</span> <span class="variable">subject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConcreteSubject</span>();</span><br><span class="line"><span class="type">Observer</span> <span class="variable">observer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConcreteObserver</span>();</span><br><span class="line">subject.attach(observer); <span class="comment">//注册观察者</span></span><br><span class="line">subject.notify();</span><br><span class="line">        <span class="comment">//......</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="观察者模式与MVC"><a href="#观察者模式与MVC" class="headerlink" title="观察者模式与MVC"></a>观察者模式与MVC</h4><p>MVC（Model-View-Controller）</p><ul><li>模型(Model)，视图(View)和控制器(Controller)</li><li>模型可对应于观察者模式中的观察目标，而视图对应于观察者，控制器可充当两者之间的中介者</li><li>当模型层的数据发生改变时，视图层将自动改变其显示内容</li></ul><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20231228195005991.png" alt="image-20231228195005991"></p><h4 id="模式优缺点及适用环境-18"><a href="#模式优缺点及适用环境-18" class="headerlink" title="模式优缺点及适用环境"></a>模式优缺点及适用环境</h4><p><code>模式优点</code></p><ul><li>可以<strong>实现表示层和数据逻辑层的分离</strong></li><li>在观察目标和观察者之间<strong>建立一个抽象的耦合</strong></li><li>支持<strong>广播通信，简化了一对多系统设计的难度</strong></li><li>符合开闭原则，增加新的具体观察者无须修改原有系统代码，在具体观察者与观察目标之间不存在关联关系的情况下，增加新的观察目标也很方便</li></ul><p><code>模式缺点</code></p><ul><li>将所有的观察者都通知到会花费很多时间</li><li>如果存在<strong>循环依赖</strong>时可能导致系统崩溃</li><li>没有相应的机制让观察者知道所观察的目标对象是怎么发生变化的，而只是知道观察目标发生了变化</li></ul><p><code>模式适用环境</code></p><ul><li>一个抽象模型有两个方面，其中一个方面依赖于另一个方面，将这两个方面封装在独立的对象中使它们可以各自独立地改变和复用</li><li>一个对象的改变将导致一个或多个其他对象发生改变，且并不知道具体有多少对象将发生改变，也不知道这些对象是谁</li><li>需要在系统中创建一个触发链</li></ul><h3 id="状态模式-State-Pattern"><a href="#状态模式-State-Pattern" class="headerlink" title="状态模式(State Pattern)"></a>状态模式(State Pattern)</h3><p><code>对象行为型模式</code></p><h4 id="定义-26"><a href="#定义-26" class="headerlink" title="定义"></a>定义</h4><ul><li>允许一个对象在其<strong>内部状态改变时改变它的行为</strong>。<strong>对象看起来似乎修改了它的类。</strong></li><li>又名<strong>状态对象（Objects for States）</strong></li><li>用于解决系统中<strong>复杂对象的状态转换以及不同状态下行为的封装问题</strong></li><li>将一个对象的状态从该对象中分离出来，封装到专门的状态类中，使得对象状态可以灵活变化</li><li>对于客户端而言，无须关心对象状态的转换以及对象所处的当前状态，无论对于何种状态的对象，客户端都可以一致处理</li></ul><h4 id="UML结构-21"><a href="#UML结构-21" class="headerlink" title="UML结构"></a>UML结构</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20231228201357498.png" alt="image-20231228201357498"></p><ul><li>Context（环境类）</li><li>State（抽象状态类）</li><li>ConcreteState（具体状态类）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//典型的抽象状态类代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">State</span> &#123;</span><br><span class="line">    <span class="comment">//声明抽象业务方法，不同的具体状态类可以有不同的实现</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">handle</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//典型的具体状态类代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConcreteState</span> <span class="keyword">extends</span> <span class="title class_">State</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handle</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//方法具体实现代码</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//典型的环境类代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Context</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> State state; <span class="comment">//维持一个对抽象状态对象的引用</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> value;  <span class="comment">//其他属性值，该属性值的变化可能会导致对象的状态发生变化</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setState</span><span class="params">(State state)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.state = state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">request</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//其他代码</span></span><br><span class="line">        state.handle(); <span class="comment">//调用状态对象的业务方法</span></span><br><span class="line">        <span class="comment">//其他代码</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//状态转换的实现</span></span><br><span class="line"><span class="comment">//(1)统一由环境类来负责状态之间的转换,环境类充当了状态管理器角色</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">changeState</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//判断属性值，根据属性值进行状态转换</span></span><br><span class="line"><span class="keyword">if</span> (value == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">this</span>.setState(<span class="keyword">new</span> <span class="title class_">ConcreteStateA</span>());</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (value == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">this</span>.setState(<span class="keyword">new</span> <span class="title class_">ConcreteStateB</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//(2)由具体状态类来负责状态之间的转换，可以在具体状态类的业务方法中判断环境类的某些属性值，再根据情况为环境类设置新的状态对象，实现状态转换</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">changeState</span><span class="params">(Context ctx)</span> &#123;</span><br><span class="line"><span class="comment">//根据环境对象中的属性值进行状态转换</span></span><br><span class="line"><span class="keyword">if</span> (ctx.getValue() == <span class="number">1</span>) &#123;</span><br><span class="line">ctx.setState(<span class="keyword">new</span> <span class="title class_">ConcreteStateB</span>());</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (ctx.getValue() == <span class="number">2</span>) &#123;</span><br><span class="line">ctx.setState(<span class="keyword">new</span> <span class="title class_">ConcreteStateC</span>());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="模式优缺点及适用环境-19"><a href="#模式优缺点及适用环境-19" class="headerlink" title="模式优缺点及适用环境"></a>模式优缺点及适用环境</h4><p><code>模式优点</code></p><ul><li>封装了状态的转换规则，可以对状态转换代码进行集中管理，而不是分散在一个个业务方法中</li><li>将所有与某个状态有关的行为放到一个类中，只需要注入一个不同的状态对象即可使环境对象拥有不同的行为</li><li><strong>允许状态转换逻辑与状态对象合成一体，而不是提供一个巨大的条件语句块</strong>，可以避免使用庞大的条件语句来将业务方法和状态转换代码交织在一起</li><li>可以让多个环境对象共享一个状态对象，从而减少系统中对象的个数</li></ul><p><code>模式缺点</code></p><ul><li>会增加系统中类和对象的个数，导致系统运行开销增大</li><li>结构与实现都较为复杂，如果使用不当将导致程序结构和代码混乱，增加系统设计的难度</li><li><strong>对开闭原则的支持并不太好</strong>，增加新的状态类需要修改负责状态转换的源代码，否则无法转换到新增状态；而且修改某个状态类的行为也需要修改对应类的源代码</li></ul><p><code>模式适用环境</code></p><ul><li>对象的行为依赖于它的状态（例如某些属性值），状态的改变将导致行为的变化</li><li><strong>在代码中包含大量与对象状态有关的条件语句</strong>，这些条件语句的出现会导致代码的可维护性和灵活性变差，不能方便地增加和删除状态，并且导致客户类与类库之间的耦合增强</li></ul><h3 id="策略模式-Strategy-Pattern"><a href="#策略模式-Strategy-Pattern" class="headerlink" title="策略模式(Strategy Pattern)"></a>策略模式(Strategy Pattern)</h3><p><code>对象行为型模式</code></p><h4 id="定义-27"><a href="#定义-27" class="headerlink" title="定义"></a>定义</h4><ul><li>定义<strong>一系列算法</strong>，<strong>将每一个算法封装起来</strong>，并让它们可以相互替换。策略模式让算法可以独立于使用它的客户变化</li><li>又称为<strong>政策（Policy）模式</strong></li><li>每一个封装算法的类称之为<strong>策略（Strategy）类</strong></li><li>策列模式提供了一种<strong>可插入式（Pluggable）算法的实现方案</strong></li></ul><h4 id="UML结构-22"><a href="#UML结构-22" class="headerlink" title="UML结构"></a>UML结构</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20231228203426473.png" alt="image-20231228203426473"></p><ul><li>Context（环境类）</li><li>Strategy（抽象策略类）</li><li>ConcreteStrategy（具体策略类）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//典型的抽象策略类代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Strategy</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">algorithm</span><span class="params">()</span>;  <span class="comment">//声明抽象算法</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//典型的具体策略类代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConcreteStrategyA</span> <span class="keyword">extends</span> <span class="title class_">Strategy</span> &#123;</span><br><span class="line">    <span class="comment">//算法的具体实现</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">algorithm</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//算法A</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//典型的环境类代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Context</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Strategy strategy; <span class="comment">//维持一个对抽象策略类的引用</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//注入策略对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStrategy</span><span class="params">(Strategy strategy)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.strategy= strategy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//调用策略类中的算法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">algorithm</span><span class="params">()</span> &#123;</span><br><span class="line">        strategy.algorithm();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//典型的客户端代码片段</span></span><br><span class="line"><span class="comment">//......</span></span><br><span class="line"><span class="type">Context</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Context</span>();</span><br><span class="line">Strategy strategy;</span><br><span class="line">strategy = <span class="keyword">new</span> <span class="title class_">ConcreteStrategyA</span>(); <span class="comment">//可在运行时指定类型，通过配置文件和反射机制实现</span></span><br><span class="line">context.setStrategy(strategy);</span><br><span class="line">context.algorithm();</span><br><span class="line"><span class="comment">//......</span></span><br></pre></td></tr></table></figure><h4 id="模式优缺点及适用环境-20"><a href="#模式优缺点及适用环境-20" class="headerlink" title="模式优缺点及适用环境"></a>模式优缺点及适用环境</h4><p><code>模式优点</code></p><ul><li>提供了对开闭原则的完美支持，用户可以在不修改原有系统的基础上选择算法或行为，也可以灵活地增加新的算法或行为</li><li>提供了管理相关的算法族的办法</li><li>提供了一种可以替换继承关系的办法</li><li>可以避免多重条件选择语句</li><li>提供了一种算法的复用机制，不同的环境类可以方便地复用策略类</li></ul><p><code>模式缺点</code></p><ul><li>客户端必须知道所有的策略类，并自行决定使用哪一个策略类</li><li>将造成系统产生很多具体策略类</li><li>无法同时在客户端使用多个策略类</li></ul><p><code>模式适用环境</code></p><ul><li>一个系统需要动态地在几种算法中选择一种</li><li>避免使用难以维护的多重条件选择语句</li><li>不希望客户端知道复杂的、与算法相关的数据结构，提高算法的保密性与安全性</li></ul><h3 id="模块方法模式-Template-Method-Pattern"><a href="#模块方法模式-Template-Method-Pattern" class="headerlink" title="模块方法模式(Template Method Pattern)"></a>模块方法模式(Template Method Pattern)</h3><p><code>类行为型模式</code></p><h4 id="定义-28"><a href="#定义-28" class="headerlink" title="定义"></a>定义</h4><ul><li>定义一个操作中<strong>算法的框架</strong>，而<strong>将一些步骤延迟到子类中</strong>。模板方法模式使得子类不改变一个算法的结构即可<strong>重定义</strong>该算法的<strong>某些特定步骤</strong>。</li><li>是一种<strong>基于继承的代码复用技术</strong></li><li>将一些复杂流程的实现步骤封装在一系列基本方法中</li><li>在抽象父类中提供一个称之为<strong>模板方法</strong>的方法来<strong>定义这些基本方法的执行次序，而通过其子类来覆盖某些步骤，从而使得相同的算法框架可以有不同的执行结果</strong></li></ul><h4 id="UML结构-23"><a href="#UML结构-23" class="headerlink" title="UML结构"></a>UML结构</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20231228205100662.png" alt="image-20231228205100662"></p><ul><li>AbstractClass（抽象类）</li><li>ConcreteClass（具体子类）</li></ul><h4 id="模板方法模式的实现"><a href="#模板方法模式的实现" class="headerlink" title="模板方法模式的实现"></a>模板方法模式的实现</h4><ul><li><p><strong>模板方法（Template Method）</strong></p></li><li><p><strong>基本方法（Primitive Method）</strong></p><ul><li><p>抽象方法（Abstract Method）</p></li><li><p>具体方法（Concrete Method）</p></li><li><p>钩子方法（Hook Method）</p><ul><li><p>挂钩方法：isXXX()或hasXXX()，返回类型为boolean类型</p></li><li><p>空方法</p></li><li><pre><code class="java">//模板方法public void template() &#123;    open();    display();    //通过钩子方法来确定某一步骤是否执行    if(isPrint()) &#123;        print();    &#125;&#125; //钩子方法public boolean isPrint() &#123;    return true;&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```java</span><br><span class="line">//抽象类典型代码</span><br><span class="line">public abstract class AbstractClass &#123;</span><br><span class="line">    //模板方法</span><br><span class="line">    public void templateMethod() &#123;</span><br><span class="line">        primitiveOperation1();</span><br><span class="line">        primitiveOperation2();</span><br><span class="line">        primitiveOperation3();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    //基本方法—具体方法</span><br><span class="line">    public void primitiveOperation1() &#123;</span><br><span class="line">        //实现代码</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //基本方法—抽象方法</span><br><span class="line">    public abstract void primitiveOperation2();    </span><br><span class="line"></span><br><span class="line">    //基本方法—钩子方法</span><br><span class="line">    public void primitiveOperation3()   </span><br><span class="line">    &#123;  &#125;</span><br><span class="line">&#125;</span><br><span class="line">//具体子类典型代码</span><br><span class="line">public class ConcreteClass extends AbstractClass &#123;</span><br><span class="line">    public void primitiveOperation2() &#123;</span><br><span class="line">        //实现代码</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void primitiveOperation3() &#123;</span><br><span class="line">        //实现代码</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre></li></ul></li></ul></li></ul><h4 id="模式优缺点及适用环境-21"><a href="#模式优缺点及适用环境-21" class="headerlink" title="模式优缺点及适用环境"></a>模式优缺点及适用环境</h4><p><code>模式优点</code></p><ul><li>在父类中形式化地定义一个算法，而由它的子类来实现细节的处理，<strong>在子类实现详细的处理算法时并不会改变算法中步骤的执行次序</strong></li><li>提取了类库中的公共行为，将公共行为放在父类中，而通过其子类来实现不同的行为</li><li>可实现一种反向控制结构，通过子类覆盖父类的钩子方法来决定某一特定步骤是否需要执行</li><li>更换和增加新的子类很方便，符合单一职责原则和开闭原则</li></ul><p><code>模式缺点</code></p><ul><li>需要为每一个基本方法的不同实现提供一个子类，如果父类中可变的基本方法太多，将会导致类的个数增加，系统会更加庞大，设计也更加抽象（可结合桥接模式）</li></ul><p><code>模式适用环境</code></p><ul><li>一次性实现一个算法的不变部分，并将可变行为留给子类来实现</li><li>各子类中公共的行为应被提取出来，并集中到一个公共父类中，以避免代码重复</li><li>需要通过子类来决定父类算法中某个步骤是否执行，实现子类对父类的反向控制</li></ul><h3 id="访问者模式-Visitor-Pattern"><a href="#访问者模式-Visitor-Pattern" class="headerlink" title="访问者模式(Visitor Pattern)"></a>访问者模式(Visitor Pattern)</h3><p><code>对象行为型模式</code></p><h4 id="定义-29"><a href="#定义-29" class="headerlink" title="定义"></a>定义</h4><ul><li>表示一个作用于某<strong>对象结构</strong>中的各个元素的操作。访问者模式让你<strong>可以在不改变各元素的类的前提下定义作用于这些元素的新操作</strong>。</li><li>它为<strong>操作存储不同类型元素的对象结构</strong>提供了一种解决方案</li><li>用户**可以对不同类型的元素施加不同的操作</li></ul><h4 id="UML结构-24"><a href="#UML结构-24" class="headerlink" title="UML结构"></a>UML结构</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20231228210535205.png" alt="image-20231228210535205"></p><ul><li>Visitor（抽象访问者）</li><li>ConcreteVisitor（具体访问者）</li><li>Element（抽象元素）</li><li>ConcreteElement（具体元素）</li><li>ObjectStructure（对象结构）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//典型的抽象访问者类代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Visitor</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">visit</span><span class="params">(ConcreteElementA elementA)</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">visit</span><span class="params">(ConcreteElementB elementB)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">visit</span><span class="params">(ConcreteElementC elementC)</span> &#123;</span><br><span class="line">        <span class="comment">//元素ConcreteElementC操作代码</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//典型的具体访问者类代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConcreteVisitor</span> <span class="keyword">extends</span> <span class="title class_">Visitor</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">visit</span><span class="params">(ConcreteElementA elementA)</span> &#123;</span><br><span class="line">        <span class="comment">//元素ConcreteElementA操作代码</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">visit</span><span class="params">(ConcreteElementB elementB)</span> &#123;</span><br><span class="line">        <span class="comment">//元素ConcreteElementB操作代码</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//典型的抽象元素类代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Element</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(Visitor visitor)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//典型的具体元素类代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConcreteElementA</span> <span class="keyword">implements</span> <span class="title class_">Element</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(Visitor visitor)</span> &#123;</span><br><span class="line">        visitor.visit(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operationA</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//业务方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="模式优缺点及适用环境-22"><a href="#模式优缺点及适用环境-22" class="headerlink" title="模式优缺点及适用环境"></a>模式优缺点及适用环境</h4><p><code>模式优点</code></p><ul><li>增加新的访问操作很方便</li><li>将有关元素对象的访问行为集中到一个访问者对象中，而不是分散在一个个的元素类中，类的职责更加清晰</li><li>让用户能够在不修改现有元素类层次结构的情况下，定义作用于该层次结构的操作</li></ul><p><code>模式缺点</code></p><ul><li>增加新的元素类很困难</li><li>破坏了对象的封装性</li></ul><p><code>模式适用环境</code></p><ul><li>一个对象结构包含多个类型的对象，希望对这些对象实施一些依赖其具体类型的操作</li><li>需要对一个对象结构中的对象进行很多不同的且不相关的操作，并需要避免让这些操作“污染”这些对象的类，也不希望在增加新操作时修改这些类</li><li>对象结构中对象对应的类很少改变，但经常需要在此对象结构上定义新的操作</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Java设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
            <tag> 面向对象设计原则 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编译原理</title>
      <link href="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"/>
      <url>/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E8%AF%BE/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="编译原理实验"><a href="#编译原理实验" class="headerlink" title="编译原理实验"></a>编译原理实验</h1><p>[toc]</p><h2 id="词法分析设计原理与实现"><a href="#词法分析设计原理与实现" class="headerlink" title="词法分析设计原理与实现"></a>词法分析设计原理与实现</h2><h3 id="实验内容"><a href="#实验内容" class="headerlink" title="实验内容"></a>实验内容</h3><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240114234025558.png" alt="image-20240114234025558"></p><h3 id="实验设计"><a href="#实验设计" class="headerlink" title="实验设计"></a>实验设计</h3><h4 id="实验思路设计"><a href="#实验思路设计" class="headerlink" title="实验思路设计"></a>实验思路设计</h4><p>从左到右依次扫描字符，根据空格、回车、分隔符，将其划分为一个个子字符串，并对其进行分析分类，输出为一个个对应的二元组。</p><p>单词符号类别设计如下：</p><table><thead><tr><th align="center">单词类别</th><th align="center">单词自身值</th><th align="center">类别编码</th></tr></thead><tbody><tr><td align="center">保留字</td><td align="center">int、char、string、void、等等</td><td align="center">1</td></tr><tr><td align="center">标识符</td><td align="center">除保留字外，以字母开头，字母数字组成的字符串</td><td align="center">2</td></tr><tr><td align="center">常数</td><td align="center">无符号整数</td><td align="center">3</td></tr><tr><td align="center">运算符</td><td align="center">+、-、*、&#x2F;、++、&gt;、&lt;、&amp;、|、!、等等</td><td align="center">4</td></tr><tr><td align="center">分隔符</td><td align="center">，、；、{、}、（、）、[、]</td><td align="center">5</td></tr></tbody></table><h4 id="实验具体实现"><a href="#实验具体实现" class="headerlink" title="实验具体实现"></a>实验具体实现</h4><p><code>结构体设计</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">chars</span> &#123;</span><br><span class="line"><span class="type">char</span> words[<span class="number">110</span>];  <span class="comment">//字符串</span></span><br><span class="line"><span class="type">int</span> label;    <span class="comment">//标签,即单词类别</span></span><br><span class="line">&#125; chars;</span><br></pre></td></tr></table></figure><p>该结构体中，设有字符数组 words，用来存储字符串；整型变量Label用来标记单词类别。</p><p><code>全局变量设计</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MAX 1024</span></span><br><span class="line">FILE* f; <span class="comment">//待分析文件</span></span><br><span class="line">chars ptr[MAX]; <span class="comment">//存储所有的子字符串及其标签</span></span><br><span class="line"><span class="type">char</span> ch; <span class="comment">//表示当前从文件中提取出来的字符,采用全局变量避免函数之间相互传参</span></span><br><span class="line"><span class="type">int</span> num = <span class="number">0</span>; <span class="comment">//作为结构体数组ptr的索引，每当有内容存入到ptr中时，num就会加1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 运算符</span></span><br><span class="line"><span class="type">char</span> operators[<span class="number">11</span>] = &#123;<span class="string">&#x27;+&#x27;</span>, <span class="string">&#x27;-&#x27;</span>, <span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;%&#x27;</span>, <span class="string">&#x27;=&#x27;</span>, <span class="string">&#x27;&gt;&#x27;</span>, <span class="string">&#x27;&lt;&#x27;</span>, <span class="string">&#x27;!&#x27;</span>, <span class="string">&#x27;&amp;&#x27;</span>, <span class="string">&#x27;|&#x27;</span>&#125;;</span><br><span class="line"><span class="comment">//保留字，也叫作关键字</span></span><br><span class="line"><span class="type">char</span> keywords[<span class="number">25</span>][<span class="number">10</span>] = &#123;<span class="string">&quot;int&quot;</span>, <span class="string">&quot;char&quot;</span>, <span class="string">&quot;string&quot;</span>, <span class="string">&quot;void&quot;</span>, <span class="string">&quot;bool&quot;</span>, <span class="string">&quot;float&quot;</span>, <span class="string">&quot;double&quot;</span>, <span class="string">&quot;float&quot;</span>, <span class="string">&quot;true&quot;</span>, <span class="string">&quot;false&quot;</span>, <span class="string">&quot;return&quot;</span>, <span class="string">&quot;main&quot;</span>, <span class="string">&quot;scanf&quot;</span>,</span><br><span class="line">                         <span class="string">&quot;if&quot;</span>, <span class="string">&quot;else&quot;</span>, <span class="string">&quot;while&quot;</span>, <span class="string">&quot;for&quot;</span>, <span class="string">&quot;default&quot;</span>, <span class="string">&quot;do&quot;</span>, <span class="string">&quot;public&quot;</span>, <span class="string">&quot;static&quot;</span>, <span class="string">&quot;switch&quot;</span>, <span class="string">&quot;case&quot;</span>, <span class="string">&quot;include&quot;</span>, <span class="string">&quot;printf&quot;</span></span><br><span class="line">                        &#125;;</span><br><span class="line"><span class="comment">//分界符</span></span><br><span class="line"><span class="type">char</span> delimiters[] = &#123;<span class="string">&#x27;,&#x27;</span>, <span class="string">&#x27;;&#x27;</span>, <span class="string">&#x27;&#123;&#x27;</span>, <span class="string">&#x27;&#125;&#x27;</span>, <span class="string">&#x27;[&#x27;</span>, <span class="string">&#x27;]&#x27;</span>, <span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;)&#x27;</span>&#125;;</span><br></pre></td></tr></table></figure><ul><li>文件指针 f，指向待词法分析的文件。</li><li>结构体数组 ptr[MAX]，存储所有的子字符串及其标签。</li><li>字符变量 ch，表示当前从文件中提取出来的字符,采用全局变量避免函数之间相互传参。</li><li>整型变量 num，作为结构体数组的索引。</li><li>存有全部运算符的数组 operators[11]，用于判断当前读入字符是否是运算符。</li><li>存有全部保留字的数组 keywords[25][10]，用于判断当前子字符串是否是保留字（关键字）。</li><li>存有全部分界符的数组 delimiters[8]，用于判断当前读入字符是否为分界符。</li></ul><p><code>函数设计</code></p><p><strong>void ExtractText()</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">ExtractText</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(f);</span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">feof</span>(f)) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">illegal</span>() == <span class="number">-1</span>) &#123;</span><br><span class="line"><span class="type">char</span> s[<span class="number">100</span>] = <span class="string">&quot;error:Encountered non defined input and not in comment.\0&quot;</span>;</span><br><span class="line"><span class="built_in">strcpy</span>(ptr[num].words, s);</span><br><span class="line">ptr[num++].label = <span class="number">6</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">ischar</span>() == <span class="number">1</span>) &#123; <span class="comment">// 判断字符是不是字母</span></span><br><span class="line"><span class="built_in">Get_Words</span>();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">isnumber</span>() == <span class="number">1</span>) &#123; <span class="comment">// 判断字符是不是数字</span></span><br><span class="line"><span class="built_in">Get_Numbers</span>();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">isoperators</span>() == <span class="number">1</span>) &#123; <span class="comment">// 判断字符是不是运算符</span></span><br><span class="line"><span class="built_in">Get_Operators</span>();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">isdelimiters</span>() == <span class="number">1</span>) &#123; <span class="comment">// 判断字符是不是分界符</span></span><br><span class="line"><span class="built_in">Get_Delimiters</span>();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(f);  <span class="comment">// 以上都不符合的话就跳到下一个字符</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是实现词法分析的主要函数，此函数中，根据每个子字符串的开头分别调用不同的函数进行进一步分析。</p><p><strong>int illegal()</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">illegal</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">ischar</span>() == <span class="number">1</span> || <span class="built_in">isnumber</span>() == <span class="number">1</span> || <span class="built_in">isdelimiters</span>() == <span class="number">1</span> || <span class="built_in">isoperators</span>() == <span class="number">1</span> || <span class="built_in">isdot</span>() == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (ch == <span class="string">&#x27; &#x27;</span> || ch == <span class="string">&#x27;\n&#x27;</span> || ch == <span class="string">&#x27;\t&#x27;</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果当前读入字符不是字母、数字、分界符、运算符中的任意一个，则判断为非法字符。</p><p><strong>int ischar()</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">ischar</span><span class="params">()</span> </span>&#123;<span class="comment">//返回1表示是字母,返回-1表示不是字母</span></span><br><span class="line"><span class="keyword">if</span> ((ch &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;z&#x27;</span>) || (ch &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;Z&#x27;</span>))</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>判断当前读入字符是否为字母，是则返回 1，否则返回 -1。</p><p><strong>void Get_Words()</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Get_Words</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">ptr[num].words[j] = <span class="number">0</span>;<span class="comment">//初始化</span></span><br><span class="line"><span class="keyword">while</span> (ch != <span class="string">&#x27; &#x27;</span> &amp;&amp; ch != <span class="string">&#x27;\n&#x27;</span> &amp;&amp; ch != <span class="string">&#x27;\t&#x27;</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isdelimiters</span>() == <span class="number">1</span> || <span class="built_in">isoperators</span>() == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">illegal</span>() == <span class="number">-1</span>) &#123;</span><br><span class="line"><span class="type">char</span> s[<span class="number">100</span>] = <span class="string">&quot;error:Encountered non defined input and not in comment.\0&quot;</span>;</span><br><span class="line"><span class="built_in">strcpy</span>(ptr[num].words, s);</span><br><span class="line">ptr[num++].label = <span class="number">6</span>;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(f);</span><br><span class="line"><span class="keyword">while</span> (ch != <span class="string">&#x27; &#x27;</span> &amp;&amp; ch != <span class="string">&#x27;\n&#x27;</span> &amp;&amp; ch != <span class="string">&#x27;\t&#x27;</span> &amp;&amp; ch != <span class="string">&#x27;;&#x27;</span>) &#123;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(f);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (j &gt;= <span class="number">32</span>) &#123;<span class="comment">//变量名长度大于32位时，只取前32位</span></span><br><span class="line">ch = <span class="built_in">fgetc</span>(f);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">ptr[num].words[j++] = ch;</span><br><span class="line">&#125;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(f);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">iskeywords</span>() == <span class="number">1</span>) &#123;</span><br><span class="line">ptr[num].label = <span class="number">1</span>;<span class="comment">//关键字</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">ptr[num].label = <span class="number">2</span>;<span class="comment">//标识符</span></span><br><span class="line">&#125;</span><br><span class="line">++ num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当ischar()函数返回1，则调用该函数，将字符依次读入，然后判断该子字符串是标识符还是关键字（注意标识符最长为32位，超过32位则取前32位）</p><p><strong>int isnumber()</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">isnumber</span><span class="params">()</span> </span>&#123;<span class="comment">//返回1表示是数字,返回-1表示不是数字</span></span><br><span class="line"><span class="keyword">if</span> (ch &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>判断当前字符是否为数字，若是则返回1，否则返回-1。</p><p><strong>int isdot()</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">isdot</span><span class="params">()</span> </span>&#123;<span class="comment">//返回1表示是点,返回-1表示不是点</span></span><br><span class="line"><span class="keyword">if</span> (ch == <span class="string">&#x27;.&#x27;</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>判断当前字符是否为点，若是则返回1，否则返回-1。</p><p><strong>void Get_Numbers()</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Get_Numbers</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> j = <span class="number">0</span>, i = num;</span><br><span class="line"><span class="type">bool</span> flag = <span class="literal">false</span>;<span class="comment">//用来记录变量名是否合法的哨兵</span></span><br><span class="line"><span class="keyword">while</span> (ch != <span class="string">&#x27; &#x27;</span> &amp;&amp; ch != <span class="string">&#x27;\n&#x27;</span> &amp;&amp; ch != <span class="string">&#x27;\t&#x27;</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (!flag &amp;&amp; (<span class="built_in">ischar</span>() == <span class="number">1</span>)) &#123;<span class="comment">//变量名不能以数字开头</span></span><br><span class="line">flag = <span class="literal">true</span>;</span><br><span class="line"><span class="type">char</span> s[<span class="number">40</span>] = <span class="string">&quot;error:This is an illegal name.\0&quot;</span>;</span><br><span class="line"><span class="built_in">strcpy</span>(ptr[num].words, s);</span><br><span class="line">ptr[num++].label = <span class="number">6</span>;</span><br><span class="line"><span class="comment">//printf(&quot;error:This is an illegal name.\n&quot;);</span></span><br><span class="line"><span class="comment">//++i;</span></span><br><span class="line"><span class="comment">//break;</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!flag &amp;&amp; <span class="built_in">illegal</span>() == <span class="number">-1</span>) &#123;</span><br><span class="line"><span class="type">char</span> s[<span class="number">100</span>] = <span class="string">&quot;error:Encountered non defined input and not in comment.\0&quot;</span>;</span><br><span class="line"><span class="built_in">strcpy</span>(ptr[num].words, s);</span><br><span class="line">ptr[num++].label = <span class="number">6</span>;</span><br><span class="line">flag = <span class="literal">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!flag &amp;&amp; (<span class="built_in">isdelimiters</span>() == <span class="number">1</span> || <span class="built_in">isoperators</span>() == <span class="number">1</span>)) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!flag &amp;&amp; (<span class="built_in">isnumber</span>() == <span class="number">1</span> || <span class="built_in">isdot</span>() == <span class="number">1</span>)) &#123;</span><br><span class="line">ptr[num].words[j++] = ch;</span><br><span class="line">ptr[num].label = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(f);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (i == num) ++num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当isnumber()函数返回1则调用该函数，进行无符号数进行判断。若读取过程中遇到字母，则表示错误变量名，标记错误为：“error:This is an illegal name.”。</p><p>若读取过程中遇到其他字符，则表示错误，标记错误为：“error:Encountered non defined input and not in comment.”。</p><p><strong>int iskeywords()</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">iskeywords</span><span class="params">()</span> </span>&#123;<span class="comment">//返回1表示当前字符串是关键字,返回-1表示不是关键字</span></span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">25</span>; ++ i)</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strcmp</span>(keywords[i], ptr[num].words) == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果当前子字符串是关键字则返回1，否则返回-1。</p><p><strong>int isoperators()</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">isoperators</span><span class="params">()</span> </span>&#123;<span class="comment">//返回1表示是运算符,返回-1则不是运算符</span></span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">11</span>; ++ i)</span><br><span class="line"><span class="keyword">if</span> (ch == operators[i])</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果当前字符为运算符则返回1，否则返回-1。</p><p><strong>void Get_Operators()</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Get_Operators</span><span class="params">()</span> </span>&#123;<span class="comment">//operators[11] = &#123;&#x27;+&#x27;, &#x27;-&#x27;, &#x27;*&#x27;, &#x27;/&#x27;, &#x27;%&#x27;, &#x27;=&#x27;, &#x27;&gt;&#x27;, &#x27;&lt;&#x27;, &#x27;!&#x27;, &#x27;&amp;&#x27;, &#x27;|&#x27;&#125;;</span></span><br><span class="line"><span class="type">char</span> tmp = ch;</span><br><span class="line"><span class="type">char</span> s[<span class="number">40</span>] = <span class="string">&quot;error: wrong operators match.\0&quot;</span>;</span><br><span class="line"><span class="type">char</span> s2[<span class="number">40</span>] = <span class="string">&quot;error: too many operators in a row.\0&quot;</span>;</span><br><span class="line"><span class="keyword">switch</span> (tmp) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>: &#123;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(f);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isoperators</span>() == <span class="number">1</span> &amp;&amp; (ch != <span class="string">&#x27;+&#x27;</span> &amp;&amp; ch != <span class="string">&#x27;=&#x27;</span>)) &#123;</span><br><span class="line"><span class="built_in">strcpy</span>(ptr[num].words, s);</span><br><span class="line">ptr[num++].label = <span class="number">6</span>;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(f);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;<span class="comment">// ++ +=</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isoperators</span>() != <span class="number">1</span>) &#123;</span><br><span class="line">ptr[num].words[<span class="number">0</span>] = tmp;</span><br><span class="line">ptr[num++].label = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> tmp2 = ch;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(f);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isoperators</span>() == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">strcpy</span>(ptr[num].words, s2);</span><br><span class="line">ptr[num++].label = <span class="number">6</span>;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(f);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">ptr[num].words[<span class="number">0</span>] = tmp;</span><br><span class="line">ptr[num].words[<span class="number">1</span>] = tmp2;</span><br><span class="line">ptr[num++].label = <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>: &#123;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(f);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isoperators</span>() == <span class="number">1</span> &amp;&amp; (ch != <span class="string">&#x27;-&#x27;</span> &amp;&amp; ch != <span class="string">&#x27;=&#x27;</span>)) &#123;</span><br><span class="line"><span class="built_in">strcpy</span>(ptr[num].words, s);</span><br><span class="line">ptr[num++].label = <span class="number">6</span>;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(f);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;<span class="comment">// -- -=</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isoperators</span>() != <span class="number">1</span>) &#123;</span><br><span class="line">ptr[num].words[<span class="number">0</span>] = tmp;</span><br><span class="line">ptr[num++].label = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> tmp2 = ch;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(f);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isoperators</span>() == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">strcpy</span>(ptr[num].words, s2);</span><br><span class="line">ptr[num++].label = <span class="number">6</span>;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(f);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">ptr[num].words[<span class="number">0</span>] = tmp;</span><br><span class="line">ptr[num].words[<span class="number">1</span>] = tmp2;</span><br><span class="line">ptr[num++].label = <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>: &#123;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(f);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isoperators</span>() == <span class="number">1</span> &amp;&amp; (ch != <span class="string">&#x27;*&#x27;</span> &amp;&amp; ch != <span class="string">&#x27;=&#x27;</span>)) &#123;</span><br><span class="line"><span class="built_in">strcpy</span>(ptr[num].words, s);</span><br><span class="line">ptr[num++].label = <span class="number">6</span>;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(f);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;<span class="comment">// ** *=</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isoperators</span>() != <span class="number">1</span>) &#123;</span><br><span class="line">ptr[num].words[<span class="number">0</span>] = tmp;</span><br><span class="line">ptr[num++].label = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> tmp2 = ch;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(f);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isoperators</span>() == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">strcpy</span>(ptr[num].words, s2);</span><br><span class="line">ptr[num++].label = <span class="number">6</span>;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(f);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">ptr[num].words[<span class="number">0</span>] = tmp;</span><br><span class="line">ptr[num].words[<span class="number">1</span>] = tmp2;</span><br><span class="line">ptr[num++].label = <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>: &#123;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(f);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isoperators</span>() == <span class="number">1</span> &amp;&amp; (ch != <span class="string">&#x27;/&#x27;</span> &amp;&amp; ch != <span class="string">&#x27;*&#x27;</span> &amp;&amp; ch != <span class="string">&#x27;=&#x27;</span>)) &#123;</span><br><span class="line"><span class="built_in">strcpy</span>(ptr[num].words, s);</span><br><span class="line">ptr[num++].label = <span class="number">6</span>;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(f);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;<span class="comment">// 单行注释// 跨行注释/**/  运算符 / 或 /=</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isoperators</span>() != <span class="number">1</span>) &#123;</span><br><span class="line">ptr[num].words[<span class="number">0</span>] = tmp;</span><br><span class="line">ptr[num++].label = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (ch == <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;这是单行注释&quot; &lt;&lt; endl;</span></span><br><span class="line">ch = <span class="built_in">fgetc</span>(f);</span><br><span class="line"><span class="keyword">while</span> (ch != <span class="string">&#x27;\n&#x27;</span>) &#123;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(f);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">&#x27;*&#x27;</span>) &#123;<span class="comment">//这是多行注释开始的标记</span></span><br><span class="line"><span class="type">bool</span> end = <span class="literal">false</span>;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(f);</span><br><span class="line"><span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (!end) &#123;</span><br><span class="line">tmp = ch;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(f);</span><br><span class="line"><span class="keyword">if</span> (tmp == <span class="string">&#x27;*&#x27;</span> &amp;&amp; ch == <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line">end = <span class="literal">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//ptr[num].words[j++] = tmp;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(f);</span><br><span class="line"><span class="comment">//ptr[num].words[j++] = &#x27;\0&#x27;;</span></span><br><span class="line"><span class="comment">//ptr[num++].label = 7;</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;<span class="comment">// /=</span></span><br><span class="line"><span class="type">char</span> tmp2 = ch;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(f);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isoperators</span>() == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">strcpy</span>(ptr[num].words, s2);</span><br><span class="line">ptr[num++].label = <span class="number">6</span>;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(f);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">ptr[num].words[<span class="number">0</span>] = tmp;</span><br><span class="line">ptr[num].words[<span class="number">1</span>] = tmp2;</span><br><span class="line">ptr[num++].label = <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;%&#x27;</span>: &#123;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(f);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isoperators</span>() == <span class="number">1</span> &amp;&amp; (ch != <span class="string">&#x27;%&#x27;</span> &amp;&amp; ch != <span class="string">&#x27;=&#x27;</span>)) &#123;</span><br><span class="line"><span class="built_in">strcpy</span>(ptr[num].words, s);</span><br><span class="line">ptr[num++].label = <span class="number">6</span>;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(f);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;<span class="comment">// % %% %=</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isoperators</span>() != <span class="number">1</span>) &#123;</span><br><span class="line">ptr[num].words[<span class="number">0</span>] = tmp;</span><br><span class="line">ptr[num++].label = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> tmp2 = ch;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(f);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isoperators</span>() == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">strcpy</span>(ptr[num].words, s2);</span><br><span class="line">ptr[num++].label = <span class="number">6</span>;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(f);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">ptr[num].words[<span class="number">0</span>] = tmp;</span><br><span class="line">ptr[num].words[<span class="number">1</span>] = tmp2;</span><br><span class="line">ptr[num++].label = <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;=&#x27;</span>: &#123;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(f);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isoperators</span>() == <span class="number">1</span> &amp;&amp; ch != <span class="string">&#x27;=&#x27;</span>) &#123;</span><br><span class="line"><span class="built_in">strcpy</span>(ptr[num].words, s);</span><br><span class="line">ptr[num++].label = <span class="number">6</span>;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(f);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;<span class="comment">// = ==</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isoperators</span>() != <span class="number">1</span>) &#123;</span><br><span class="line">ptr[num].words[<span class="number">0</span>] = tmp;</span><br><span class="line">ptr[num++].label = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> tmp2 = ch;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(f);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isoperators</span>() == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">strcpy</span>(ptr[num].words, s2);</span><br><span class="line">ptr[num++].label = <span class="number">6</span>;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(f);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">ptr[num].words[<span class="number">0</span>] = tmp;</span><br><span class="line">ptr[num].words[<span class="number">1</span>] = tmp2;</span><br><span class="line">ptr[num++].label = <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;&gt;&#x27;</span>: &#123;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(f);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isoperators</span>() == <span class="number">1</span> &amp;&amp; (ch != <span class="string">&#x27;&gt;&#x27;</span> &amp;&amp; ch != <span class="string">&#x27;=&#x27;</span>)) &#123;</span><br><span class="line"><span class="built_in">strcpy</span>(ptr[num].words, s);</span><br><span class="line">ptr[num++].label = <span class="number">6</span>;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(f);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;<span class="comment">// &gt; &gt;&gt; &gt;=</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isoperators</span>() != <span class="number">1</span>) &#123;</span><br><span class="line">ptr[num].words[<span class="number">0</span>] = tmp;</span><br><span class="line">ptr[num++].label = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> tmp2 = ch;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(f);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isoperators</span>() == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">strcpy</span>(ptr[num].words, s2);</span><br><span class="line">ptr[num++].label = <span class="number">6</span>;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(f);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">ptr[num].words[<span class="number">0</span>] = tmp;</span><br><span class="line">ptr[num].words[<span class="number">1</span>] = tmp2;</span><br><span class="line">ptr[num++].label = <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;&lt;&#x27;</span>: &#123;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(f);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isoperators</span>() == <span class="number">1</span> &amp;&amp; (ch != <span class="string">&#x27;&lt;&#x27;</span> &amp;&amp; ch != <span class="string">&#x27;=&#x27;</span>)) &#123;</span><br><span class="line"><span class="built_in">strcpy</span>(ptr[num].words, s);</span><br><span class="line">ptr[num++].label = <span class="number">6</span>;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(f);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;<span class="comment">// &lt; &lt;&lt; &lt;=</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isoperators</span>() != <span class="number">1</span>) &#123;</span><br><span class="line">ptr[num].words[<span class="number">0</span>] = tmp;</span><br><span class="line">ptr[num++].label = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> tmp2 = ch;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(f);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isoperators</span>() == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">strcpy</span>(ptr[num].words, s2);</span><br><span class="line">ptr[num++].label = <span class="number">6</span>;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(f);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">ptr[num].words[<span class="number">0</span>] = tmp;</span><br><span class="line">ptr[num].words[<span class="number">1</span>] = tmp2;</span><br><span class="line">ptr[num++].label = <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;!&#x27;</span>: &#123;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(f);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isoperators</span>() == <span class="number">1</span> &amp;&amp; ch != <span class="string">&#x27;=&#x27;</span>) &#123;</span><br><span class="line"><span class="built_in">strcpy</span>(ptr[num].words, s);</span><br><span class="line">ptr[num++].label = <span class="number">6</span>;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(f);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;<span class="comment">// ! !=</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isoperators</span>() != <span class="number">1</span>) &#123;</span><br><span class="line">ptr[num].words[<span class="number">0</span>] = tmp;</span><br><span class="line">ptr[num++].label = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> tmp2 = ch;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(f);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isoperators</span>() == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">strcpy</span>(ptr[num].words, s2);</span><br><span class="line">ptr[num++].label = <span class="number">6</span>;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(f);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">ptr[num].words[<span class="number">0</span>] = tmp;</span><br><span class="line">ptr[num].words[<span class="number">1</span>] = tmp2;</span><br><span class="line">ptr[num++].label = <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;&amp;&#x27;</span> : &#123;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(f);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isoperators</span>() == <span class="number">1</span> &amp;&amp; (ch != <span class="string">&#x27;&amp;&#x27;</span> &amp;&amp; ch != <span class="string">&#x27;=&#x27;</span>)) &#123;</span><br><span class="line"><span class="built_in">strcpy</span>(ptr[num].words, s);</span><br><span class="line">ptr[num++].label = <span class="number">6</span>;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(f);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;<span class="comment">// &amp; &amp;&amp; &amp;=</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isoperators</span>() != <span class="number">1</span>) &#123;</span><br><span class="line">ptr[num].words[<span class="number">0</span>] = tmp;</span><br><span class="line">ptr[num++].label = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> tmp2 = ch;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(f);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isoperators</span>() == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">strcpy</span>(ptr[num].words, s2);</span><br><span class="line">ptr[num++].label = <span class="number">6</span>;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(f);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">ptr[num].words[<span class="number">0</span>] = tmp;</span><br><span class="line">ptr[num].words[<span class="number">1</span>] = tmp2;</span><br><span class="line">ptr[num++].label = <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>: &#123;<span class="comment">// case |</span></span><br><span class="line">ch = <span class="built_in">fgetc</span>(f);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isoperators</span>() == <span class="number">1</span> &amp;&amp; (ch != <span class="string">&#x27;|&#x27;</span> &amp;&amp; ch != <span class="string">&#x27;=&#x27;</span>)) &#123;</span><br><span class="line"><span class="built_in">strcpy</span>(ptr[num].words, s);</span><br><span class="line">ptr[num++].label = <span class="number">6</span>;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(f);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;<span class="comment">// | || |=</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isoperators</span>() != <span class="number">1</span>) &#123;</span><br><span class="line">ptr[num].words[<span class="number">0</span>] = tmp;</span><br><span class="line">ptr[num++].label = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> tmp2 = ch;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(f);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isoperators</span>() == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">strcpy</span>(ptr[num].words, s2);</span><br><span class="line">ptr[num++].label = <span class="number">6</span>;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(f);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">ptr[num].words[<span class="number">0</span>] = tmp;</span><br><span class="line">ptr[num].words[<span class="number">1</span>] = tmp2;</span><br><span class="line">ptr[num++].label = <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果函数isoperators()返回1则调用该函数，判断运算符是否合法。</p><p>如果连续运算符大于等于三个，则报错，标记错误为：“error: too many operators in a row.”。</p><p>如果运算符搭配错误，则报错，标记错误为：“error: wrong operators match.”。</p><p>同时当第一个运算符为 &#x2F; 时，这里采用<strong>超前读字符</strong>，判断是否是单行注释或者是多行注释的开头。</p><p>合法运算符组合有：&#96;+、++、+&#x3D;、-、–、-&#x3D;、*、**、*&#x3D;、&#x2F;、&#x2F;&#x3D;、%、%%、%&#x3D;、&#x3D;、&#x3D;&#x3D;、&gt;、&gt;&gt;、&gt;&#x3D;、&lt;、&lt;&lt;、&lt;&#x3D;、!、!&#x3D;、&amp;、&amp;&amp;、&amp;&#x3D;、|、||、|&#x3D;&#96;&#96;</p><p><strong>int isdelimiters()</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">isdelimiters</span><span class="params">()</span> </span>&#123;<span class="comment">//返回1表示是分隔符,返回-1表示不是分隔符</span></span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">8</span>; ++ i)</span><br><span class="line"><span class="keyword">if</span> (ch == delimiters[i])</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>若当前字符为分隔符则返回1，否则返回-1。</p><p><strong>void Get_Delimiters()</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Get_Delimiters</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ptr[num].words[<span class="number">0</span>] = ch;</span><br><span class="line">ptr[num].label = <span class="number">5</span>;</span><br><span class="line">++num;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(f);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果函数isdelimiters()返回1，则调用该函数，将分隔符存入结构体数组。</p><p><strong>int main()</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//打开测试用例文件</span></span><br><span class="line">f = <span class="built_in">fopen</span>(PATH1, <span class="string">&quot;r&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (f == <span class="literal">NULL</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;ERROR: Unable to open file&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//开启词法分析</span></span><br><span class="line"><span class="built_in">ExtractText</span>();</span><br><span class="line"><span class="comment">//生成中间结果文件</span></span><br><span class="line">FILE *result = <span class="built_in">fopen</span>(PATH2, <span class="string">&quot;w&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (result == <span class="literal">NULL</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;ERROR: Unable to open file&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将词法分析结果打印在屏幕上</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; num; ++ i) &#123;</span><br><span class="line"><span class="keyword">if</span> (ptr[i].label != <span class="number">6</span>) &#123;</span><br><span class="line"><span class="built_in">fprintf</span>(result, <span class="string">&quot;(\&quot;%s\&quot;,%d)\n&quot;</span>, ptr[i].words, ptr[i].label);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;(\&quot;%s\&quot;,%d)\n&quot;</span>, ptr[i].words, ptr[i].label);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">fprintf</span>(result, <span class="string">&quot;\&quot;%s\&quot;\n&quot;</span>, ptr[i].words);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\&quot;%s\&quot;\n&quot;</span>, ptr[i].words);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> end = <span class="string">&#x27;#&#x27;</span>;<span class="comment">//为了递归下降分析新加</span></span><br><span class="line"><span class="built_in">fprintf</span>(result, <span class="string">&quot;%c&quot;</span> ,end);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实验测试"><a href="#实验测试" class="headerlink" title="实验测试"></a>实验测试</h3><h4 id="测试用例一"><a href="#测试用例一" class="headerlink" title="测试用例一"></a>测试用例一</h4><p>包含非法字符、非法变量名以及多行注释</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240115114847063.png" alt="image-20240115114847063"></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240115114903165.png" alt="image-20240115114903165"></p><p>第六行，3ab是个非法变量名。</p><p>第七行，name#是个非法变量名同时#出现在非注释地方属于非法字符，报错。</p><p>第九行，5.4343#是个非法的无符号整数。</p><h4 id="测试用例二"><a href="#测试用例二" class="headerlink" title="测试用例二"></a>测试用例二</h4><p>包含非法三字符运算符、多行注释</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240115114936947.png" alt="image-20240115114936947"></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240115114943794.png" alt="image-20240115114943794"></p><p>第三行，a+++属于非法的三字符运算符。</p><p>第五行，&#x2F;&#x2F;后面为单行注释内容，不输出。</p><p>第六行到第十行，为多行注释内容，不输出。</p><h4 id="测试用例三"><a href="#测试用例三" class="headerlink" title="测试用例三"></a>测试用例三</h4><p>包含非法字符和错误顺序的双字符运算符</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240115114950620.png" alt="image-20240115114950620"></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240115114956136.png" alt="image-20240115114956136"></p><p>第四行，？出现在非注释地方，属于非法字符。</p><p>第六行，&#x3D;+属于错误顺序的双字符运算符，报错。</p><h4 id="测试用例四"><a href="#测试用例四" class="headerlink" title="测试用例四"></a>测试用例四</h4><p>包含单行注释、多行注释、大于32位的标识符</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240115115002898.png" alt="image-20240115115002898"></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240115115008787.png" alt="image-20240115115008787"></p><p>第五行，存在一个超过32位的标识符，这里只取前32位。</p><p>第六行，&#x2F;&#x2F;后为单行注释内容，不输出。</p><p>第七行到第九行，为多行注释内容，不输出。</p><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX 1024</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">chars</span> &#123;</span><br><span class="line"><span class="type">char</span> words[<span class="number">110</span>];  <span class="comment">//字符串</span></span><br><span class="line"><span class="type">int</span> label;    <span class="comment">//标签,即单词类别</span></span><br><span class="line">&#125; chars;</span><br><span class="line"></span><br><span class="line">FILE* f; <span class="comment">//待分析文件</span></span><br><span class="line">chars ptr[MAX]; <span class="comment">//存储所有的子字符串及其标签</span></span><br><span class="line"><span class="type">char</span> ch; <span class="comment">//表示当前从文件中提取出来的字符,采用全局变量避免函数之间相互传参</span></span><br><span class="line"><span class="type">int</span> num = <span class="number">0</span>; <span class="comment">//作为结构体数组ptr的索引，每当有内容存入到ptr中时，num就会加1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 运算符</span></span><br><span class="line"><span class="type">char</span> operators[<span class="number">11</span>] = &#123;<span class="string">&#x27;+&#x27;</span>, <span class="string">&#x27;-&#x27;</span>, <span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;%&#x27;</span>, <span class="string">&#x27;=&#x27;</span>, <span class="string">&#x27;&gt;&#x27;</span>, <span class="string">&#x27;&lt;&#x27;</span>, <span class="string">&#x27;!&#x27;</span>, <span class="string">&#x27;&amp;&#x27;</span>, <span class="string">&#x27;|&#x27;</span>&#125;;</span><br><span class="line"><span class="comment">//保留字，也叫作关键字</span></span><br><span class="line"><span class="type">char</span> keywords[<span class="number">25</span>][<span class="number">10</span>] = &#123;<span class="string">&quot;int&quot;</span>, <span class="string">&quot;char&quot;</span>, <span class="string">&quot;string&quot;</span>, <span class="string">&quot;void&quot;</span>, <span class="string">&quot;bool&quot;</span>, <span class="string">&quot;float&quot;</span>, <span class="string">&quot;double&quot;</span>, <span class="string">&quot;float&quot;</span>, <span class="string">&quot;true&quot;</span>, <span class="string">&quot;false&quot;</span>, <span class="string">&quot;return&quot;</span>, <span class="string">&quot;main&quot;</span>, <span class="string">&quot;scanf&quot;</span>,</span><br><span class="line">                         <span class="string">&quot;if&quot;</span>, <span class="string">&quot;else&quot;</span>, <span class="string">&quot;while&quot;</span>, <span class="string">&quot;for&quot;</span>, <span class="string">&quot;default&quot;</span>, <span class="string">&quot;do&quot;</span>, <span class="string">&quot;public&quot;</span>, <span class="string">&quot;static&quot;</span>, <span class="string">&quot;switch&quot;</span>, <span class="string">&quot;case&quot;</span>, <span class="string">&quot;include&quot;</span>, <span class="string">&quot;printf&quot;</span></span><br><span class="line">                        &#125;;</span><br><span class="line"><span class="comment">//分界符</span></span><br><span class="line"><span class="type">char</span> delimiters[] = &#123;<span class="string">&#x27;,&#x27;</span>, <span class="string">&#x27;;&#x27;</span>, <span class="string">&#x27;&#123;&#x27;</span>, <span class="string">&#x27;&#125;&#x27;</span>, <span class="string">&#x27;[&#x27;</span>, <span class="string">&#x27;]&#x27;</span>, <span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;)&#x27;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ExtractText</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">illegal</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ischar</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Get_Words</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">isnumber</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">isdot</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Get_Numbers</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">iskeywords</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">isoperators</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Get_Operators</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">isdelimiters</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Get_Delimiters</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//打开测试用例文件</span></span><br><span class="line">f = <span class="built_in">fopen</span>(PATH1, <span class="string">&quot;r&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (f == <span class="literal">NULL</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;ERROR: Unable to open file&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//开启词法分析</span></span><br><span class="line"><span class="built_in">ExtractText</span>();</span><br><span class="line"><span class="comment">//生成中间结果文件</span></span><br><span class="line">FILE *result = <span class="built_in">fopen</span>(PATH2, <span class="string">&quot;w&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (result == <span class="literal">NULL</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;ERROR: Unable to open file&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将词法分析结果打印在屏幕上</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; num; ++ i) &#123;</span><br><span class="line"><span class="keyword">if</span> (ptr[i].label != <span class="number">6</span>) &#123;</span><br><span class="line"><span class="built_in">fprintf</span>(result, <span class="string">&quot;(\&quot;%s\&quot;,%d)\n&quot;</span>, ptr[i].words, ptr[i].label);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;(\&quot;%s\&quot;,%d)\n&quot;</span>, ptr[i].words, ptr[i].label);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">fprintf</span>(result, <span class="string">&quot;\&quot;%s\&quot;\n&quot;</span>, ptr[i].words);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\&quot;%s\&quot;\n&quot;</span>, ptr[i].words);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> end = <span class="string">&#x27;#&#x27;</span>;<span class="comment">//为了递归下降分析新加</span></span><br><span class="line"><span class="built_in">fprintf</span>(result, <span class="string">&quot;%c&quot;</span> ,end);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ExtractText</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(f);</span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">feof</span>(f)) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">illegal</span>() == <span class="number">-1</span>) &#123;</span><br><span class="line"><span class="type">char</span> s[<span class="number">100</span>] = <span class="string">&quot;error:Encountered non defined input and not in comment.\0&quot;</span>;</span><br><span class="line"><span class="built_in">strcpy</span>(ptr[num].words, s);</span><br><span class="line">ptr[num++].label = <span class="number">6</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">ischar</span>() == <span class="number">1</span>) &#123; <span class="comment">// 判断字符是不是字母</span></span><br><span class="line"><span class="built_in">Get_Words</span>();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">isnumber</span>() == <span class="number">1</span>) &#123; <span class="comment">// 判断字符是不是数字</span></span><br><span class="line"><span class="built_in">Get_Numbers</span>();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">isoperators</span>() == <span class="number">1</span>) &#123; <span class="comment">// 判断字符是不是运算符</span></span><br><span class="line"><span class="built_in">Get_Operators</span>();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">isdelimiters</span>() == <span class="number">1</span>) &#123; <span class="comment">// 判断字符是不是分界符</span></span><br><span class="line"><span class="built_in">Get_Delimiters</span>();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(f);  <span class="comment">// 以上都不符合的话就跳到下一个字符</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">illegal</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">ischar</span>() == <span class="number">1</span> || <span class="built_in">isnumber</span>() == <span class="number">1</span> || <span class="built_in">isdelimiters</span>() == <span class="number">1</span> || <span class="built_in">isoperators</span>() == <span class="number">1</span> || <span class="built_in">isdot</span>() == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (ch == <span class="string">&#x27; &#x27;</span> || ch == <span class="string">&#x27;\n&#x27;</span> || ch == <span class="string">&#x27;\t&#x27;</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ischar</span><span class="params">()</span> </span>&#123;<span class="comment">//返回1表示是字母,返回-1表示不是字母</span></span><br><span class="line"><span class="keyword">if</span> ((ch &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;z&#x27;</span>) || (ch &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;Z&#x27;</span>))</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Get_Words</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">ptr[num].words[j] = <span class="number">0</span>;<span class="comment">//初始化</span></span><br><span class="line"><span class="keyword">while</span> (ch != <span class="string">&#x27; &#x27;</span> &amp;&amp; ch != <span class="string">&#x27;\n&#x27;</span> &amp;&amp; ch != <span class="string">&#x27;\t&#x27;</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isdelimiters</span>() == <span class="number">1</span> || <span class="built_in">isoperators</span>() == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">illegal</span>() == <span class="number">-1</span>) &#123;</span><br><span class="line"><span class="type">char</span> s[<span class="number">100</span>] = <span class="string">&quot;error:Encountered non defined input and not in comment.\0&quot;</span>;</span><br><span class="line"><span class="built_in">strcpy</span>(ptr[num].words, s);</span><br><span class="line">ptr[num++].label = <span class="number">6</span>;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(f);</span><br><span class="line"><span class="keyword">while</span> (ch != <span class="string">&#x27; &#x27;</span> &amp;&amp; ch != <span class="string">&#x27;\n&#x27;</span> &amp;&amp; ch != <span class="string">&#x27;\t&#x27;</span> &amp;&amp; ch != <span class="string">&#x27;;&#x27;</span>) &#123;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(f);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (j &gt;= <span class="number">32</span>) &#123;<span class="comment">//变量名长度大于32位时，只取前32位</span></span><br><span class="line">ch = <span class="built_in">fgetc</span>(f);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">ptr[num].words[j++] = ch;</span><br><span class="line">&#125;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(f);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">iskeywords</span>() == <span class="number">1</span>) &#123;</span><br><span class="line">ptr[num].label = <span class="number">1</span>;<span class="comment">//关键字</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">ptr[num].label = <span class="number">2</span>;<span class="comment">//标识符</span></span><br><span class="line">&#125;</span><br><span class="line">++ num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">isnumber</span><span class="params">()</span> </span>&#123;<span class="comment">//返回1表示是数字,返回-1表示不是数字</span></span><br><span class="line"><span class="keyword">if</span> (ch &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">isdot</span><span class="params">()</span> </span>&#123;<span class="comment">//返回1表示是点,返回-1表示不是点</span></span><br><span class="line"><span class="keyword">if</span> (ch == <span class="string">&#x27;.&#x27;</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Get_Numbers</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> j = <span class="number">0</span>, i = num;</span><br><span class="line"><span class="type">bool</span> flag = <span class="literal">false</span>;<span class="comment">//用来记录变量名是否合法的哨兵</span></span><br><span class="line"><span class="keyword">while</span> (ch != <span class="string">&#x27; &#x27;</span> &amp;&amp; ch != <span class="string">&#x27;\n&#x27;</span> &amp;&amp; ch != <span class="string">&#x27;\t&#x27;</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (!flag &amp;&amp; (<span class="built_in">ischar</span>() == <span class="number">1</span>)) &#123;<span class="comment">//变量名不能以数字开头</span></span><br><span class="line">flag = <span class="literal">true</span>;</span><br><span class="line"><span class="type">char</span> s[<span class="number">40</span>] = <span class="string">&quot;error:This is an illegal name.\0&quot;</span>;</span><br><span class="line"><span class="built_in">strcpy</span>(ptr[num].words, s);</span><br><span class="line">ptr[num++].label = <span class="number">6</span>;</span><br><span class="line"><span class="comment">//printf(&quot;error:This is an illegal name.\n&quot;);</span></span><br><span class="line"><span class="comment">//++i;</span></span><br><span class="line"><span class="comment">//break;</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!flag &amp;&amp; <span class="built_in">illegal</span>() == <span class="number">-1</span>) &#123;</span><br><span class="line"><span class="type">char</span> s[<span class="number">100</span>] = <span class="string">&quot;error:Encountered non defined input and not in comment.\0&quot;</span>;</span><br><span class="line"><span class="built_in">strcpy</span>(ptr[num].words, s);</span><br><span class="line">ptr[num++].label = <span class="number">6</span>;</span><br><span class="line">flag = <span class="literal">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!flag &amp;&amp; (<span class="built_in">isdelimiters</span>() == <span class="number">1</span> || <span class="built_in">isoperators</span>() == <span class="number">1</span>)) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!flag &amp;&amp; (<span class="built_in">isnumber</span>() == <span class="number">1</span> || <span class="built_in">isdot</span>() == <span class="number">1</span>)) &#123;</span><br><span class="line">ptr[num].words[j++] = ch;</span><br><span class="line">ptr[num].label = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(f);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (i == num) ++num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">iskeywords</span><span class="params">()</span> </span>&#123;<span class="comment">//返回1表示当前字符串是关键字,返回-1表示不是关键字</span></span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">25</span>; ++ i)</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strcmp</span>(keywords[i], ptr[num].words) == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">isoperators</span><span class="params">()</span> </span>&#123;<span class="comment">//返回1表示是运算符,返回-1则不是运算符</span></span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">11</span>; ++ i)</span><br><span class="line"><span class="keyword">if</span> (ch == operators[i])</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Get_Operators</span><span class="params">()</span> </span>&#123;<span class="comment">//operators[11] = &#123;&#x27;+&#x27;, &#x27;-&#x27;, &#x27;*&#x27;, &#x27;/&#x27;, &#x27;%&#x27;, &#x27;=&#x27;, &#x27;&gt;&#x27;, &#x27;&lt;&#x27;, &#x27;!&#x27;, &#x27;&amp;&#x27;, &#x27;|&#x27;&#125;;</span></span><br><span class="line"><span class="type">char</span> tmp = ch;</span><br><span class="line"><span class="type">char</span> s[<span class="number">40</span>] = <span class="string">&quot;error: wrong operators match.\0&quot;</span>;</span><br><span class="line"><span class="type">char</span> s2[<span class="number">40</span>] = <span class="string">&quot;error: too many operators in a row.\0&quot;</span>;</span><br><span class="line"><span class="keyword">switch</span> (tmp) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>: &#123;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(f);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isoperators</span>() == <span class="number">1</span> &amp;&amp; (ch != <span class="string">&#x27;+&#x27;</span> &amp;&amp; ch != <span class="string">&#x27;=&#x27;</span>)) &#123;</span><br><span class="line"><span class="built_in">strcpy</span>(ptr[num].words, s);</span><br><span class="line">ptr[num++].label = <span class="number">6</span>;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(f);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;<span class="comment">// ++ +=</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isoperators</span>() != <span class="number">1</span>) &#123;</span><br><span class="line">ptr[num].words[<span class="number">0</span>] = tmp;</span><br><span class="line">ptr[num++].label = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> tmp2 = ch;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(f);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isoperators</span>() == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">strcpy</span>(ptr[num].words, s2);</span><br><span class="line">ptr[num++].label = <span class="number">6</span>;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(f);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">ptr[num].words[<span class="number">0</span>] = tmp;</span><br><span class="line">ptr[num].words[<span class="number">1</span>] = tmp2;</span><br><span class="line">ptr[num++].label = <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>: &#123;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(f);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isoperators</span>() == <span class="number">1</span> &amp;&amp; (ch != <span class="string">&#x27;-&#x27;</span> &amp;&amp; ch != <span class="string">&#x27;=&#x27;</span>)) &#123;</span><br><span class="line"><span class="built_in">strcpy</span>(ptr[num].words, s);</span><br><span class="line">ptr[num++].label = <span class="number">6</span>;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(f);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;<span class="comment">// -- -=</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isoperators</span>() != <span class="number">1</span>) &#123;</span><br><span class="line">ptr[num].words[<span class="number">0</span>] = tmp;</span><br><span class="line">ptr[num++].label = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> tmp2 = ch;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(f);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isoperators</span>() == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">strcpy</span>(ptr[num].words, s2);</span><br><span class="line">ptr[num++].label = <span class="number">6</span>;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(f);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">ptr[num].words[<span class="number">0</span>] = tmp;</span><br><span class="line">ptr[num].words[<span class="number">1</span>] = tmp2;</span><br><span class="line">ptr[num++].label = <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>: &#123;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(f);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isoperators</span>() == <span class="number">1</span> &amp;&amp; (ch != <span class="string">&#x27;*&#x27;</span> &amp;&amp; ch != <span class="string">&#x27;=&#x27;</span>)) &#123;</span><br><span class="line"><span class="built_in">strcpy</span>(ptr[num].words, s);</span><br><span class="line">ptr[num++].label = <span class="number">6</span>;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(f);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;<span class="comment">// ** *=</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isoperators</span>() != <span class="number">1</span>) &#123;</span><br><span class="line">ptr[num].words[<span class="number">0</span>] = tmp;</span><br><span class="line">ptr[num++].label = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> tmp2 = ch;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(f);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isoperators</span>() == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">strcpy</span>(ptr[num].words, s2);</span><br><span class="line">ptr[num++].label = <span class="number">6</span>;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(f);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">ptr[num].words[<span class="number">0</span>] = tmp;</span><br><span class="line">ptr[num].words[<span class="number">1</span>] = tmp2;</span><br><span class="line">ptr[num++].label = <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>: &#123;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(f);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isoperators</span>() == <span class="number">1</span> &amp;&amp; (ch != <span class="string">&#x27;/&#x27;</span> &amp;&amp; ch != <span class="string">&#x27;*&#x27;</span> &amp;&amp; ch != <span class="string">&#x27;=&#x27;</span>)) &#123;</span><br><span class="line"><span class="built_in">strcpy</span>(ptr[num].words, s);</span><br><span class="line">ptr[num++].label = <span class="number">6</span>;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(f);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;<span class="comment">// 单行注释// 跨行注释/**/  运算符 / 或 /=</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isoperators</span>() != <span class="number">1</span>) &#123;</span><br><span class="line">ptr[num].words[<span class="number">0</span>] = tmp;</span><br><span class="line">ptr[num++].label = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (ch == <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line"><span class="comment">//cout &lt;&lt; &quot;这是单行注释&quot; &lt;&lt; endl;</span></span><br><span class="line">ch = <span class="built_in">fgetc</span>(f);</span><br><span class="line"><span class="keyword">while</span> (ch != <span class="string">&#x27;\n&#x27;</span>) &#123;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(f);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">&#x27;*&#x27;</span>) &#123;<span class="comment">//这是多行注释开始的标记</span></span><br><span class="line"><span class="type">bool</span> end = <span class="literal">false</span>;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(f);</span><br><span class="line"><span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (!end) &#123;</span><br><span class="line">tmp = ch;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(f);</span><br><span class="line"><span class="keyword">if</span> (tmp == <span class="string">&#x27;*&#x27;</span> &amp;&amp; ch == <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line">end = <span class="literal">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//ptr[num].words[j++] = tmp;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(f);</span><br><span class="line"><span class="comment">//ptr[num].words[j++] = &#x27;\0&#x27;;</span></span><br><span class="line"><span class="comment">//ptr[num++].label = 7;</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;<span class="comment">// /=</span></span><br><span class="line"><span class="type">char</span> tmp2 = ch;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(f);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isoperators</span>() == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">strcpy</span>(ptr[num].words, s2);</span><br><span class="line">ptr[num++].label = <span class="number">6</span>;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(f);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">ptr[num].words[<span class="number">0</span>] = tmp;</span><br><span class="line">ptr[num].words[<span class="number">1</span>] = tmp2;</span><br><span class="line">ptr[num++].label = <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;%&#x27;</span>: &#123;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(f);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isoperators</span>() == <span class="number">1</span> &amp;&amp; (ch != <span class="string">&#x27;%&#x27;</span> &amp;&amp; ch != <span class="string">&#x27;=&#x27;</span>)) &#123;</span><br><span class="line"><span class="built_in">strcpy</span>(ptr[num].words, s);</span><br><span class="line">ptr[num++].label = <span class="number">6</span>;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(f);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;<span class="comment">// % %% %=</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isoperators</span>() != <span class="number">1</span>) &#123;</span><br><span class="line">ptr[num].words[<span class="number">0</span>] = tmp;</span><br><span class="line">ptr[num++].label = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> tmp2 = ch;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(f);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isoperators</span>() == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">strcpy</span>(ptr[num].words, s2);</span><br><span class="line">ptr[num++].label = <span class="number">6</span>;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(f);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">ptr[num].words[<span class="number">0</span>] = tmp;</span><br><span class="line">ptr[num].words[<span class="number">1</span>] = tmp2;</span><br><span class="line">ptr[num++].label = <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;=&#x27;</span>: &#123;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(f);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isoperators</span>() == <span class="number">1</span> &amp;&amp; ch != <span class="string">&#x27;=&#x27;</span>) &#123;</span><br><span class="line"><span class="built_in">strcpy</span>(ptr[num].words, s);</span><br><span class="line">ptr[num++].label = <span class="number">6</span>;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(f);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;<span class="comment">// = ==</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isoperators</span>() != <span class="number">1</span>) &#123;</span><br><span class="line">ptr[num].words[<span class="number">0</span>] = tmp;</span><br><span class="line">ptr[num++].label = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> tmp2 = ch;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(f);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isoperators</span>() == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">strcpy</span>(ptr[num].words, s2);</span><br><span class="line">ptr[num++].label = <span class="number">6</span>;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(f);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">ptr[num].words[<span class="number">0</span>] = tmp;</span><br><span class="line">ptr[num].words[<span class="number">1</span>] = tmp2;</span><br><span class="line">ptr[num++].label = <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;&gt;&#x27;</span>: &#123;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(f);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isoperators</span>() == <span class="number">1</span> &amp;&amp; (ch != <span class="string">&#x27;&gt;&#x27;</span> &amp;&amp; ch != <span class="string">&#x27;=&#x27;</span>)) &#123;</span><br><span class="line"><span class="built_in">strcpy</span>(ptr[num].words, s);</span><br><span class="line">ptr[num++].label = <span class="number">6</span>;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(f);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;<span class="comment">// &gt; &gt;&gt; &gt;=</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isoperators</span>() != <span class="number">1</span>) &#123;</span><br><span class="line">ptr[num].words[<span class="number">0</span>] = tmp;</span><br><span class="line">ptr[num++].label = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> tmp2 = ch;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(f);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isoperators</span>() == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">strcpy</span>(ptr[num].words, s2);</span><br><span class="line">ptr[num++].label = <span class="number">6</span>;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(f);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">ptr[num].words[<span class="number">0</span>] = tmp;</span><br><span class="line">ptr[num].words[<span class="number">1</span>] = tmp2;</span><br><span class="line">ptr[num++].label = <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;&lt;&#x27;</span>: &#123;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(f);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isoperators</span>() == <span class="number">1</span> &amp;&amp; (ch != <span class="string">&#x27;&lt;&#x27;</span> &amp;&amp; ch != <span class="string">&#x27;=&#x27;</span>)) &#123;</span><br><span class="line"><span class="built_in">strcpy</span>(ptr[num].words, s);</span><br><span class="line">ptr[num++].label = <span class="number">6</span>;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(f);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;<span class="comment">// &lt; &lt;&lt; &lt;=</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isoperators</span>() != <span class="number">1</span>) &#123;</span><br><span class="line">ptr[num].words[<span class="number">0</span>] = tmp;</span><br><span class="line">ptr[num++].label = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> tmp2 = ch;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(f);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isoperators</span>() == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">strcpy</span>(ptr[num].words, s2);</span><br><span class="line">ptr[num++].label = <span class="number">6</span>;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(f);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">ptr[num].words[<span class="number">0</span>] = tmp;</span><br><span class="line">ptr[num].words[<span class="number">1</span>] = tmp2;</span><br><span class="line">ptr[num++].label = <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;!&#x27;</span>: &#123;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(f);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isoperators</span>() == <span class="number">1</span> &amp;&amp; ch != <span class="string">&#x27;=&#x27;</span>) &#123;</span><br><span class="line"><span class="built_in">strcpy</span>(ptr[num].words, s);</span><br><span class="line">ptr[num++].label = <span class="number">6</span>;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(f);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;<span class="comment">// ! !=</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isoperators</span>() != <span class="number">1</span>) &#123;</span><br><span class="line">ptr[num].words[<span class="number">0</span>] = tmp;</span><br><span class="line">ptr[num++].label = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> tmp2 = ch;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(f);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isoperators</span>() == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">strcpy</span>(ptr[num].words, s2);</span><br><span class="line">ptr[num++].label = <span class="number">6</span>;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(f);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">ptr[num].words[<span class="number">0</span>] = tmp;</span><br><span class="line">ptr[num].words[<span class="number">1</span>] = tmp2;</span><br><span class="line">ptr[num++].label = <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;&amp;&#x27;</span> : &#123;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(f);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isoperators</span>() == <span class="number">1</span> &amp;&amp; (ch != <span class="string">&#x27;&amp;&#x27;</span> &amp;&amp; ch != <span class="string">&#x27;=&#x27;</span>)) &#123;</span><br><span class="line"><span class="built_in">strcpy</span>(ptr[num].words, s);</span><br><span class="line">ptr[num++].label = <span class="number">6</span>;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(f);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;<span class="comment">// &amp; &amp;&amp; &amp;=</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isoperators</span>() != <span class="number">1</span>) &#123;</span><br><span class="line">ptr[num].words[<span class="number">0</span>] = tmp;</span><br><span class="line">ptr[num++].label = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> tmp2 = ch;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(f);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isoperators</span>() == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">strcpy</span>(ptr[num].words, s2);</span><br><span class="line">ptr[num++].label = <span class="number">6</span>;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(f);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">ptr[num].words[<span class="number">0</span>] = tmp;</span><br><span class="line">ptr[num].words[<span class="number">1</span>] = tmp2;</span><br><span class="line">ptr[num++].label = <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>: &#123;<span class="comment">// case |</span></span><br><span class="line">ch = <span class="built_in">fgetc</span>(f);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isoperators</span>() == <span class="number">1</span> &amp;&amp; (ch != <span class="string">&#x27;|&#x27;</span> &amp;&amp; ch != <span class="string">&#x27;=&#x27;</span>)) &#123;</span><br><span class="line"><span class="built_in">strcpy</span>(ptr[num].words, s);</span><br><span class="line">ptr[num++].label = <span class="number">6</span>;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(f);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;<span class="comment">// | || |=</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isoperators</span>() != <span class="number">1</span>) &#123;</span><br><span class="line">ptr[num].words[<span class="number">0</span>] = tmp;</span><br><span class="line">ptr[num++].label = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> tmp2 = ch;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(f);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isoperators</span>() == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">strcpy</span>(ptr[num].words, s2);</span><br><span class="line">ptr[num++].label = <span class="number">6</span>;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(f);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">ptr[num].words[<span class="number">0</span>] = tmp;</span><br><span class="line">ptr[num].words[<span class="number">1</span>] = tmp2;</span><br><span class="line">ptr[num++].label = <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">isdelimiters</span><span class="params">()</span> </span>&#123;<span class="comment">//返回1表示是分隔符,返回-1表示不是分隔符</span></span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">8</span>; ++ i)</span><br><span class="line"><span class="keyword">if</span> (ch == delimiters[i])</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Get_Delimiters</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ptr[num].words[<span class="number">0</span>] = ch;</span><br><span class="line">ptr[num].label = <span class="number">5</span>;</span><br><span class="line">++num;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(f);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="递归下降语法分析设计原理与实现"><a href="#递归下降语法分析设计原理与实现" class="headerlink" title="递归下降语法分析设计原理与实现"></a>递归下降语法分析设计原理与实现</h2><h3 id="实验内容-1"><a href="#实验内容-1" class="headerlink" title="实验内容"></a>实验内容</h3><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240115115623982.png" alt="image-20240115115623982"></p><h3 id="实验设计-1"><a href="#实验设计-1" class="headerlink" title="实验设计"></a>实验设计</h3><h4 id="实验思路设计-1"><a href="#实验思路设计-1" class="headerlink" title="实验思路设计"></a>实验思路设计</h4><p>读取词法分析程序输出作为输入。遍历将各字符放入token数组。然后根据语法分析规则递归分析。</p><h4 id="实验具体实现-1"><a href="#实验具体实现-1" class="headerlink" title="实验具体实现"></a>实验具体实现</h4><p><code>全局变量设计</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MAX 1010</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> token[MAX];<span class="comment">//存有算术表达式等价形式</span></span><br><span class="line">string token2[MAX];<span class="comment">//存有最初的算术表达式</span></span><br><span class="line"><span class="type">char</span> current;<span class="comment">//当前正在分析的字符</span></span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;<span class="comment">//当前正在分析的字符的索引</span></span><br><span class="line"><span class="type">int</span> pos = <span class="number">0</span>;<span class="comment">//算数表达式中字符的个数</span></span><br></pre></td></tr></table></figure><p><code>函数设计</code></p><p><strong>void extract()</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">extract</span><span class="params">()</span> </span>&#123;</span><br><span class="line">FILE *fp = <span class="built_in">fopen</span>(PATH, <span class="string">&quot;r&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (fp == <span class="literal">NULL</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;The file can&#x27;t be opened!&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> ch;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(fp);</span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">feof</span>(fp)) &#123;</span><br><span class="line"><span class="keyword">if</span> (ch == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line"><span class="type">char</span> left = <span class="built_in">fgetc</span>(fp);</span><br><span class="line"><span class="type">char</span> right = <span class="built_in">fgetc</span>(fp);</span><br><span class="line">string tmp = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">while</span> (right != left) &#123;</span><br><span class="line">tmp += right;</span><br><span class="line">right = <span class="built_in">fgetc</span>(fp);</span><br><span class="line">&#125;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(fp);</span><br><span class="line"><span class="type">char</span> label = <span class="built_in">fgetc</span>(fp);</span><br><span class="line"><span class="keyword">if</span> (label == <span class="string">&#x27;2&#x27;</span> || label == <span class="string">&#x27;3&#x27;</span>) &#123;</span><br><span class="line">token[pos] = <span class="string">&#x27;i&#x27;</span>;</span><br><span class="line">token2[pos++] = tmp;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (label == <span class="string">&#x27;4&#x27;</span> || label == <span class="string">&#x27;5&#x27;</span>)&#123;</span><br><span class="line">token[pos] = tmp[<span class="number">0</span>];</span><br><span class="line">token2[pos++] = tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">&#x27;#&#x27;</span>) &#123;</span><br><span class="line">token[pos] = <span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">token2[pos++] = <span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(fp);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该函数将二元组根据类别进行拆分，并存入字符串数组token2。<strong>同时，在遇到标识符时，用i代替标识符并且存入数组token用于递归下降分析。</strong></p><p><strong>产生式终结符号与非终结符号的FIRST集和FOLLOW集</strong></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240115124023634.png" alt="image-20240115124023634"></p><p><strong>void S()</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">S</span><span class="params">()</span> </span>&#123;<span class="comment">//S-&gt;V=Efirst = &#123;i&#125; follow = &#123;#&#125;</span></span><br><span class="line"><span class="keyword">if</span> (current == <span class="string">&#x27;i&#x27;</span>) &#123;</span><br><span class="line"><span class="built_in">V</span>();</span><br><span class="line"><span class="keyword">if</span> (current == <span class="string">&#x27;=&#x27;</span>) &#123;</span><br><span class="line"><span class="built_in">Next</span>();</span><br><span class="line"><span class="built_in">E</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span></span><br><span class="line"><span class="built_in">error</span>(<span class="built_in">const_cast</span>&lt;<span class="type">char</span>*&gt;(<span class="string">&quot;S&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>void E()</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">E</span><span class="params">()</span> </span>&#123;<span class="comment">//E-&gt;TE1first = &#123;(、i&#125; follow = &#123;#、)&#125;</span></span><br><span class="line"><span class="keyword">if</span> (current == <span class="string">&#x27;(&#x27;</span> || current == <span class="string">&#x27;i&#x27;</span>) &#123;</span><br><span class="line"><span class="built_in">T</span>();</span><br><span class="line"><span class="built_in">E1</span>();</span><br><span class="line">&#125; <span class="keyword">else</span></span><br><span class="line"><span class="built_in">error</span>(<span class="built_in">const_cast</span>&lt;<span class="type">char</span>*&gt;(<span class="string">&quot;E&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>void E1()</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">E1</span><span class="params">()</span> </span>&#123;<span class="comment">//E1-&gt;ATE1|εfirst = &#123;+、-、ε&#125; follow = &#123;#、)&#125;</span></span><br><span class="line"><span class="keyword">if</span> (current == <span class="string">&#x27;+&#x27;</span> || current == <span class="string">&#x27;-&#x27;</span>) &#123;</span><br><span class="line"><span class="built_in">A</span>();</span><br><span class="line"><span class="built_in">T</span>();</span><br><span class="line"><span class="built_in">E1</span>();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (current != <span class="string">&#x27;#&#x27;</span> &amp;&amp; current != <span class="string">&#x27;)&#x27;</span>)</span><br><span class="line"><span class="built_in">error</span>(<span class="built_in">const_cast</span>&lt;<span class="type">char</span>*&gt;(<span class="string">&quot;E1&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>void T()</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">T</span><span class="params">()</span> </span>&#123;<span class="comment">//T-&gt;FT1first = &#123;(、i&#125; follow = &#123;+、-、#、)&#125;</span></span><br><span class="line"><span class="keyword">if</span> (current == <span class="string">&#x27;(&#x27;</span> || current == <span class="string">&#x27;i&#x27;</span>) &#123;</span><br><span class="line"><span class="built_in">F</span>();</span><br><span class="line"><span class="built_in">T1</span>();</span><br><span class="line">&#125; <span class="keyword">else</span></span><br><span class="line"><span class="built_in">error</span>(<span class="built_in">const_cast</span>&lt;<span class="type">char</span>*&gt;(<span class="string">&quot;T&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>void T1()</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">T1</span><span class="params">()</span> </span>&#123;<span class="comment">//T1-&gt;MFT1|εfirst = &#123;*、/、ε&#125; follow = &#123;+、-、#、)&#125;</span></span><br><span class="line"><span class="keyword">if</span> (current == <span class="string">&#x27;*&#x27;</span> || current == <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line"><span class="built_in">M</span>();</span><br><span class="line"><span class="built_in">F</span>();</span><br><span class="line"><span class="built_in">T1</span>();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (current != <span class="string">&#x27;+&#x27;</span> &amp;&amp; current != <span class="string">&#x27;-&#x27;</span> &amp;&amp; current != <span class="string">&#x27;#&#x27;</span> &amp;&amp; current != <span class="string">&#x27;)&#x27;</span>)</span><br><span class="line"><span class="built_in">error</span>(<span class="built_in">const_cast</span>&lt;<span class="type">char</span>*&gt;(<span class="string">&quot;T1&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>void A()</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">A</span><span class="params">()</span> </span>&#123;<span class="comment">//A-&gt;+/-first = &#123;+、-&#125; follow = &#123;(、i&#125;</span></span><br><span class="line"><span class="keyword">if</span> (current == <span class="string">&#x27;+&#x27;</span> || current == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line"><span class="built_in">Next</span>();</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">error</span>(<span class="built_in">const_cast</span>&lt;<span class="type">char</span>*&gt;(<span class="string">&quot;A&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>void F()</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">F</span><span class="params">()</span> </span>&#123;<span class="comment">//F-&gt;(E)|ifirst = &#123;(、i&#125; follow = &#123;*，/，+，-，#，)&#125;</span></span><br><span class="line"><span class="keyword">if</span> (current == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line"><span class="built_in">Next</span>();</span><br><span class="line"><span class="built_in">E</span>();</span><br><span class="line"><span class="keyword">if</span> (current == <span class="string">&#x27;)&#x27;</span>)</span><br><span class="line"><span class="built_in">Next</span>();</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">error</span>(<span class="built_in">const_cast</span>&lt;<span class="type">char</span>*&gt;(<span class="string">&quot;F&quot;</span>));</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (current == <span class="string">&#x27;i&#x27;</span>)</span><br><span class="line"><span class="built_in">Next</span>();</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">error</span>(<span class="built_in">const_cast</span>&lt;<span class="type">char</span>*&gt;(<span class="string">&quot;F&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>void M()</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">M</span><span class="params">()</span> </span>&#123;<span class="comment">//M-&gt;*|/first = &#123;*、/&#125; follow = &#123;(、i&#125;</span></span><br><span class="line"><span class="keyword">if</span> (current == <span class="string">&#x27;*&#x27;</span> || current == <span class="string">&#x27;/&#x27;</span>)</span><br><span class="line"><span class="built_in">Next</span>();</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">error</span>(<span class="built_in">const_cast</span>&lt;<span class="type">char</span>*&gt;(<span class="string">&quot;M&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>void V()</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">V</span><span class="params">()</span> </span>&#123;<span class="comment">//V-&gt;ifirst = &#123;i&#125; follow = &#123;=&#125;</span></span><br><span class="line"><span class="keyword">if</span> (current == <span class="string">&#x27;i&#x27;</span>)</span><br><span class="line"><span class="built_in">Next</span>();</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">error</span>(<span class="built_in">const_cast</span>&lt;<span class="type">char</span>*&gt;(<span class="string">&quot;V&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>void Next()</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Next</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (i == MAX)</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">current = token[++i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>*<em>void error(char <em>c)</em></em></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">error</span><span class="params">(<span class="type">char</span> *c)</span> </span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s处有语法错误\n&quot;</span>, c);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;输入串不是该文法定义的算术表达式!&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>以 i=i+i*(i+i) 为例展示递归过程</code></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240115124538791.png" alt="image-20240115124538791"></p><h3 id="实验测试-1"><a href="#实验测试-1" class="headerlink" title="实验测试"></a>实验测试</h3><h4 id="测试案例一"><a href="#测试案例一" class="headerlink" title="测试案例一"></a>测试案例一</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240115124618073.png" alt="image-20240115124618073"></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240115124624990.png" alt="image-20240115124624990"></p><h4 id="测试案例二"><a href="#测试案例二" class="headerlink" title="测试案例二"></a>测试案例二</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240115124644958.png" alt="image-20240115124644958"></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240115124650588.png" alt="image-20240115124650588"></p><h4 id="测试案例三"><a href="#测试案例三" class="headerlink" title="测试案例三"></a>测试案例三</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240115124709732.png" alt="image-20240115124709732"></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240115124717819.png" alt="image-20240115124717819"></p><h4 id="测试案例四"><a href="#测试案例四" class="headerlink" title="测试案例四"></a>测试案例四</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240115124738127.png" alt="image-20240115124738127"></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240115124743403.png" alt="image-20240115124743403"></p><h4 id="测试案例五"><a href="#测试案例五" class="headerlink" title="测试案例五"></a>测试案例五</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240115124813817.png" alt="image-20240115124813817"></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240115124821039.png" alt="image-20240115124821039"></p><h4 id="测试案例六"><a href="#测试案例六" class="headerlink" title="测试案例六"></a>测试案例六</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240115124827851.png" alt="image-20240115124827851"></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240115124832621.png" alt="image-20240115124832621"></p><h3 id="完整代码-1"><a href="#完整代码-1" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX 1010</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> token[MAX];<span class="comment">//存有算术表达式等价形式</span></span><br><span class="line">string token2[MAX];<span class="comment">//存有最初的算术表达式</span></span><br><span class="line"><span class="type">char</span> current;<span class="comment">//当前正在分析的字符</span></span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;<span class="comment">//当前正在分析的字符的索引</span></span><br><span class="line"><span class="type">int</span> pos = <span class="number">0</span>;<span class="comment">//算数表达式中字符的个数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">S</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">E</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">E1</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">T</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">T1</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">A</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">F</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">M</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">V</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">error</span><span class="params">(<span class="type">char</span> *c)</span></span>;    <span class="comment">//提出语法错误</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">extract</span><span class="params">()</span></span>;<span class="comment">//用来读取词法分析程序输出结果(二元组)作为本程序输入</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Next</span><span class="params">()</span></span>;<span class="comment">////读取下一个字符</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">extract</span>();</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;算术表达式为: &quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; pos; ++i) &#123;</span><br><span class="line">cout &lt;&lt; token2[i];</span><br><span class="line">&#125;cout &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;等价于: &quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; pos; ++i) &#123;</span><br><span class="line">cout &lt;&lt; token[i];</span><br><span class="line">&#125;cout &lt;&lt; endl;</span><br><span class="line">current = token[i];<span class="comment">//初始化</span></span><br><span class="line"><span class="built_in">S</span>();<span class="comment">//开始递归下降分析</span></span><br><span class="line"><span class="keyword">if</span> (current == <span class="string">&#x27;#&#x27;</span>)<span class="comment">//递归结束</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;输入串是该文法定义的算术表达式!&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Next</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (i == MAX)</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">current = token[++i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">extract</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//FILE *fp = fopen(&quot;D:\\A-Project\\Compiler\\RecursiveDescent_SyntaxAnalysis\\Test_data\\1.txt&quot;, &quot;r&quot;);</span></span><br><span class="line">FILE *fp = <span class="built_in">fopen</span>(<span class="string">&quot;D:\\A-Project\\Compiler\\Lexical_analysis\\test_data2\\middle_results.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (fp == <span class="literal">NULL</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;The file can&#x27;t be opened!&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> ch;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(fp);</span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">feof</span>(fp)) &#123;</span><br><span class="line"><span class="keyword">if</span> (ch == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line"><span class="type">char</span> left = <span class="built_in">fgetc</span>(fp);</span><br><span class="line"><span class="type">char</span> right = <span class="built_in">fgetc</span>(fp);</span><br><span class="line">string tmp = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">while</span> (right != left) &#123;</span><br><span class="line">tmp += right;</span><br><span class="line">right = <span class="built_in">fgetc</span>(fp);</span><br><span class="line">&#125;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(fp);</span><br><span class="line"><span class="type">char</span> label = <span class="built_in">fgetc</span>(fp);</span><br><span class="line"><span class="keyword">if</span> (label == <span class="string">&#x27;2&#x27;</span> || label == <span class="string">&#x27;3&#x27;</span>) &#123;</span><br><span class="line">token[pos] = <span class="string">&#x27;i&#x27;</span>;</span><br><span class="line">token2[pos++] = tmp;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (label == <span class="string">&#x27;4&#x27;</span> || label == <span class="string">&#x27;5&#x27;</span>)&#123;</span><br><span class="line">token[pos] = tmp[<span class="number">0</span>];</span><br><span class="line">token2[pos++] = tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">&#x27;#&#x27;</span>) &#123;</span><br><span class="line">token[pos] = <span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">token2[pos++] = <span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(fp);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">S</span><span class="params">()</span> </span>&#123;<span class="comment">//S-&gt;V=Efirst = &#123;i&#125; follow = &#123;#&#125;</span></span><br><span class="line"><span class="keyword">if</span> (current == <span class="string">&#x27;i&#x27;</span>) &#123;</span><br><span class="line"><span class="built_in">V</span>();</span><br><span class="line"><span class="keyword">if</span> (current == <span class="string">&#x27;=&#x27;</span>) &#123;</span><br><span class="line"><span class="built_in">Next</span>();</span><br><span class="line"><span class="built_in">E</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span></span><br><span class="line"><span class="built_in">error</span>(<span class="built_in">const_cast</span>&lt;<span class="type">char</span>*&gt;(<span class="string">&quot;S&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">E</span><span class="params">()</span> </span>&#123;<span class="comment">//E-&gt;TE1first = &#123;(、i&#125; follow = &#123;#、)&#125;</span></span><br><span class="line"><span class="keyword">if</span> (current == <span class="string">&#x27;(&#x27;</span> || current == <span class="string">&#x27;i&#x27;</span>) &#123;</span><br><span class="line"><span class="built_in">T</span>();</span><br><span class="line"><span class="built_in">E1</span>();</span><br><span class="line">&#125; <span class="keyword">else</span></span><br><span class="line"><span class="built_in">error</span>(<span class="built_in">const_cast</span>&lt;<span class="type">char</span>*&gt;(<span class="string">&quot;E&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">E1</span><span class="params">()</span> </span>&#123;<span class="comment">//E1-&gt;ATE1|εfirst = &#123;+、-、ε&#125; follow = &#123;#、)&#125;</span></span><br><span class="line"><span class="keyword">if</span> (current == <span class="string">&#x27;+&#x27;</span> || current == <span class="string">&#x27;-&#x27;</span>) &#123;</span><br><span class="line"><span class="built_in">A</span>();</span><br><span class="line"><span class="built_in">T</span>();</span><br><span class="line"><span class="built_in">E1</span>();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (current != <span class="string">&#x27;#&#x27;</span> &amp;&amp; current != <span class="string">&#x27;)&#x27;</span>)</span><br><span class="line"><span class="built_in">error</span>(<span class="built_in">const_cast</span>&lt;<span class="type">char</span>*&gt;(<span class="string">&quot;E1&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">T</span><span class="params">()</span> </span>&#123;<span class="comment">//T-&gt;FT1first = &#123;(、i&#125; follow = &#123;+、-、#、)&#125;</span></span><br><span class="line"><span class="keyword">if</span> (current == <span class="string">&#x27;(&#x27;</span> || current == <span class="string">&#x27;i&#x27;</span>) &#123;</span><br><span class="line"><span class="built_in">F</span>();</span><br><span class="line"><span class="built_in">T1</span>();</span><br><span class="line">&#125; <span class="keyword">else</span></span><br><span class="line"><span class="built_in">error</span>(<span class="built_in">const_cast</span>&lt;<span class="type">char</span>*&gt;(<span class="string">&quot;T&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">T1</span><span class="params">()</span> </span>&#123;<span class="comment">//T1-&gt;MFT1|εfirst = &#123;*、/、ε&#125; follow = &#123;+、-、#、)&#125;</span></span><br><span class="line"><span class="keyword">if</span> (current == <span class="string">&#x27;*&#x27;</span> || current == <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line"><span class="built_in">M</span>();</span><br><span class="line"><span class="built_in">F</span>();</span><br><span class="line"><span class="built_in">T1</span>();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (current != <span class="string">&#x27;+&#x27;</span> &amp;&amp; current != <span class="string">&#x27;-&#x27;</span> &amp;&amp; current != <span class="string">&#x27;#&#x27;</span> &amp;&amp; current != <span class="string">&#x27;)&#x27;</span>)</span><br><span class="line"><span class="built_in">error</span>(<span class="built_in">const_cast</span>&lt;<span class="type">char</span>*&gt;(<span class="string">&quot;T1&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">A</span><span class="params">()</span> </span>&#123;<span class="comment">//A-&gt;+/-first = &#123;+、-&#125; follow = &#123;(、i&#125;</span></span><br><span class="line"><span class="keyword">if</span> (current == <span class="string">&#x27;+&#x27;</span> || current == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line"><span class="built_in">Next</span>();</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">error</span>(<span class="built_in">const_cast</span>&lt;<span class="type">char</span>*&gt;(<span class="string">&quot;A&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">F</span><span class="params">()</span> </span>&#123;<span class="comment">//F-&gt;(E)|ifirst = &#123;(、i&#125; follow = &#123;*，/，+，-，#，)&#125;</span></span><br><span class="line"><span class="keyword">if</span> (current == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line"><span class="built_in">Next</span>();</span><br><span class="line"><span class="built_in">E</span>();</span><br><span class="line"><span class="keyword">if</span> (current == <span class="string">&#x27;)&#x27;</span>)</span><br><span class="line"><span class="built_in">Next</span>();</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">error</span>(<span class="built_in">const_cast</span>&lt;<span class="type">char</span>*&gt;(<span class="string">&quot;F&quot;</span>));</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (current == <span class="string">&#x27;i&#x27;</span>)</span><br><span class="line"><span class="built_in">Next</span>();</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">error</span>(<span class="built_in">const_cast</span>&lt;<span class="type">char</span>*&gt;(<span class="string">&quot;F&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">M</span><span class="params">()</span> </span>&#123;<span class="comment">//M-&gt;*|/first = &#123;*、/&#125; follow = &#123;(、i&#125;</span></span><br><span class="line"><span class="keyword">if</span> (current == <span class="string">&#x27;*&#x27;</span> || current == <span class="string">&#x27;/&#x27;</span>)</span><br><span class="line"><span class="built_in">Next</span>();</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">error</span>(<span class="built_in">const_cast</span>&lt;<span class="type">char</span>*&gt;(<span class="string">&quot;M&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">V</span><span class="params">()</span> </span>&#123;<span class="comment">//V-&gt;ifirst = &#123;i&#125; follow = &#123;=&#125;</span></span><br><span class="line"><span class="keyword">if</span> (current == <span class="string">&#x27;i&#x27;</span>)</span><br><span class="line"><span class="built_in">Next</span>();</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">error</span>(<span class="built_in">const_cast</span>&lt;<span class="type">char</span>*&gt;(<span class="string">&quot;V&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">error</span><span class="params">(<span class="type">char</span> *c)</span> </span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s处有语法错误\n&quot;</span>, c);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;输入串不是该文法定义的算术表达式!&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="LL-1-语法分析设计原理与实现"><a href="#LL-1-语法分析设计原理与实现" class="headerlink" title="LL(1)语法分析设计原理与实现"></a>LL(1)语法分析设计原理与实现</h2><h3 id="实验内容-2"><a href="#实验内容-2" class="headerlink" title="实验内容"></a>实验内容</h3><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240115152003421.png" alt="image-20240115152003421"></p><h3 id="实验设计-2"><a href="#实验设计-2" class="headerlink" title="实验设计"></a>实验设计</h3><h4 id="实验思路设计-2"><a href="#实验思路设计-2" class="headerlink" title="实验思路设计"></a>实验思路设计</h4><ul><li>首先根据文法规则（G[S]），设计程序自动构造LL(1)分析表（包括设计程序自动求各非终结符号和终结符号的first集合和follow集合，并且根据first和follow集合构造LL(1)分析表）。</li><li>读取词法分析程序输出作为输入。遍历将各字符放入token2数组。并用i代替全部标识符存入token数组，然后使用token进行LL(1)语法分析。</li></ul><h4 id="实验具体实现-2"><a href="#实验具体实现-2" class="headerlink" title="实验具体实现"></a>实验具体实现</h4><p><code>数据结构设计</code></p><p><strong>Token[MAX]</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MAX 1010</span></span><br><span class="line"><span class="type">char</span> token[MAX];<span class="comment">//存有算术表达式等价形式</span></span><br><span class="line">string token2[MAX];<span class="comment">//存有最初的算术表达式</span></span><br><span class="line"><span class="type">int</span> pos = <span class="number">0</span>;<span class="comment">//算数表达式中字符的个数</span></span><br></pre></td></tr></table></figure><p>由于采用词法分析输出二元组作为输入，将二元组还原成表达式存在token2中，然后用i代替全部标识符后存在token里，用于进行LL(1)分析。</p><p><strong>E<sup>‘</sup>与T<sup>‘</sup>的宏定义</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将E1、T1分别定义为e、t,方便操作</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> E1 e</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> T1 t</span></span><br></pre></td></tr></table></figure><p>由于在生成first集和follow集合时，涉及到对单个字符的处理，所以采用宏定义将E’定义为e、T’定义为t，方便操作。</p><p><strong>ε的宏定义</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义空ε</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> blank <span class="string">&quot;@&quot;</span></span></span><br></pre></td></tr></table></figure><p>方便后续判断</p><p><strong>G[S]对应的非终结符号集合V<sub>n</sub>和终结符号集合V<sub>t</sub></strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义终结符号集合和非终结符号集合</span></span><br><span class="line">unordered_set&lt;<span class="type">char</span>&gt; Vn = &#123;<span class="string">&#x27;S&#x27;</span>, <span class="string">&#x27;V&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;T&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;M&#x27;</span>&#125;;</span><br><span class="line">unordered_set&lt;<span class="type">char</span>&gt; Vt = &#123;<span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;)&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;+&#x27;</span>, <span class="string">&#x27;-&#x27;</span>, <span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;=&#x27;</span>&#125;;<span class="comment">//=</span></span><br></pre></td></tr></table></figure><p>方便判断当前字符属于终结符号还是非终结符号。</p><p><strong>产生式右部复合符号串集合Mul</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//产生式右部复合符号串</span></span><br><span class="line">unordered_set&lt;string&gt; Mul = &#123;<span class="string">&quot;V=E&quot;</span>, <span class="string">&quot;Te&quot;</span>, <span class="string">&quot;ATe&quot;</span>, <span class="string">&quot;Ft&quot;</span>, <span class="string">&quot;MFt&quot;</span>, <span class="string">&quot;(E)&quot;</span>, <span class="string">&quot;=E&quot;</span>, <span class="string">&quot;Te&quot;</span>, <span class="string">&quot;Ft&quot;</span>, <span class="string">&quot;E)&quot;</span>&#125;;</span><br></pre></td></tr></table></figure><p>由于在生成follow集合时，涉及到产生式右部复合符号串first集，所以将复合符号串全部列举在Mul中。</p><p><strong>分析栈stack<char> analysis_stack</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//分析栈</span></span><br><span class="line">stack&lt;<span class="type">char</span>&gt; analysis_stack;</span><br></pre></td></tr></table></figure><p>字符栈，用于存放分析过程中的文法符号。</p><p><strong>文法规则G[S]产生式grammar_1 and grammar_2</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//词法规则,产生式</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;string, string&gt; PSS;</span><br><span class="line">vector&lt;PSS&gt; grammar_1 = &#123;<span class="built_in">make_pair</span>(<span class="string">&quot;S&quot;</span>, <span class="string">&quot;V=E&quot;</span>),</span><br><span class="line">                         <span class="built_in">make_pair</span>(<span class="string">&quot;E&quot;</span>, <span class="string">&quot;Te&quot;</span>),</span><br><span class="line">                         <span class="built_in">make_pair</span>(<span class="string">&quot;e&quot;</span>, <span class="string">&quot;ATe&quot;</span>),</span><br><span class="line">                         <span class="built_in">make_pair</span>(<span class="string">&quot;T&quot;</span>, <span class="string">&quot;Ft&quot;</span>),</span><br><span class="line">                         <span class="built_in">make_pair</span>(<span class="string">&quot;t&quot;</span>, <span class="string">&quot;MFt&quot;</span>),</span><br><span class="line">                         <span class="built_in">make_pair</span>(<span class="string">&quot;F&quot;</span>, <span class="string">&quot;(E)&quot;</span>),</span><br><span class="line">                         <span class="built_in">make_pair</span>(<span class="string">&quot;F&quot;</span>, <span class="string">&quot;i&quot;</span>),</span><br><span class="line">                         <span class="built_in">make_pair</span>(<span class="string">&quot;A&quot;</span>, <span class="string">&quot;+&quot;</span>),</span><br><span class="line">                         <span class="built_in">make_pair</span>(<span class="string">&quot;A&quot;</span>, <span class="string">&quot;-&quot;</span>),</span><br><span class="line">                         <span class="built_in">make_pair</span>(<span class="string">&quot;M&quot;</span>, <span class="string">&quot;*&quot;</span>),</span><br><span class="line">                         <span class="built_in">make_pair</span>(<span class="string">&quot;M&quot;</span>, <span class="string">&quot;/&quot;</span>),</span><br><span class="line">                         <span class="built_in">make_pair</span>(<span class="string">&quot;V&quot;</span>, <span class="string">&quot;i&quot;</span>)</span><br><span class="line">                        &#125;;</span><br><span class="line">vector&lt;PSS&gt; grammar_2 = &#123;<span class="built_in">make_pair</span>(<span class="string">&quot;e&quot;</span>, blank), <span class="built_in">make_pair</span>(<span class="string">&quot;t&quot;</span>, blank)&#125;;</span><br></pre></td></tr></table></figure><p>首先定义一个二元组类型数据结构PSS（**pair&lt;string, string&gt;**）</p><p>然后将G[S]的每个产生式的左右部分别作为PSS的第一个元素first和second，并存入vector数组。</p><p>由于有些产生式可能对应两个右部，所以两个vector数组。</p><p><strong>FIRST集</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//first集</span></span><br><span class="line">unordered_map&lt;string, unordered_set&lt;string&gt;&gt; first_1;<span class="comment">//非终结符号的first集合</span></span><br><span class="line">unordered_map&lt;string, unordered_set&lt;string&gt;&gt; first_2;<span class="comment">//终结符号的first集合</span></span><br><span class="line">unordered_map&lt;string, unordered_set&lt;string&gt;&gt; first_3;<span class="comment">//产生式右部复合符号串的first集合</span></span><br></pre></td></tr></table></figure><ul><li>将每个非终结符号作为键，将其first集作为值，存入数据结构unordered_map中。</li><li>将每个终结符号作为键，将其first集作为值，存入数据结构unordered_map中</li><li>将每个产生式右部复合符号串作为键，将其first集作为值，存入数据结构unordered_map中</li></ul><p><strong>FOLLOW集</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//follow集</span></span><br><span class="line">unordered_map&lt;string, unordered_set&lt;string&gt;&gt; follow;<span class="comment">//非终结符号的follow集合</span></span><br></pre></td></tr></table></figure><p>将每个非终结符号作为键，将其follow集作为值，存入数据结构unordered_map中</p><p><strong>LL(1)分析表Table</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//生成LL(1)分析表</span></span><br><span class="line"><span class="comment">//LL(1)分析表</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">char</span>, <span class="type">char</span>&gt; PCC;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">hash_pair</span> &#123;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T1</span>, <span class="keyword">class</span> <span class="title class_">T2</span>&gt;</span><br><span class="line"><span class="function"><span class="type">size_t</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">const</span> pair&lt;T1, T2&gt;&amp; p)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line"><span class="keyword">auto</span> hash1 = hash&lt;T1&gt; &#123;&#125;(p.first);</span><br><span class="line"><span class="keyword">auto</span> hash2 = hash&lt;T2&gt; &#123;&#125;(p.second);</span><br><span class="line"><span class="keyword">return</span> hash1 ^ hash2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">unordered_map&lt;PCC, string, hash_pair&gt; Table;</span><br></pre></td></tr></table></figure><ul><li>首先定义一个二元组数据结构PCC，其中PCC.first对应LL(1)分析表中的纵列的非终结符号，PCC.second对应LL(1)分析表中横行的终结符号</li><li>然后自定义哈希函数hash_pair，并将其作为模板参数传递给<code>unordered_map</code>。这样可以确保对于<code>pair</code>类型的键，能够正确计算哈希值</li></ul><p><strong>文法G[S]产生式反向映射表re_grammar_1 and re_grammar_2</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//文法产生式反向映射表</span></span><br><span class="line">vector&lt;PSS&gt; re_grammar_1 = &#123;<span class="built_in">make_pair</span>( <span class="string">&quot;V=E&quot;</span>, <span class="string">&quot;S&quot;</span>),</span><br><span class="line">                            <span class="built_in">make_pair</span>(<span class="string">&quot;Te&quot;</span>, <span class="string">&quot;E&quot;</span>),</span><br><span class="line">                            <span class="built_in">make_pair</span>(<span class="string">&quot;ATe&quot;</span>, <span class="string">&quot;e&quot;</span>),</span><br><span class="line">                            <span class="built_in">make_pair</span>(blank, <span class="string">&quot;e&quot;</span>),</span><br><span class="line">                            <span class="built_in">make_pair</span>(<span class="string">&quot;Ft&quot;</span>, <span class="string">&quot;T&quot;</span>),</span><br><span class="line">                            <span class="built_in">make_pair</span>(<span class="string">&quot;MFt&quot;</span>, <span class="string">&quot;t&quot;</span>),</span><br><span class="line">                            <span class="built_in">make_pair</span>(<span class="string">&quot;(E)&quot;</span>, <span class="string">&quot;F&quot;</span>),</span><br><span class="line">                            <span class="built_in">make_pair</span>(<span class="string">&quot;i&quot;</span>, <span class="string">&quot;F&quot;</span>),</span><br><span class="line">                            <span class="built_in">make_pair</span>(<span class="string">&quot;+&quot;</span>, <span class="string">&quot;A&quot;</span>),</span><br><span class="line">                            <span class="built_in">make_pair</span>(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;A&quot;</span>),</span><br><span class="line">                            <span class="built_in">make_pair</span>(<span class="string">&quot;*&quot;</span>, <span class="string">&quot;M&quot;</span>),</span><br><span class="line">                            <span class="built_in">make_pair</span>(<span class="string">&quot;/&quot;</span>, <span class="string">&quot;M&quot;</span>)</span><br><span class="line">                           &#125;;</span><br><span class="line"></span><br><span class="line">vector&lt;PSS&gt; re_grammar_2 = &#123;<span class="built_in">make_pair</span>(blank, <span class="string">&quot;t&quot;</span>),</span><br><span class="line">                            <span class="built_in">make_pair</span>(<span class="string">&quot;i&quot;</span>, <span class="string">&quot;V&quot;</span>),</span><br><span class="line">                           &#125;;</span><br></pre></td></tr></table></figure><p><code>具体函数设计</code></p><p><strong>void init()</strong></p><p>对FIRST集初始化，具体思路如下：</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240115155139320.png" alt="image-20240115155139320"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;<span class="comment">//对first集进行初始化</span></span><br><span class="line"><span class="comment">//非终结符号的first集合的初始化part_1</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; (<span class="type">int</span>)grammar_1.<span class="built_in">size</span>(); ++ i) &#123;</span><br><span class="line">string key = grammar_1[i].first;</span><br><span class="line">string value = grammar_1[i].second;</span><br><span class="line"><span class="type">char</span> head = (<span class="type">char</span>)value[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">if</span> (Vt.<span class="built_in">find</span>(head) != Vt.<span class="built_in">end</span>()) &#123;<span class="comment">//X-&gt;aα,则a∈first(X)</span></span><br><span class="line"><span class="function">string <span class="title">w</span><span class="params">(<span class="number">1</span>, head)</span></span>;</span><br><span class="line">first_1[key].<span class="built_in">insert</span>(w);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//非终结符号的first集合的初始化part_2</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; (<span class="type">int</span>)grammar_2.<span class="built_in">size</span>(); ++ i) &#123;<span class="comment">//x-&gt;ε,则ε∈first(X)</span></span><br><span class="line">string key = grammar_2[i].first;</span><br><span class="line">string value = grammar_2[i].second;</span><br><span class="line">first_1[key].<span class="built_in">insert</span>(value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//终结符号的first集合的初始化</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it : Vt) &#123;<span class="comment">//first(x)=&#123;x&#125;;</span></span><br><span class="line"><span class="type">char</span> tmp = it;</span><br><span class="line"><span class="function">string <span class="title">key</span><span class="params">(<span class="number">1</span>, tmp)</span></span>;</span><br><span class="line"><span class="function">string <span class="title">value</span><span class="params">(<span class="number">1</span>, tmp)</span></span>;</span><br><span class="line">first_2[key].<span class="built_in">insert</span>(value);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Part_1和Part_2是因为一开始将文法产生式存入了Grammar_1和Grammar_2。</p><p><strong>void solve_first()</strong></p><p>循环求解各first集，直至全部收敛，具体思路如下：</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240115155257732.png" alt="image-20240115155257732"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve_first</span><span class="params">()</span> </span>&#123;<span class="comment">//循环求解</span></span><br><span class="line"><span class="comment">//根据生成规则，实际上这里只需要利用到产生式前5项即可</span></span><br><span class="line"><span class="type">bool</span> done = <span class="literal">false</span>;</span><br><span class="line"><span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (!done) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++ i) &#123;</span><br><span class="line">string front = grammar_1[i].first;</span><br><span class="line">string back = grammar_1[i].second;</span><br><span class="line"><span class="type">bool</span> keep = <span class="literal">true</span>;</span><br><span class="line"><span class="type">int</span> len = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> limit = back.<span class="built_in">length</span>();</span><br><span class="line"><span class="keyword">while</span> (keep &amp;&amp; len &lt; limit) &#123;</span><br><span class="line"><span class="function">string <span class="title">sub</span><span class="params">(back, len, <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="type">char</span> tmp = sub[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">if</span> (Vn.<span class="built_in">find</span>(tmp) != Vn.<span class="built_in">end</span>()) &#123;<span class="comment">//Yi 属于 Vn</span></span><br><span class="line">unordered_set&lt;string&gt; first_set = first_1[sub];</span><br><span class="line"><span class="type">int</span> size_before = first_1[front].<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it : first_set) &#123;<span class="comment">//将first&#123;Yi&#125;/ε放入X</span></span><br><span class="line"><span class="keyword">if</span> (it != blank) &#123;</span><br><span class="line">first_1[front].<span class="built_in">insert</span>(it);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> size_after = first_1[front].<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">if</span> (size_before &lt; size_after) &#123;<span class="comment">//X发生扩大</span></span><br><span class="line">++ cnt;</span><br><span class="line">&#125;</span><br><span class="line">++ len;</span><br><span class="line"><span class="keyword">if</span> (first_set.<span class="built_in">find</span>(blank) == first_set.<span class="built_in">end</span>()) keep = <span class="literal">false</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">if</span> (len == (limit + <span class="number">1</span>) &amp;&amp; keep) &#123;</span><br><span class="line">first_1[front].<span class="built_in">insert</span>(blank);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (cnt == <span class="number">0</span>) &#123;<span class="comment">//本轮所有first集合均未扩大，即已经收敛</span></span><br><span class="line">done = <span class="literal">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> cnt = <span class="number">0</span>;<span class="comment">//尚未收敛,继续迭代</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为什么这里只需要用到产生式前5项呢？</p><p>因为规则要求对于 X-&gt;Y<sub>1</sub>Y<sub>2</sub>……Y<sub>k</sub> 有Y<sub>1</sub>∈V<sub>n</sub></p><p><strong>void solve_first2()</strong></p><p>求解产生式右部复合符号串的first集合，具体思路如下：</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240115155704883.png" alt="image-20240115155704883"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve_first2</span><span class="params">()</span> </span>&#123;<span class="comment">//求解产生式右部复合符号串的first集合</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it : Mul) &#123;</span><br><span class="line">string cur = it;</span><br><span class="line"><span class="type">int</span> len = cur.<span class="built_in">length</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++ i) &#123;<span class="comment">//从产生式右部符号串第一个字符开始遍历</span></span><br><span class="line"><span class="function">string <span class="title">sub</span><span class="params">(cur, i, <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="type">char</span> tmp = sub[<span class="number">0</span>];</span><br><span class="line">unordered_set&lt;string&gt; st;</span><br><span class="line"><span class="keyword">if</span> (Vn.<span class="built_in">find</span>(tmp) != Vn.<span class="built_in">end</span>()) st = first_1[sub];</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (Vt.<span class="built_in">find</span>(tmp) != Vt.<span class="built_in">end</span>()) st = first_2[sub];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it2 : st) &#123;<span class="comment">//查Xi的first，将除ε之外的元素添加</span></span><br><span class="line"><span class="keyword">if</span> (it2 != blank) &#123;</span><br><span class="line">first_3[it].<span class="built_in">insert</span>(it2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (st.<span class="built_in">find</span>(blank) == st.<span class="built_in">end</span>()) &#123;<span class="comment">//ε不在first(Xi)中，不需要再往后看字符，直接跳出循环</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (i == len - <span class="number">1</span>) first_3[it].<span class="built_in">insert</span>(blank);<span class="comment">//右部符号串遍历完，则ε∈first(X)</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>void solve_follow()</strong></p><p>求解非终结符号的follow集，具体思路如下：</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240115155801732.png" alt="image-20240115155801732"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve_follow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">follow[<span class="string">&quot;S&quot;</span>].<span class="built_in">insert</span>(<span class="string">&quot;#&quot;</span>);<span class="comment">//S为文法开始符号,对应规则第一条</span></span><br><span class="line"><span class="comment">//前六条产生式即可，对应规则第二条</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; ++ i) &#123;</span><br><span class="line">string front = grammar_1[i].first;</span><br><span class="line">string back = grammar_1[i].second;</span><br><span class="line"><span class="type">int</span> len = back.<span class="built_in">length</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; ++ i) &#123;</span><br><span class="line"><span class="function">string <span class="title">sub</span><span class="params">(back, i, <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="type">char</span> tmp = sub[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">if</span> (Vn.<span class="built_in">find</span>(tmp) != Vn.<span class="built_in">end</span>()) &#123;<span class="comment">//Vn</span></span><br><span class="line"><span class="function">string <span class="title">last</span><span class="params">(back, i + <span class="number">1</span>, len - i - <span class="number">1</span>)</span></span>;</span><br><span class="line">unordered_set&lt;string&gt; se;</span><br><span class="line"><span class="keyword">if</span> (last.<span class="built_in">length</span>() &gt; <span class="number">1</span>) se = first_3[last];</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="type">char</span> tmp2 = last[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">if</span> (Vn.<span class="built_in">find</span>(tmp2) != Vn.<span class="built_in">end</span>()) se = first_1[last];</span><br><span class="line"><span class="keyword">else</span> se = first_2[last];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it : se) &#123;</span><br><span class="line"><span class="keyword">if</span> (it != blank) follow[sub].<span class="built_in">insert</span>(it);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//前五条产生式即可，对应规则第三条</span></span><br><span class="line"><span class="type">bool</span> done = <span class="literal">false</span>;</span><br><span class="line"><span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (!done) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++ i) &#123;</span><br><span class="line">string front = grammar_1[i].first;</span><br><span class="line">string back = grammar_1[i].second;</span><br><span class="line"><span class="type">int</span> len = back.<span class="built_in">length</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = len - <span class="number">1</span>; i; -- i) &#123;</span><br><span class="line"><span class="function">string <span class="title">sub</span><span class="params">(back, i, <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="type">char</span> tmp = sub[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">if</span> (i == len - <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (Vn.<span class="built_in">find</span>(tmp) != Vn.<span class="built_in">end</span>()) &#123;</span><br><span class="line"><span class="type">int</span> before_size = follow[sub].<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it : follow[front]) &#123;</span><br><span class="line">follow[sub].<span class="built_in">insert</span>(it);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> after_size = follow[sub].<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">if</span> (after_size &gt; before_size) ++ cnt;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">string <span class="built_in">last</span>(back, i + <span class="number">1</span>, len - i - <span class="number">1</span>);</span><br><span class="line">unordered_set&lt;string&gt; se;</span><br><span class="line"><span class="keyword">if</span> (last.<span class="built_in">length</span>() &gt; <span class="number">1</span>) se = first_3[last];</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="type">char</span> tmp2 = last[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">if</span> (Vn.<span class="built_in">find</span>(tmp2) != Vn.<span class="built_in">end</span>()) se = first_1[last];</span><br><span class="line"><span class="keyword">else</span> se = first_2[last];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (se.<span class="built_in">find</span>(blank) == se.<span class="built_in">end</span>()) <span class="keyword">break</span>;</span><br><span class="line"><span class="type">int</span> before_size = follow[sub].<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it : follow[front]) &#123;</span><br><span class="line">follow[sub].<span class="built_in">insert</span>(it);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> after_size = follow[sub].<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">if</span> (after_size &gt; before_size) ++ cnt;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (cnt == <span class="number">0</span>) &#123;<span class="comment">//本轮所有follow集合均未扩大，即已经收敛</span></span><br><span class="line">done = <span class="literal">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> cnt = <span class="number">0</span>;<span class="comment">//尚未收敛,继续迭代</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里第一个for循环选择前六条产生式和后面while循环选择前五条产生式的原因和求解first集时理由类似，不多赘述，一切都是以follow集求解规则为准进行，只是使用代码取代了手动计算过程。</p><p><strong>void Make_Table()</strong></p><p>根据前面已经生成的first集和follow集，构造LL(1)分析表，具体思路如下：</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240115155921537.png" alt="image-20240115155921537"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Make_Table</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span> ; i &lt; (<span class="type">int</span>)re_grammar_1.<span class="built_in">size</span>(); ++ i) &#123;</span><br><span class="line">string front = re_grammar_1[i].first;</span><br><span class="line">string back = re_grammar_1[i].second;</span><br><span class="line">unordered_set&lt;string&gt; se;</span><br><span class="line"><span class="keyword">if</span> (front == blank) &#123;<span class="comment">//ε∈ first(αi),对应第二条规则</span></span><br><span class="line"><span class="type">char</span> tmp1 = back[<span class="number">0</span>];</span><br><span class="line">unordered_set&lt;string&gt; st = follow[back];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it2 : st) &#123;<span class="comment">//对于任一个b ∈FOLLOW(A) b ∈Vt或#,将A→ ε规则填入Table[A,b]</span></span><br><span class="line"><span class="type">char</span> tmp2 = it2[<span class="number">0</span>];</span><br><span class="line">Table.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(<span class="built_in">make_pair</span>(tmp1, tmp2), front));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (front.<span class="built_in">length</span>() &gt; <span class="number">1</span>) se = first_3[front];</span><br><span class="line"><span class="keyword">else</span> se = first_2[front];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it : se) &#123;<span class="comment">//对应第一条规则，任何a ∈FIRST(αi),将A → αi 规则填入Table[A, a]</span></span><br><span class="line"><span class="type">char</span> tmp1 = back[<span class="number">0</span>];</span><br><span class="line"><span class="type">char</span> tmp2 = it[<span class="number">0</span>];</span><br><span class="line">Table.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(<span class="built_in">make_pair</span>(tmp1, tmp2), front));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//思路同上</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span> ; i &lt; (<span class="type">int</span>)re_grammar_2.<span class="built_in">size</span>(); ++ i) &#123;</span><br><span class="line">string front = re_grammar_2[i].first;</span><br><span class="line">string back = re_grammar_2[i].second;</span><br><span class="line">unordered_set&lt;string&gt; se;</span><br><span class="line"><span class="keyword">if</span> (front == blank) &#123;</span><br><span class="line"><span class="type">char</span> tmp1 = back[<span class="number">0</span>];</span><br><span class="line">unordered_set&lt;string&gt; st = follow[back];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it2 : st) &#123;</span><br><span class="line"><span class="type">char</span> tmp2 = it2[<span class="number">0</span>];</span><br><span class="line">Table.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(<span class="built_in">make_pair</span>(tmp1, tmp2), front));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (front.<span class="built_in">length</span>() &gt; <span class="number">1</span>) se = first_3[front];</span><br><span class="line"><span class="keyword">else</span> se = first_2[front];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it : se) &#123;</span><br><span class="line"><span class="type">char</span> tmp1 = back[<span class="number">0</span>];</span><br><span class="line"><span class="type">char</span> tmp2 = it[<span class="number">0</span>];</span><br><span class="line">Table.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(<span class="built_in">make_pair</span>(tmp1, tmp2), front));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>void extract()</strong></p><p>该函数将<strong>词法分析程序输出的二元组</strong>根据类别进行拆分，并存入字符串数组token2。<strong>同时，在遇到标识符时，用i代替标识符并且存入数组token用于LL(1)分析。</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">extract</span><span class="params">()</span> </span>&#123;</span><br><span class="line">FILE *fp = <span class="built_in">fopen</span>(Path, <span class="string">&quot;r&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (fp == <span class="literal">NULL</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;The file can&#x27;t be opened!&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> ch;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(fp);</span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">feof</span>(fp)) &#123;</span><br><span class="line"><span class="keyword">if</span> (ch == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line"><span class="type">char</span> left = <span class="built_in">fgetc</span>(fp);</span><br><span class="line"><span class="type">char</span> right = <span class="built_in">fgetc</span>(fp);</span><br><span class="line">string tmp = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">while</span> (right != left) &#123;</span><br><span class="line">tmp += right;</span><br><span class="line">right = <span class="built_in">fgetc</span>(fp);</span><br><span class="line">&#125;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(fp);</span><br><span class="line"><span class="type">char</span> label = <span class="built_in">fgetc</span>(fp);</span><br><span class="line"><span class="keyword">if</span> (label == <span class="string">&#x27;2&#x27;</span> || label == <span class="string">&#x27;3&#x27;</span>) &#123;</span><br><span class="line">token[pos] = <span class="string">&#x27;i&#x27;</span>;</span><br><span class="line">token2[pos++] = tmp;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (label == <span class="string">&#x27;4&#x27;</span> || label == <span class="string">&#x27;5&#x27;</span>) &#123;</span><br><span class="line">token[pos] = tmp[<span class="number">0</span>];</span><br><span class="line">token2[pos++] = tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">&#x27;#&#x27;</span>) &#123;</span><br><span class="line">token[pos] = <span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">token2[pos++] = <span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(fp);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>int main()</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">init</span>();</span><br><span class="line"><span class="built_in">solve_first</span>();</span><br><span class="line"><span class="built_in">solve_first2</span>();</span><br><span class="line"><span class="built_in">solve_follow</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//分析栈初始化</span></span><br><span class="line">analysis_stack.<span class="built_in">push</span>(<span class="string">&#x27;#&#x27;</span>);</span><br><span class="line">analysis_stack.<span class="built_in">push</span>(<span class="string">&#x27;S&#x27;</span>);</span><br><span class="line"><span class="comment">//构建LL(1)分析表</span></span><br><span class="line"><span class="built_in">Make_Table</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">extract</span>();</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;算术表达式为: &quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; pos; ++i) &#123;</span><br><span class="line">cout &lt;&lt; token2[i];</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;等价于: &quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; pos; ++i) &#123;</span><br><span class="line">cout &lt;&lt; token[i];</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (!analysis_stack.<span class="built_in">empty</span>()) &#123;</span><br><span class="line"><span class="type">char</span> top = analysis_stack.<span class="built_in">top</span>();</span><br><span class="line"><span class="keyword">if</span> (Vn.<span class="built_in">find</span>(top) != Vn.<span class="built_in">end</span>()) &#123;<span class="comment">//Xm 属于 Vn</span></span><br><span class="line">PCC tmp = <span class="built_in">make_pair</span>(top, token[i]);</span><br><span class="line"><span class="comment">//cout &lt;&lt; tmp.first &lt;&lt; &quot; &quot; &lt;&lt; tmp.second &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; Table[tmp] &lt;&lt; endl;</span></span><br><span class="line"><span class="keyword">if</span> (Table.<span class="built_in">find</span>(tmp) != Table.<span class="built_in">end</span>()) &#123;<span class="comment">//M[Xm,ai]对应一产生式</span></span><br><span class="line">analysis_stack.<span class="built_in">pop</span>();</span><br><span class="line">string out = Table[tmp];</span><br><span class="line"><span class="keyword">if</span> (out == blank) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = out.<span class="built_in">length</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; -- i) &#123;</span><br><span class="line">analysis_stack.<span class="built_in">push</span>(out[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot; Vn Error&quot;</span> &lt;&lt; endl;<span class="comment">//出错处理</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (Vt.<span class="built_in">find</span>(top) != Vt.<span class="built_in">end</span>()) &#123;<span class="comment">//Xm 属于 Vt</span></span><br><span class="line"><span class="keyword">if</span> (top == token[i] &amp;&amp; top != <span class="string">&#x27;#&#x27;</span>) &#123;</span><br><span class="line">analysis_stack.<span class="built_in">pop</span>();</span><br><span class="line">++ i;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (top != token[i]) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot; Vt Error&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (top == <span class="string">&#x27;#&#x27;</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (top == token[i]) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Success&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;# Error&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>即当分析栈不为空时，依次对栈顶的符号和输入串当前判断的字符进行LL(1)查表，图解如下：</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240115160250050.png" alt="image-20240115160250050"></p><h3 id="实验测试-2"><a href="#实验测试-2" class="headerlink" title="实验测试"></a>实验测试</h3><h4 id="测试案例一-1"><a href="#测试案例一-1" class="headerlink" title="测试案例一"></a>测试案例一</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240115160400245.png" alt="image-20240115160400245"></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240115160407414.png" alt="image-20240115160407414"></p><h4 id="测试案例二-1"><a href="#测试案例二-1" class="headerlink" title="测试案例二"></a>测试案例二</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240115160416005.png" alt="image-20240115160416005"></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240115160422445.png" alt="image-20240115160422445"></p><h4 id="测试案例三-1"><a href="#测试案例三-1" class="headerlink" title="测试案例三"></a>测试案例三</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240115160430536.png" alt="image-20240115160430536"></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240115160436426.png" alt="image-20240115160436426"></p><h4 id="测试案例四-1"><a href="#测试案例四-1" class="headerlink" title="测试案例四"></a>测试案例四</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240115160444460.png" alt="image-20240115160444460"></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240115160449365.png" alt="image-20240115160449365"></p><h4 id="测试案例五-1"><a href="#测试案例五-1" class="headerlink" title="测试案例五"></a>测试案例五</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240115160457142.png" alt="image-20240115160457142"></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240115160503279.png" alt="image-20240115160503279"></p><h4 id="测试案例六-1"><a href="#测试案例六-1" class="headerlink" title="测试案例六"></a>测试案例六</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240115160509948.png" alt="image-20240115160509948"></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240115160517047.png" alt="image-20240115160517047"></p><h3 id="完整代码-2"><a href="#完整代码-2" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX 1010</span></span><br><span class="line"><span class="type">char</span> token[MAX];<span class="comment">//存有算术表达式等价形式</span></span><br><span class="line">string token2[MAX];<span class="comment">//存有最初的算术表达式</span></span><br><span class="line"><span class="type">int</span> pos = <span class="number">0</span>;<span class="comment">//算数表达式中字符的个数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将E1、T1分别定义为e、t,方便操作</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> E1 e</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> T1 t</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义终结符号集合和非终结符号集合</span></span><br><span class="line">unordered_set&lt;<span class="type">char</span>&gt; Vn = &#123;<span class="string">&#x27;S&#x27;</span>, <span class="string">&#x27;V&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;T&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;M&#x27;</span>&#125;;</span><br><span class="line">unordered_set&lt;<span class="type">char</span>&gt; Vt = &#123;<span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;)&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;+&#x27;</span>, <span class="string">&#x27;-&#x27;</span>, <span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;=&#x27;</span>&#125;;<span class="comment">//=</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//产生式右部复合符号串</span></span><br><span class="line">unordered_set&lt;string&gt; Mul = &#123;<span class="string">&quot;V=E&quot;</span>, <span class="string">&quot;Te&quot;</span>, <span class="string">&quot;ATe&quot;</span>, <span class="string">&quot;Ft&quot;</span>, <span class="string">&quot;MFt&quot;</span>, <span class="string">&quot;(E)&quot;</span>, <span class="string">&quot;=E&quot;</span>, <span class="string">&quot;Te&quot;</span>, <span class="string">&quot;Ft&quot;</span>, <span class="string">&quot;E)&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//分析栈</span></span><br><span class="line">stack&lt;<span class="type">char</span>&gt; analysis_stack;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义空ε</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> blank <span class="string">&quot;@&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//词法规则,产生式</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;string, string&gt; PSS;</span><br><span class="line">vector&lt;PSS&gt; grammar_1 = &#123;<span class="built_in">make_pair</span>(<span class="string">&quot;S&quot;</span>, <span class="string">&quot;V=E&quot;</span>),</span><br><span class="line">                         <span class="built_in">make_pair</span>(<span class="string">&quot;E&quot;</span>, <span class="string">&quot;Te&quot;</span>),</span><br><span class="line">                         <span class="built_in">make_pair</span>(<span class="string">&quot;e&quot;</span>, <span class="string">&quot;ATe&quot;</span>),</span><br><span class="line">                         <span class="built_in">make_pair</span>(<span class="string">&quot;T&quot;</span>, <span class="string">&quot;Ft&quot;</span>),</span><br><span class="line">                         <span class="built_in">make_pair</span>(<span class="string">&quot;t&quot;</span>, <span class="string">&quot;MFt&quot;</span>),</span><br><span class="line">                         <span class="built_in">make_pair</span>(<span class="string">&quot;F&quot;</span>, <span class="string">&quot;(E)&quot;</span>),</span><br><span class="line">                         <span class="built_in">make_pair</span>(<span class="string">&quot;F&quot;</span>, <span class="string">&quot;i&quot;</span>),</span><br><span class="line">                         <span class="built_in">make_pair</span>(<span class="string">&quot;A&quot;</span>, <span class="string">&quot;+&quot;</span>),</span><br><span class="line">                         <span class="built_in">make_pair</span>(<span class="string">&quot;A&quot;</span>, <span class="string">&quot;-&quot;</span>),</span><br><span class="line">                         <span class="built_in">make_pair</span>(<span class="string">&quot;M&quot;</span>, <span class="string">&quot;*&quot;</span>),</span><br><span class="line">                         <span class="built_in">make_pair</span>(<span class="string">&quot;M&quot;</span>, <span class="string">&quot;/&quot;</span>),</span><br><span class="line">                         <span class="built_in">make_pair</span>(<span class="string">&quot;V&quot;</span>, <span class="string">&quot;i&quot;</span>)</span><br><span class="line">                        &#125;;</span><br><span class="line">vector&lt;PSS&gt; grammar_2 = &#123;<span class="built_in">make_pair</span>(<span class="string">&quot;e&quot;</span>, blank), <span class="built_in">make_pair</span>(<span class="string">&quot;t&quot;</span>, blank)&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//first集</span></span><br><span class="line">unordered_map&lt;string, unordered_set&lt;string&gt;&gt; first_1;<span class="comment">//非终结符号的first集合</span></span><br><span class="line">unordered_map&lt;string, unordered_set&lt;string&gt;&gt; first_2;<span class="comment">//终结符号的first集合</span></span><br><span class="line">unordered_map&lt;string, unordered_set&lt;string&gt;&gt; first_3;<span class="comment">//产生式右部复合符号串的first集合</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;<span class="comment">//对first集进行初始化</span></span><br><span class="line"><span class="comment">//非终结符号的first集合的初始化part_1</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; (<span class="type">int</span>)grammar_1.<span class="built_in">size</span>(); ++ i) &#123;</span><br><span class="line">string key = grammar_1[i].first;</span><br><span class="line">string value = grammar_1[i].second;</span><br><span class="line"><span class="type">char</span> head = (<span class="type">char</span>)value[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">if</span> (Vt.<span class="built_in">find</span>(head) != Vt.<span class="built_in">end</span>()) &#123;<span class="comment">//X-&gt;aα,则a∈first(X)</span></span><br><span class="line"><span class="function">string <span class="title">w</span><span class="params">(<span class="number">1</span>, head)</span></span>;</span><br><span class="line">first_1[key].<span class="built_in">insert</span>(w);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//非终结符号的first集合的初始化part_2</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; (<span class="type">int</span>)grammar_2.<span class="built_in">size</span>(); ++ i) &#123;<span class="comment">//x-&gt;ε,则ε∈first(X)</span></span><br><span class="line">string key = grammar_2[i].first;</span><br><span class="line">string value = grammar_2[i].second;</span><br><span class="line">first_1[key].<span class="built_in">insert</span>(value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//终结符号的first集合的初始化</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it : Vt) &#123;<span class="comment">//first(x)=&#123;x&#125;;</span></span><br><span class="line"><span class="type">char</span> tmp = it;</span><br><span class="line"><span class="function">string <span class="title">key</span><span class="params">(<span class="number">1</span>, tmp)</span></span>;</span><br><span class="line"><span class="function">string <span class="title">value</span><span class="params">(<span class="number">1</span>, tmp)</span></span>;</span><br><span class="line">first_2[key].<span class="built_in">insert</span>(value);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve_first</span><span class="params">()</span> </span>&#123;<span class="comment">//循环求解</span></span><br><span class="line"><span class="comment">//根据生成规则，实际上这里只需要利用到产生式前5项即可</span></span><br><span class="line"><span class="type">bool</span> done = <span class="literal">false</span>;</span><br><span class="line"><span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (!done) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++ i) &#123;</span><br><span class="line">string front = grammar_1[i].first;</span><br><span class="line">string back = grammar_1[i].second;</span><br><span class="line"><span class="type">bool</span> keep = <span class="literal">true</span>;</span><br><span class="line"><span class="type">int</span> len = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> limit = back.<span class="built_in">length</span>();</span><br><span class="line"><span class="keyword">while</span> (keep &amp;&amp; len &lt; limit) &#123;</span><br><span class="line"><span class="function">string <span class="title">sub</span><span class="params">(back, len, <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="type">char</span> tmp = sub[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">if</span> (Vn.<span class="built_in">find</span>(tmp) != Vn.<span class="built_in">end</span>()) &#123;<span class="comment">//Yi 属于 Vn</span></span><br><span class="line">unordered_set&lt;string&gt; first_set = first_1[sub];</span><br><span class="line"><span class="type">int</span> size_before = first_1[front].<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it : first_set) &#123;<span class="comment">//将first&#123;Yi&#125;/ε放入X</span></span><br><span class="line"><span class="keyword">if</span> (it != blank) &#123;</span><br><span class="line">first_1[front].<span class="built_in">insert</span>(it);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> size_after = first_1[front].<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">if</span> (size_before &lt; size_after) &#123;<span class="comment">//X发生扩大</span></span><br><span class="line">++ cnt;</span><br><span class="line">&#125;</span><br><span class="line">++ len;</span><br><span class="line"><span class="keyword">if</span> (first_set.<span class="built_in">find</span>(blank) == first_set.<span class="built_in">end</span>()) keep = <span class="literal">false</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">if</span> (len == (limit + <span class="number">1</span>) &amp;&amp; keep) &#123;</span><br><span class="line">first_1[front].<span class="built_in">insert</span>(blank);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (cnt == <span class="number">0</span>) &#123;<span class="comment">//本轮所有first集合均未扩大，即已经收敛</span></span><br><span class="line">done = <span class="literal">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> cnt = <span class="number">0</span>;<span class="comment">//尚未收敛,继续迭代</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve_first2</span><span class="params">()</span> </span>&#123;<span class="comment">//求解产生式右部复合符号串的first集合</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it : Mul) &#123;</span><br><span class="line">string cur = it;</span><br><span class="line"><span class="type">int</span> len = cur.<span class="built_in">length</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++ i) &#123;<span class="comment">//从产生式右部符号串第一个字符开始遍历</span></span><br><span class="line"><span class="function">string <span class="title">sub</span><span class="params">(cur, i, <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="type">char</span> tmp = sub[<span class="number">0</span>];</span><br><span class="line">unordered_set&lt;string&gt; st;</span><br><span class="line"><span class="keyword">if</span> (Vn.<span class="built_in">find</span>(tmp) != Vn.<span class="built_in">end</span>()) st = first_1[sub];</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (Vt.<span class="built_in">find</span>(tmp) != Vt.<span class="built_in">end</span>()) st = first_2[sub];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it2 : st) &#123;<span class="comment">//查Xi的first，将除ε之外的元素添加</span></span><br><span class="line"><span class="keyword">if</span> (it2 != blank) &#123;</span><br><span class="line">first_3[it].<span class="built_in">insert</span>(it2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (st.<span class="built_in">find</span>(blank) == st.<span class="built_in">end</span>()) &#123;<span class="comment">//ε不在first(Xi)中，不需要再往后看字符，直接跳出循环</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (i == len - <span class="number">1</span>) first_3[it].<span class="built_in">insert</span>(blank);<span class="comment">//右部符号串遍历完，则ε∈first(X)</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//follow集</span></span><br><span class="line">unordered_map&lt;string, unordered_set&lt;string&gt;&gt; follow;<span class="comment">//非终结符号的follow集合</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve_follow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">follow[<span class="string">&quot;S&quot;</span>].<span class="built_in">insert</span>(<span class="string">&quot;#&quot;</span>);<span class="comment">//S为文法开始符号,对应规则第一条</span></span><br><span class="line"><span class="comment">//前六条产生式即可，对应规则第二条</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; ++ i) &#123;</span><br><span class="line">string front = grammar_1[i].first;</span><br><span class="line">string back = grammar_1[i].second;</span><br><span class="line"><span class="type">int</span> len = back.<span class="built_in">length</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; ++ i) &#123;</span><br><span class="line"><span class="function">string <span class="title">sub</span><span class="params">(back, i, <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="type">char</span> tmp = sub[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">if</span> (Vn.<span class="built_in">find</span>(tmp) != Vn.<span class="built_in">end</span>()) &#123;<span class="comment">//Vn</span></span><br><span class="line"><span class="function">string <span class="title">last</span><span class="params">(back, i + <span class="number">1</span>, len - i - <span class="number">1</span>)</span></span>;</span><br><span class="line">unordered_set&lt;string&gt; se;</span><br><span class="line"><span class="keyword">if</span> (last.<span class="built_in">length</span>() &gt; <span class="number">1</span>) se = first_3[last];</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="type">char</span> tmp2 = last[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">if</span> (Vn.<span class="built_in">find</span>(tmp2) != Vn.<span class="built_in">end</span>()) se = first_1[last];</span><br><span class="line"><span class="keyword">else</span> se = first_2[last];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it : se) &#123;</span><br><span class="line"><span class="keyword">if</span> (it != blank) follow[sub].<span class="built_in">insert</span>(it);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//前五条产生式即可，对应规则第三条</span></span><br><span class="line"><span class="type">bool</span> done = <span class="literal">false</span>;</span><br><span class="line"><span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (!done) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++ i) &#123;</span><br><span class="line">string front = grammar_1[i].first;</span><br><span class="line">string back = grammar_1[i].second;</span><br><span class="line"><span class="type">int</span> len = back.<span class="built_in">length</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = len - <span class="number">1</span>; i; -- i) &#123;</span><br><span class="line"><span class="function">string <span class="title">sub</span><span class="params">(back, i, <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="type">char</span> tmp = sub[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">if</span> (i == len - <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (Vn.<span class="built_in">find</span>(tmp) != Vn.<span class="built_in">end</span>()) &#123;</span><br><span class="line"><span class="type">int</span> before_size = follow[sub].<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it : follow[front]) &#123;</span><br><span class="line">follow[sub].<span class="built_in">insert</span>(it);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> after_size = follow[sub].<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">if</span> (after_size &gt; before_size) ++ cnt;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">string <span class="built_in">last</span>(back, i + <span class="number">1</span>, len - i - <span class="number">1</span>);</span><br><span class="line">unordered_set&lt;string&gt; se;</span><br><span class="line"><span class="keyword">if</span> (last.<span class="built_in">length</span>() &gt; <span class="number">1</span>) se = first_3[last];</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="type">char</span> tmp2 = last[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">if</span> (Vn.<span class="built_in">find</span>(tmp2) != Vn.<span class="built_in">end</span>()) se = first_1[last];</span><br><span class="line"><span class="keyword">else</span> se = first_2[last];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (se.<span class="built_in">find</span>(blank) == se.<span class="built_in">end</span>()) <span class="keyword">break</span>;</span><br><span class="line"><span class="type">int</span> before_size = follow[sub].<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it : follow[front]) &#123;</span><br><span class="line">follow[sub].<span class="built_in">insert</span>(it);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> after_size = follow[sub].<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">if</span> (after_size &gt; before_size) ++ cnt;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (cnt == <span class="number">0</span>) &#123;<span class="comment">//本轮所有follow集合均未扩大，即已经收敛</span></span><br><span class="line">done = <span class="literal">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> cnt = <span class="number">0</span>;<span class="comment">//尚未收敛,继续迭代</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//生成LL(1)分析表</span></span><br><span class="line"><span class="comment">//LL(1)分析表</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">char</span>, <span class="type">char</span>&gt; PCC;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">hash_pair</span> &#123;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T1</span>, <span class="keyword">class</span> <span class="title class_">T2</span>&gt;</span><br><span class="line"><span class="function"><span class="type">size_t</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">const</span> pair&lt;T1, T2&gt;&amp; p)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line"><span class="keyword">auto</span> hash1 = hash&lt;T1&gt; &#123;&#125;(p.first);</span><br><span class="line"><span class="keyword">auto</span> hash2 = hash&lt;T2&gt; &#123;&#125;(p.second);</span><br><span class="line"><span class="keyword">return</span> hash1 ^ hash2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">unordered_map&lt;PCC, string, hash_pair&gt; Table;</span><br><span class="line"></span><br><span class="line"><span class="comment">//文法产生式反向映射表</span></span><br><span class="line">vector&lt;PSS&gt; re_grammar_1 = &#123;<span class="built_in">make_pair</span>( <span class="string">&quot;V=E&quot;</span>, <span class="string">&quot;S&quot;</span>),</span><br><span class="line">                            <span class="built_in">make_pair</span>(<span class="string">&quot;Te&quot;</span>, <span class="string">&quot;E&quot;</span>),</span><br><span class="line">                            <span class="built_in">make_pair</span>(<span class="string">&quot;ATe&quot;</span>, <span class="string">&quot;e&quot;</span>),</span><br><span class="line">                            <span class="built_in">make_pair</span>(blank, <span class="string">&quot;e&quot;</span>),</span><br><span class="line">                            <span class="built_in">make_pair</span>(<span class="string">&quot;Ft&quot;</span>, <span class="string">&quot;T&quot;</span>),</span><br><span class="line">                            <span class="built_in">make_pair</span>(<span class="string">&quot;MFt&quot;</span>, <span class="string">&quot;t&quot;</span>),</span><br><span class="line">                            <span class="built_in">make_pair</span>(<span class="string">&quot;(E)&quot;</span>, <span class="string">&quot;F&quot;</span>),</span><br><span class="line">                            <span class="built_in">make_pair</span>(<span class="string">&quot;i&quot;</span>, <span class="string">&quot;F&quot;</span>),</span><br><span class="line">                            <span class="built_in">make_pair</span>(<span class="string">&quot;+&quot;</span>, <span class="string">&quot;A&quot;</span>),</span><br><span class="line">                            <span class="built_in">make_pair</span>(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;A&quot;</span>),</span><br><span class="line">                            <span class="built_in">make_pair</span>(<span class="string">&quot;*&quot;</span>, <span class="string">&quot;M&quot;</span>),</span><br><span class="line">                            <span class="built_in">make_pair</span>(<span class="string">&quot;/&quot;</span>, <span class="string">&quot;M&quot;</span>)</span><br><span class="line">                           &#125;;</span><br><span class="line"></span><br><span class="line">vector&lt;PSS&gt; re_grammar_2 = &#123;<span class="built_in">make_pair</span>(blank, <span class="string">&quot;t&quot;</span>),</span><br><span class="line">                            <span class="built_in">make_pair</span>(<span class="string">&quot;i&quot;</span>, <span class="string">&quot;V&quot;</span>),</span><br><span class="line">                           &#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Make_Table</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span> ; i &lt; (<span class="type">int</span>)re_grammar_1.<span class="built_in">size</span>(); ++ i) &#123;</span><br><span class="line">string front = re_grammar_1[i].first;</span><br><span class="line">string back = re_grammar_1[i].second;</span><br><span class="line">unordered_set&lt;string&gt; se;</span><br><span class="line"><span class="keyword">if</span> (front == blank) &#123;<span class="comment">//ε∈ first(αi),对应第二条规则</span></span><br><span class="line"><span class="type">char</span> tmp1 = back[<span class="number">0</span>];</span><br><span class="line">unordered_set&lt;string&gt; st = follow[back];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it2 : st) &#123;<span class="comment">//对于任一个b ∈FOLLOW(A) b ∈Vt或#,将A→ ε规则填入Table[A,b]</span></span><br><span class="line"><span class="type">char</span> tmp2 = it2[<span class="number">0</span>];</span><br><span class="line">Table.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(<span class="built_in">make_pair</span>(tmp1, tmp2), front));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (front.<span class="built_in">length</span>() &gt; <span class="number">1</span>) se = first_3[front];</span><br><span class="line"><span class="keyword">else</span> se = first_2[front];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it : se) &#123;<span class="comment">//对应第一条规则，任何a ∈FIRST(αi),将A → αi 规则填入Table[A, a]</span></span><br><span class="line"><span class="type">char</span> tmp1 = back[<span class="number">0</span>];</span><br><span class="line"><span class="type">char</span> tmp2 = it[<span class="number">0</span>];</span><br><span class="line">Table.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(<span class="built_in">make_pair</span>(tmp1, tmp2), front));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//思路同上</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span> ; i &lt; (<span class="type">int</span>)re_grammar_2.<span class="built_in">size</span>(); ++ i) &#123;</span><br><span class="line">string front = re_grammar_2[i].first;</span><br><span class="line">string back = re_grammar_2[i].second;</span><br><span class="line">unordered_set&lt;string&gt; se;</span><br><span class="line"><span class="keyword">if</span> (front == blank) &#123;</span><br><span class="line"><span class="type">char</span> tmp1 = back[<span class="number">0</span>];</span><br><span class="line">unordered_set&lt;string&gt; st = follow[back];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it2 : st) &#123;</span><br><span class="line"><span class="type">char</span> tmp2 = it2[<span class="number">0</span>];</span><br><span class="line">Table.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(<span class="built_in">make_pair</span>(tmp1, tmp2), front));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (front.<span class="built_in">length</span>() &gt; <span class="number">1</span>) se = first_3[front];</span><br><span class="line"><span class="keyword">else</span> se = first_2[front];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it : se) &#123;</span><br><span class="line"><span class="type">char</span> tmp1 = back[<span class="number">0</span>];</span><br><span class="line"><span class="type">char</span> tmp2 = it[<span class="number">0</span>];</span><br><span class="line">Table.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(<span class="built_in">make_pair</span>(tmp1, tmp2), front));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">extract</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">init</span>();</span><br><span class="line"><span class="built_in">solve_first</span>();</span><br><span class="line"><span class="built_in">solve_first2</span>();</span><br><span class="line"><span class="built_in">solve_follow</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//分析栈初始化</span></span><br><span class="line">analysis_stack.<span class="built_in">push</span>(<span class="string">&#x27;#&#x27;</span>);</span><br><span class="line">analysis_stack.<span class="built_in">push</span>(<span class="string">&#x27;S&#x27;</span>);</span><br><span class="line"><span class="comment">//构建LL(1)分析表</span></span><br><span class="line"><span class="built_in">Make_Table</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">extract</span>();</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;算术表达式为: &quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; pos; ++i) &#123;</span><br><span class="line">cout &lt;&lt; token2[i];</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;等价于: &quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; pos; ++i) &#123;</span><br><span class="line">cout &lt;&lt; token[i];</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (!analysis_stack.<span class="built_in">empty</span>()) &#123;</span><br><span class="line"><span class="type">char</span> top = analysis_stack.<span class="built_in">top</span>();</span><br><span class="line"><span class="keyword">if</span> (Vn.<span class="built_in">find</span>(top) != Vn.<span class="built_in">end</span>()) &#123;<span class="comment">//Xm 属于 Vn</span></span><br><span class="line">PCC tmp = <span class="built_in">make_pair</span>(top, token[i]);</span><br><span class="line"><span class="comment">//cout &lt;&lt; tmp.first &lt;&lt; &quot; &quot; &lt;&lt; tmp.second &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; Table[tmp] &lt;&lt; endl;</span></span><br><span class="line"><span class="keyword">if</span> (Table.<span class="built_in">find</span>(tmp) != Table.<span class="built_in">end</span>()) &#123;<span class="comment">//M[Xm,ai]对应一产生式</span></span><br><span class="line">analysis_stack.<span class="built_in">pop</span>();</span><br><span class="line">string out = Table[tmp];</span><br><span class="line"><span class="keyword">if</span> (out == blank) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = out.<span class="built_in">length</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; -- i) &#123;</span><br><span class="line">analysis_stack.<span class="built_in">push</span>(out[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot; Vn Error&quot;</span> &lt;&lt; endl;<span class="comment">//出错处理</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (Vt.<span class="built_in">find</span>(top) != Vt.<span class="built_in">end</span>()) &#123;<span class="comment">//Xm 属于 Vt</span></span><br><span class="line"><span class="keyword">if</span> (top == token[i] &amp;&amp; top != <span class="string">&#x27;#&#x27;</span>) &#123;</span><br><span class="line">analysis_stack.<span class="built_in">pop</span>();</span><br><span class="line">++ i;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (top != token[i]) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot; Vt Error&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (top == <span class="string">&#x27;#&#x27;</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (top == token[i]) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Success&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;# Error&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">extract</span><span class="params">()</span> </span>&#123;</span><br><span class="line">FILE *fp = <span class="built_in">fopen</span>(<span class="string">&quot;D:\\A-Project\\Compiler\\LL(1) Syntax Analysis\\Test_data\\1.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (fp == <span class="literal">NULL</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;The file can&#x27;t be opened!&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> ch;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(fp);</span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">feof</span>(fp)) &#123;</span><br><span class="line"><span class="keyword">if</span> (ch == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line"><span class="type">char</span> left = <span class="built_in">fgetc</span>(fp);</span><br><span class="line"><span class="type">char</span> right = <span class="built_in">fgetc</span>(fp);</span><br><span class="line">string tmp = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">while</span> (right != left) &#123;</span><br><span class="line">tmp += right;</span><br><span class="line">right = <span class="built_in">fgetc</span>(fp);</span><br><span class="line">&#125;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(fp);</span><br><span class="line"><span class="type">char</span> label = <span class="built_in">fgetc</span>(fp);</span><br><span class="line"><span class="keyword">if</span> (label == <span class="string">&#x27;2&#x27;</span> || label == <span class="string">&#x27;3&#x27;</span>) &#123;</span><br><span class="line">token[pos] = <span class="string">&#x27;i&#x27;</span>;</span><br><span class="line">token2[pos++] = tmp;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (label == <span class="string">&#x27;4&#x27;</span> || label == <span class="string">&#x27;5&#x27;</span>) &#123;</span><br><span class="line">token[pos] = tmp[<span class="number">0</span>];</span><br><span class="line">token2[pos++] = tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">&#x27;#&#x27;</span>) &#123;</span><br><span class="line">token[pos] = <span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">token2[pos++] = <span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(fp);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印first集合</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">for (auto it : first_1) &#123;</span></span><br><span class="line"><span class="comment">unordered_set&lt;string&gt; ot = it.second;</span></span><br><span class="line"><span class="comment">cout &lt;&lt; it.first &lt;&lt; &quot;:&quot;;</span></span><br><span class="line"><span class="comment">for (auto w : ot) &#123;</span></span><br><span class="line"><span class="comment">cout &lt;&lt; w &lt;&lt; &quot; &quot;;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">cout &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">for (auto it : first_2) &#123;</span></span><br><span class="line"><span class="comment">unordered_set&lt;string&gt; ot = it.second;</span></span><br><span class="line"><span class="comment">cout &lt;&lt; it.first &lt;&lt; &quot;:&quot;;</span></span><br><span class="line"><span class="comment">for (auto w : ot) &#123;</span></span><br><span class="line"><span class="comment">cout &lt;&lt; w &lt;&lt; &quot; &quot;;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">cout &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">for (auto it : first_3) &#123;</span></span><br><span class="line"><span class="comment">unordered_set&lt;string&gt; ot = it.second;</span></span><br><span class="line"><span class="comment">cout &lt;&lt; it.first &lt;&lt; &quot;:&quot;;</span></span><br><span class="line"><span class="comment">for (auto w : ot) &#123;</span></span><br><span class="line"><span class="comment">cout &lt;&lt; w &lt;&lt; &quot; &quot;;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">cout &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//打印follow集合</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">for (auto it : follow) &#123;</span></span><br><span class="line"><span class="comment">unordered_set&lt;string&gt; ot = it.second;</span></span><br><span class="line"><span class="comment">cout &lt;&lt; it.first &lt;&lt; &quot;:&quot;;</span></span><br><span class="line"><span class="comment">for (auto w : ot) &#123;</span></span><br><span class="line"><span class="comment">cout &lt;&lt; w &lt;&lt; &quot; &quot;;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">cout &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/*//打印规则</span></span><br><span class="line"><span class="comment">for(int i = 0; i &lt; (int)grammar_1.size(); ++ i) &#123;</span></span><br><span class="line"><span class="comment">cout &lt;&lt; grammar_1[i].first &lt;&lt; &quot;-&gt;&quot; &lt;&lt; grammar_1[i].second &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">for(int i = 0; i &lt; (int)grammar_2.size(); ++ i) &#123;</span></span><br><span class="line"><span class="comment">cout &lt;&lt; grammar_2[i].first &lt;&lt; &quot;-&gt;&quot; &lt;&lt; grammar_2[i].second &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="算符优先分析设计原理与实现"><a href="#算符优先分析设计原理与实现" class="headerlink" title="算符优先分析设计原理与实现"></a>算符优先分析设计原理与实现</h2><h3 id="实验内容-3"><a href="#实验内容-3" class="headerlink" title="实验内容"></a>实验内容</h3><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240115160626985.png" alt="image-20240115160626985"></p><h3 id="实验设计-3"><a href="#实验设计-3" class="headerlink" title="实验设计"></a>实验设计</h3><h4 id="实验思路设计-3"><a href="#实验思路设计-3" class="headerlink" title="实验思路设计"></a>实验思路设计</h4><ul><li>首先根据规则生成非终结符号的FIRSTVT集和LASTVT集</li><li>然后根据生成的FIRSTVT集和LASTVT集生算符优先关系矩阵</li><li>最后根据算符优先关系矩阵利用分析栈实现算符优先分析</li></ul><h4 id="实验具体实现-3"><a href="#实验具体实现-3" class="headerlink" title="实验具体实现"></a>实验具体实现</h4><p><code>数据结构设计</code></p><p><strong>Token[MAX]</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MAX 1010</span></span><br><span class="line"><span class="type">char</span> token[MAX];<span class="comment">//存有算术表达式等价形式</span></span><br><span class="line">string token2[MAX];<span class="comment">//存有最初的算术表达式</span></span><br><span class="line">string token3[MAX];<span class="comment">//实际为:token[i + 1] = token[i],这样是为了配对可见上的分析程序,即下标从一开始</span></span><br><span class="line"><span class="type">int</span> pos = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>由于采用词法分析输出二元组作为输入，将二元组还原成表达式存在token2中，然后用i代替全部标识符后存在token里，用于进行算符优先分析。</p><p>然后考虑到OPG分析算法中输入的字符串下标从一开始，所以token3[MAX]数组营运而生，进行操作:token3[i + 1] &#x3D; token[i]。</p><p><strong>非终结符号集V<sub>n</sub>与终结符号集V<sub>t</sub></strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">unordered_set&lt;string&gt; Vn = &#123;<span class="string">&quot;E&quot;</span>, <span class="string">&quot;T&quot;</span>, <span class="string">&quot;F&quot;</span>&#125;;</span><br><span class="line">unordered_set&lt;string&gt; Vt = &#123;<span class="string">&quot;(&quot;</span>, <span class="string">&quot;)&quot;</span>, <span class="string">&quot;i&quot;</span>, <span class="string">&quot;+&quot;</span>, <span class="string">&quot;-&quot;</span>, <span class="string">&quot;*&quot;</span>, <span class="string">&quot;/&quot;</span>, <span class="string">&quot;#&quot;</span>&#125;;</span><br></pre></td></tr></table></figure><p><strong>文法产生式规则集合vector<PSS> grammar</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> pair&lt;string, string&gt; PSS;</span><br><span class="line">vector&lt;PSS&gt; grammar = &#123;<span class="built_in">make_pair</span>(<span class="string">&quot;E&quot;</span>, <span class="string">&quot;E+T&quot;</span>),</span><br><span class="line">                       <span class="built_in">make_pair</span>(<span class="string">&quot;E&quot;</span>, <span class="string">&quot;E-T&quot;</span>),</span><br><span class="line">                       <span class="built_in">make_pair</span>(<span class="string">&quot;E&quot;</span>, <span class="string">&quot;T&quot;</span>),</span><br><span class="line">                       <span class="built_in">make_pair</span>(<span class="string">&quot;T&quot;</span>, <span class="string">&quot;T*F&quot;</span>),</span><br><span class="line">                       <span class="built_in">make_pair</span>(<span class="string">&quot;T&quot;</span>, <span class="string">&quot;T/F&quot;</span>),</span><br><span class="line">                       <span class="built_in">make_pair</span>(<span class="string">&quot;T&quot;</span>, <span class="string">&quot;F&quot;</span>),</span><br><span class="line">                       <span class="built_in">make_pair</span>(<span class="string">&quot;F&quot;</span>, <span class="string">&quot;(E)&quot;</span>),</span><br><span class="line">                       <span class="built_in">make_pair</span>(<span class="string">&quot;F&quot;</span>, <span class="string">&quot;i&quot;</span>)</span><br><span class="line">                      &#125;;</span><br></pre></td></tr></table></figure><p><strong>分析栈stack<PSS> F</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stack&lt;PSS&gt; F;</span><br></pre></td></tr></table></figure><p><strong>FIRSTVT集和LASTVT集</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">unordered_map&lt;string, unordered_set&lt;string&gt;&gt; FIRSTVT;</span><br><span class="line">unordered_map&lt;string, unordered_set&lt;string&gt;&gt; LASTVT;</span><br></pre></td></tr></table></figure><p><strong>算符优先矩阵Table</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造算符优先矩阵</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">hash_pair</span> &#123;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T1</span>, <span class="keyword">class</span> <span class="title class_">T2</span>&gt;</span><br><span class="line"><span class="function"><span class="type">size_t</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">const</span> pair&lt;T1, T2&gt;&amp; p)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line"><span class="keyword">auto</span> hash1 = hash&lt;T1&gt; &#123;&#125;(p.first);</span><br><span class="line"><span class="keyword">auto</span> hash2 = hash&lt;T2&gt; &#123;&#125;(p.second);</span><br><span class="line"><span class="keyword">return</span> hash1 ^ hash2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">unordered_map&lt;PSS, <span class="type">char</span>, hash_pair&gt; Table;</span><br><span class="line"><span class="comment">// &lt; 表示低于= 表示等于&gt; 表示高于</span></span><br></pre></td></tr></table></figure><p><code>具体函数设计</code></p><p><strong>void Solve_FIRSTVT()</strong></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240115161612314.png" alt="image-20240115161612314"></p><ul><li><p>首先初始化：</p><ul><li>若有规则 U→b…, 或 U→Vb…,则 b ∈ FIRSTVT(U)</li><li>然后置（U，b）为真，并将该二元组压入栈F</li></ul></li><li><p>然后循环所有文法产生式：</p><ul><li>弹出栈顶元素，记（V,b）</li><li>对每个形如U-&gt;V…的规则</li><li>若F（U，b）为假，变为真，进STACK栈</li><li>若F（U，b）为真，再循环</li></ul></li><li><p>结果：</p><ul><li>FIRSTVT(U)&#x3D;{b∣F(U,b)&#x3D;TRUE}</li></ul></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Solve_FIRSTVT</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; (<span class="type">int</span>)grammar.<span class="built_in">size</span>(); ++ i) &#123;</span><br><span class="line">string front = grammar[i].first;</span><br><span class="line">string back = grammar[i].second;</span><br><span class="line"><span class="comment">//若有规则 U→b…, 或 U→Vb…,则 b ∈ FIRSTVT(U)</span></span><br><span class="line"><span class="type">int</span> len = back.<span class="built_in">length</span>();</span><br><span class="line"><span class="keyword">if</span> (len == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (Vt.<span class="built_in">find</span>(back) != Vt.<span class="built_in">end</span>()) &#123;</span><br><span class="line">FIRSTVT[front].<span class="built_in">insert</span>(back);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">string <span class="built_in">sub1</span>(back, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line"><span class="function">string <span class="title">sub2</span><span class="params">(back, <span class="number">1</span>, <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">if</span> (Vt.<span class="built_in">find</span>(sub1) != Vt.<span class="built_in">end</span>()) &#123;<span class="comment">//U→b…</span></span><br><span class="line">FIRSTVT[front].<span class="built_in">insert</span>(sub1);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (Vt.<span class="built_in">find</span>(sub2) != Vt.<span class="built_in">end</span>()) &#123;<span class="comment">//U→Vb…</span></span><br><span class="line">FIRSTVT[front].<span class="built_in">insert</span>(sub2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//循环</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it : FIRSTVT) &#123;<span class="comment">//F(U,b)为真的(U,b)对进STACK栈</span></span><br><span class="line">string left = it.first;</span><br><span class="line"><span class="keyword">auto</span> s = it.second;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> right : s) &#123;</span><br><span class="line">F.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(left, right));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (!F.<span class="built_in">empty</span>()) &#123; <span class="comment">//直至stack为空</span></span><br><span class="line"><span class="comment">//弹出栈顶元素,记: top = (V,b)</span></span><br><span class="line"><span class="keyword">auto</span> top = F.<span class="built_in">top</span>();</span><br><span class="line">F.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; (<span class="type">int</span>)grammar.<span class="built_in">size</span>(); ++ i) &#123;</span><br><span class="line">string left = grammar[i].first;</span><br><span class="line">string right = grammar[i].second;</span><br><span class="line"><span class="function">string <span class="title">one</span><span class="params">(right, <span class="number">0</span>, <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="comment">//对每一个形如 U →V…的规则</span></span><br><span class="line"><span class="comment">//若 F(U,b) 为假,变为真, 进STACK栈</span></span><br><span class="line"><span class="comment">//若 F(U,b) 为真,再循环</span></span><br><span class="line"><span class="keyword">if</span> (one == top.first) &#123;<span class="comment">//U →V…</span></span><br><span class="line"><span class="comment">//auto se = FIRSTVT[left];</span></span><br><span class="line"><span class="keyword">if</span> (FIRSTVT[left].<span class="built_in">find</span>(top.second) == FIRSTVT[left].<span class="built_in">end</span>()) &#123;<span class="comment">//F(U,b) 为假,变为真, 进STACK栈</span></span><br><span class="line">FIRSTVT[left].<span class="built_in">insert</span>(top.second);</span><br><span class="line">F.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(left, top.second));</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;&#125;<span class="comment">//F(U,b) 为真,再循环</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>void Print_FIRSTVT()</strong></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240115161836327.png" alt="image-20240115161836327"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Print_FIRSTVT</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it : FIRSTVT) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;FIRSTVT(&quot;</span> &lt;&lt; it.first &lt;&lt; <span class="string">&quot;)&quot;</span> &lt;&lt; <span class="string">&quot; : &quot;</span>;</span><br><span class="line"><span class="keyword">auto</span> s = it.second;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;&#123;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> i : s) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;、&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;&#125;&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>void Solve_LASTVT()</strong></p><p>思路与FIRSTVT集求解类似</p><ul><li><p>首先初始化：</p><ul><li>若有规则 U→…b, 或 U→…bV,则 b ∈ FIRSTVT(U)</li><li>然后置（U，b）为真，并将该二元组压入栈F</li></ul></li><li><p>然后循环所有文法产生式：</p><ul><li>弹出栈顶元素，记（V,b）</li><li>对每个形如U-&gt;V…的规则</li><li>若F（U，b）为假，变为真，进STACK栈</li><li>若F（U，b）为真，再循环</li></ul></li><li><p>结果：</p><ul><li>LASTVT(U)&#x3D;{b∣F(U,b)&#x3D;TRUE}</li></ul></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Solve_LASTVT</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; (<span class="type">int</span>)grammar.<span class="built_in">size</span>(); ++ i) &#123;</span><br><span class="line">string front = grammar[i].first;</span><br><span class="line">string back = grammar[i].second;</span><br><span class="line"><span class="comment">//若有规则 U→…a, 或 U→…aV,则 a ∈ LASTVT(U)</span></span><br><span class="line"><span class="type">int</span> len = back.<span class="built_in">length</span>();</span><br><span class="line"><span class="keyword">if</span> (len == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (Vt.<span class="built_in">find</span>(back) != Vt.<span class="built_in">end</span>()) &#123;</span><br><span class="line">LASTVT[front].<span class="built_in">insert</span>(back);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">string <span class="built_in">sub1</span>(back, len - <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"><span class="function">string <span class="title">sub2</span><span class="params">(back, len - <span class="number">2</span>, <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">if</span> (Vt.<span class="built_in">find</span>(sub1) != Vt.<span class="built_in">end</span>()) &#123;<span class="comment">//U→…a</span></span><br><span class="line">LASTVT[front].<span class="built_in">insert</span>(sub1);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (Vt.<span class="built_in">find</span>(sub2) != Vt.<span class="built_in">end</span>()) &#123;<span class="comment">//U→…aV</span></span><br><span class="line">LASTVT[front].<span class="built_in">insert</span>(sub2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//循环</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it : LASTVT) &#123;<span class="comment">//F(U,b)为真的(U,b)对进STACK栈</span></span><br><span class="line">string left = it.first;</span><br><span class="line"><span class="keyword">auto</span> s = it.second;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> right : s) &#123;</span><br><span class="line">F.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(left, right));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (!F.<span class="built_in">empty</span>()) &#123; <span class="comment">//直至stack为空</span></span><br><span class="line"><span class="comment">//弹出栈顶元素,记: top = (V,b)</span></span><br><span class="line"><span class="keyword">auto</span> top = F.<span class="built_in">top</span>();</span><br><span class="line">F.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; (<span class="type">int</span>)grammar.<span class="built_in">size</span>(); ++ i) &#123;</span><br><span class="line">string left = grammar[i].first;</span><br><span class="line">string right = grammar[i].second;</span><br><span class="line"><span class="function">string <span class="title">one</span><span class="params">(right, <span class="number">0</span>, <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="comment">//对每一个形如 U →V…的规则</span></span><br><span class="line"><span class="comment">//若 F(U,b) 为假,变为真, 进STACK栈</span></span><br><span class="line"><span class="comment">//若 F(U,b) 为真,再循环</span></span><br><span class="line"><span class="keyword">if</span> (one == top.first) &#123;<span class="comment">//U →V…</span></span><br><span class="line"><span class="keyword">if</span> (LASTVT[left].<span class="built_in">find</span>(top.second) == LASTVT[left].<span class="built_in">end</span>()) &#123;<span class="comment">//F(U,b) 为假,变为真, 进STACK栈</span></span><br><span class="line">LASTVT[left].<span class="built_in">insert</span>(top.second);</span><br><span class="line">F.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(left, top.second));</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;&#125;<span class="comment">//F(U,b) 为真,再循环</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>void Print_LASTVT()</strong></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240115162054392.png" alt="image-20240115162054392"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Print_LASTVT</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it : LASTVT) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;LASTVT(&quot;</span> &lt;&lt; it.first &lt;&lt; <span class="string">&quot;)&quot;</span> &lt;&lt; <span class="string">&quot; : &quot;</span>;</span><br><span class="line"><span class="keyword">auto</span> s = it.second;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;&#123;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> i : s) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;、&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;&#125;&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>void Make_Table()</strong></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240115162127871.png" alt="image-20240115162127871"></p><p>遍历所有文法产生式规则：</p><ul><li><p>IF X<sub>i</sub> 和 X<sub>i+1</sub> 均∈V<sub>t</sub>， THEN 置 X<sub>i</sub> &#x3D; X<sub>i+1</sub></p></li><li><p>IF i &lt;&#x3D; n-2 且 X<sub>i</sub> 和 X<sub>i+2</sub> 均∈V<sub>t</sub>，但 X<sub>i+1</sub> ∈V<sub>n</sub>，THEN 置 X<sub>i</sub> &#x3D; X<sub>i+2</sub></p></li><li><p>IF X<sub>i</sub> ∈V<sub>t</sub>， 但 X<sub>i+1</sub> ∈ V<sub>n</sub> THEN:</p><ul><li>FOR b ∈ FIRSTVT(X<sub>i+1</sub>) Do 置 X<sub>i</sub> &lt; b</li></ul></li><li><p>IF X<sub>i</sub> ∈ V<sub>n</sub>， 但 X<sub>i+1</sub> ∈ V<sub>t</sub> THEN:</p><ul><li>FOR a ∈ LASTVT(X<sub>i</sub>) Do 置 a &gt; X<sub>i+1</sub></li></ul></li><li><p>拓广文法：G[E]: #E#</p><ul><li><em>#</em> &lt; a（a ∈ FIRSTVT(E)）</li><li>a &gt; *#*（a ∈ LASTVT(E)）</li></ul></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Make_Table</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; (<span class="type">int</span>)grammar.<span class="built_in">size</span>(); ++ i) &#123;<span class="comment">//遍历每一条语法规则</span></span><br><span class="line">string front = grammar[i].first;</span><br><span class="line">string back = grammar[i].second;</span><br><span class="line"><span class="type">int</span> len = (<span class="type">int</span>)back.<span class="built_in">length</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; ++ i) &#123;</span><br><span class="line"><span class="function">string <span class="title">sub1</span><span class="params">(back, i, <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="function">string <span class="title">sub2</span><span class="params">(back, i + <span class="number">1</span>, <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">if</span> (Vt.<span class="built_in">find</span>(sub1) != Vt.<span class="built_in">end</span>() &amp;&amp; Vt.<span class="built_in">find</span>(sub2) != Vt.<span class="built_in">end</span>()) &#123;<span class="comment">//…ab…</span></span><br><span class="line">Table.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(<span class="built_in">make_pair</span>(sub1, sub2), <span class="string">&#x27;=&#x27;</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (i &lt; len - <span class="number">2</span>) &#123;</span><br><span class="line"><span class="function">string <span class="title">sub3</span><span class="params">(back, i + <span class="number">2</span>, <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">if</span> (Vt.<span class="built_in">find</span>(sub1) != Vt.<span class="built_in">end</span>() &amp;&amp; Vn.<span class="built_in">find</span>(sub2) != Vn.<span class="built_in">end</span>() &amp;&amp; Vt.<span class="built_in">find</span>(sub3) != Vt.<span class="built_in">end</span>()) &#123;<span class="comment">//…aVb…</span></span><br><span class="line">Table.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(<span class="built_in">make_pair</span>(sub1, sub3), <span class="string">&#x27;=&#x27;</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (Vt.<span class="built_in">find</span>(sub1) != Vt.<span class="built_in">end</span>() &amp;&amp; Vn.<span class="built_in">find</span>(sub2) != Vn.<span class="built_in">end</span>()) &#123;<span class="comment">//…aU…</span></span><br><span class="line"><span class="keyword">auto</span> se = FIRSTVT[sub2];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it : se) &#123;</span><br><span class="line">Table.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(<span class="built_in">make_pair</span>(sub1, it), <span class="string">&#x27;&lt;&#x27;</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (Vn.<span class="built_in">find</span>(sub1) != Vn.<span class="built_in">end</span>() &amp;&amp; Vt.<span class="built_in">find</span>(sub2) != Vt.<span class="built_in">end</span>()) &#123;<span class="comment">//…aU…</span></span><br><span class="line"><span class="keyword">auto</span> se = LASTVT[sub1];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it : se) &#123;</span><br><span class="line">Table.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(<span class="built_in">make_pair</span>(it, sub2), <span class="string">&#x27;&gt;&#x27;</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//添加#,拓广文法</span></span><br><span class="line"><span class="comment">//G[E]: #E#</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it : FIRSTVT[<span class="string">&quot;E&quot;</span>]) &#123;</span><br><span class="line">Table.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(<span class="built_in">make_pair</span>(<span class="string">&quot;#&quot;</span>, it), <span class="string">&#x27;&lt;&#x27;</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it : LASTVT[<span class="string">&quot;E&quot;</span>]) &#123;</span><br><span class="line">Table.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(<span class="built_in">make_pair</span>(it, <span class="string">&quot;#&quot;</span>), <span class="string">&#x27;&gt;&#x27;</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>void Display_OPGTable()</strong></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240115192143525.png" alt="image-20240115192143525"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Display_OPGTable</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//规定算符优先矩阵表头终结符号顺序</span></span><br><span class="line">string order[<span class="number">8</span>] = &#123;<span class="string">&quot;(&quot;</span>, <span class="string">&quot;i&quot;</span>, <span class="string">&quot;+&quot;</span>, <span class="string">&quot;-&quot;</span>, <span class="string">&quot;*&quot;</span>, <span class="string">&quot;/&quot;</span>, <span class="string">&quot;)&quot;</span>, <span class="string">&quot;#&quot;</span>&#125;;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;算符优先矩阵如下:&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; ++ i) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot; | &quot;</span> &lt;&lt; order[i];</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;-&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; ++ i) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;---&quot;</span> &lt;&lt; <span class="string">&quot;-&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; ++ i) &#123;</span><br><span class="line">cout &lt;&lt; order[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">8</span>; ++ j) &#123;</span><br><span class="line"><span class="keyword">if</span> (Table.<span class="built_in">find</span>(<span class="built_in">make_pair</span>(order[i], order[j])) == Table.<span class="built_in">end</span>()) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot; | &quot;</span> &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="type">char</span> e = Table[<span class="built_in">make_pair</span>(order[i], order[j])];</span><br><span class="line">cout &lt;&lt; <span class="string">&quot; | &quot;</span> &lt;&lt; e;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;-&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; ++ i) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;---&quot;</span> &lt;&lt; <span class="string">&quot;-&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>void OPG()</strong></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240115192215853.png" alt="image-20240115192215853"></p><p>但是上述流程图中存在一个问题：未考虑运算符前后操作数的个数</p><p>因此，在归约、以及指向<strong>S[i]&#x3D;R</strong>时，加入对操作数个数的判断</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//接下来使用算符优先矩阵进行分析</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">OPG</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; pos; ++ i) &#123;</span><br><span class="line"><span class="function">string <span class="title">s</span><span class="params">(<span class="number">1</span>, token[i])</span></span>;</span><br><span class="line">token3[i + <span class="number">1</span>] = s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*for (int i = 0; i &lt; pos; ++i) &#123;</span></span><br><span class="line"><span class="comment">cout &lt;&lt; token3[i + 1];</span></span><br><span class="line"><span class="comment">&#125;cout &lt;&lt; endl;*/</span></span><br><span class="line">string S[MAX];</span><br><span class="line">string R, Q;</span><br><span class="line"><span class="type">int</span> i, j, k;</span><br><span class="line">S[<span class="number">1</span>] = <span class="string">&quot;#&quot;</span>;</span><br><span class="line">i = <span class="number">1</span>;</span><br><span class="line">k = <span class="number">0</span>;</span><br><span class="line">flag1:</span><br><span class="line">k = k + <span class="number">1</span>;</span><br><span class="line">R = token3[k];</span><br><span class="line">flag2:</span><br><span class="line"><span class="keyword">if</span> (Vt.<span class="built_in">find</span>(S[i]) != Vt.<span class="built_in">end</span>()) &#123;</span><br><span class="line">j = i;</span><br><span class="line">&#125; <span class="keyword">else</span> j = i - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (Table.<span class="built_in">find</span>(<span class="built_in">make_pair</span>(S[j], R)) == Table.<span class="built_in">end</span>()) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Failed!&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (Table[<span class="built_in">make_pair</span>(S[j], R)] == <span class="string">&#x27;&gt;&#x27;</span>) &#123;</span><br><span class="line">flag3:</span><br><span class="line">Q = S[j];</span><br><span class="line">j = j - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (Vt.<span class="built_in">find</span>(S[j]) == Vt.<span class="built_in">end</span>()) &#123;</span><br><span class="line">j = j - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (Table.<span class="built_in">find</span>(<span class="built_in">make_pair</span>(S[j], Q)) == Table.<span class="built_in">end</span>()) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Failed!&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (Table[<span class="built_in">make_pair</span>(S[j], Q)] == <span class="string">&#x27;&lt;&#x27;</span>) &#123;</span><br><span class="line">i = j + <span class="number">1</span>;</span><br><span class="line">S[i] = <span class="string">&quot;N&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (R == <span class="string">&quot;+&quot;</span> || R == <span class="string">&quot;-&quot;</span> || R == <span class="string">&quot;*&quot;</span> || R == <span class="string">&quot;/&quot;</span>) &#123;<span class="comment">//确保运算符前后存在两个操作数</span></span><br><span class="line"><span class="keyword">if</span> (token3[k + <span class="number">1</span>] != <span class="string">&quot;i&quot;</span> &amp;&amp; token3[k + <span class="number">1</span>] != <span class="string">&quot;(&quot;</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Error: The operands are missing!&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (i == <span class="number">2</span> &amp;&amp; R == <span class="string">&quot;#&quot;</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Success&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">goto</span> flag2;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">goto</span> flag3;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">i = i + <span class="number">1</span>;</span><br><span class="line">S[i] = R;</span><br><span class="line"><span class="keyword">if</span> (R == <span class="string">&quot;+&quot;</span> || R == <span class="string">&quot;-&quot;</span> || R == <span class="string">&quot;*&quot;</span> || R == <span class="string">&quot;/&quot;</span>) &#123;<span class="comment">//确保运算符前后存在两个操作数</span></span><br><span class="line"><span class="keyword">if</span> ((S[i - <span class="number">1</span>] != <span class="string">&quot;N&quot;</span> &amp;&amp; S[i - <span class="number">1</span>] != <span class="string">&quot;)&quot;</span>) || (token3[k + <span class="number">1</span>] != <span class="string">&quot;i&quot;</span> &amp;&amp; token3[k + <span class="number">1</span>] != <span class="string">&quot;(&quot;</span>)) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Error: The operands are missing!&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">goto</span> flag1;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>void extract()</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">extract</span><span class="params">()</span> </span>&#123;</span><br><span class="line">FILE *fp = <span class="built_in">fopen</span>(Path, <span class="string">&quot;r&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (fp == <span class="literal">NULL</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;The file can&#x27;t be opened!&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> ch;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(fp);</span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">feof</span>(fp)) &#123;</span><br><span class="line"><span class="keyword">if</span> (ch == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line"><span class="type">char</span> left = <span class="built_in">fgetc</span>(fp);</span><br><span class="line"><span class="type">char</span> right = <span class="built_in">fgetc</span>(fp);</span><br><span class="line">string tmp = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">while</span> (right != left) &#123;</span><br><span class="line">tmp += right;</span><br><span class="line">right = <span class="built_in">fgetc</span>(fp);</span><br><span class="line">&#125;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(fp);</span><br><span class="line"><span class="type">char</span> label = <span class="built_in">fgetc</span>(fp);</span><br><span class="line"><span class="keyword">if</span> (label == <span class="string">&#x27;2&#x27;</span> || label == <span class="string">&#x27;3&#x27;</span>) &#123;</span><br><span class="line">token[pos] = <span class="string">&#x27;i&#x27;</span>;</span><br><span class="line">token2[pos++] = tmp;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (label == <span class="string">&#x27;4&#x27;</span> || label == <span class="string">&#x27;5&#x27;</span>) &#123;</span><br><span class="line">token[pos] = tmp[<span class="number">0</span>];</span><br><span class="line">token2[pos++] = tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">&#x27;#&#x27;</span>) &#123;</span><br><span class="line">token[pos] = <span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">token2[pos++] = <span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(fp);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>int main()</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">Solve_FIRSTVT</span>();<span class="comment">//求解FIRSTVT集</span></span><br><span class="line"><span class="built_in">Solve_LASTVT</span>();<span class="comment">//求解LASTVT集</span></span><br><span class="line"><span class="built_in">Print_FIRSTVT</span>();<span class="comment">//打印FIRSTVT集</span></span><br><span class="line"><span class="built_in">Print_LASTVT</span>();<span class="comment">//打印LASTVT集</span></span><br><span class="line"><span class="built_in">Make_Table</span>();<span class="comment">//生成算符优先矩阵</span></span><br><span class="line"><span class="built_in">Display_OPGTable</span>();<span class="comment">//打印算符优先矩阵</span></span><br><span class="line"><span class="built_in">extract</span>();<span class="comment">//接收输入,并进行处理</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;算术表达式为: &quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; pos; ++ i) &#123;</span><br><span class="line">cout &lt;&lt; token2[i];</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;等价于: &quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; pos; ++ i) &#123;</span><br><span class="line">cout &lt;&lt; token[i];</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"><span class="built_in">OPG</span>();<span class="comment">//进行算符优先分析</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实验测试-3"><a href="#实验测试-3" class="headerlink" title="实验测试"></a>实验测试</h3><h4 id="测试案例一-2"><a href="#测试案例一-2" class="headerlink" title="测试案例一"></a>测试案例一</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240115193305659.png" alt="image-20240115193305659"></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240115193314452.png" alt="image-20240115193314452"></p><h4 id="测试案例二-2"><a href="#测试案例二-2" class="headerlink" title="测试案例二"></a>测试案例二</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240115193320950.png" alt="image-20240115193320950"></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240115193326381.png" alt="image-20240115193326381"></p><h4 id="测试案例三-2"><a href="#测试案例三-2" class="headerlink" title="测试案例三"></a>测试案例三</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240115193332092.png" alt="image-20240115193332092"></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240115193343864.png" alt="image-20240115193343864"></p><h4 id="测试案例四-2"><a href="#测试案例四-2" class="headerlink" title="测试案例四"></a>测试案例四</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240115193349155.png" alt="image-20240115193349155"></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240115193353933.png" alt="image-20240115193353933"></p><h4 id="测试案例五-2"><a href="#测试案例五-2" class="headerlink" title="测试案例五"></a>测试案例五</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240115193359435.png" alt="image-20240115193359435"></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240115193404797.png" alt="image-20240115193404797"></p><h4 id="测试案例六-2"><a href="#测试案例六-2" class="headerlink" title="测试案例六"></a>测试案例六</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240115193410552.png" alt="image-20240115193410552"></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240115193417456.png" alt="image-20240115193417456"></p><h4 id="测试案例七"><a href="#测试案例七" class="headerlink" title="测试案例七"></a>测试案例七</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240115193424069.png" alt="image-20240115193424069"></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240115193428744.png" alt="image-20240115193428744"></p><h4 id="测试案例八"><a href="#测试案例八" class="headerlink" title="测试案例八"></a>测试案例八</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240115193434512.png" alt="image-20240115193434512"></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240115193439415.png" alt="image-20240115193439415"></p><h4 id="测试案例九"><a href="#测试案例九" class="headerlink" title="测试案例九"></a>测试案例九</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240115193444625.png" alt="image-20240115193444625"></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240115193450531.png" alt="image-20240115193450531"></p><h3 id="完整代码-3"><a href="#完整代码-3" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX 1010</span></span><br><span class="line"><span class="type">char</span> token[MAX];<span class="comment">//存有算术表达式等价形式</span></span><br><span class="line">string token2[MAX];<span class="comment">//存有最初的算术表达式</span></span><br><span class="line">string token3[MAX];<span class="comment">//实际为:token[i + 1] = token[i],这样是为了配对可见上的分析程序,即下标从一开始</span></span><br><span class="line"><span class="type">int</span> pos = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">unordered_set&lt;string&gt; Vn = &#123;<span class="string">&quot;E&quot;</span>, <span class="string">&quot;T&quot;</span>, <span class="string">&quot;F&quot;</span>&#125;;</span><br><span class="line">unordered_set&lt;string&gt; Vt = &#123;<span class="string">&quot;(&quot;</span>, <span class="string">&quot;)&quot;</span>, <span class="string">&quot;i&quot;</span>, <span class="string">&quot;+&quot;</span>, <span class="string">&quot;-&quot;</span>, <span class="string">&quot;*&quot;</span>, <span class="string">&quot;/&quot;</span>, <span class="string">&quot;#&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;string, string&gt; PSS;</span><br><span class="line">vector&lt;PSS&gt; grammar = &#123;<span class="built_in">make_pair</span>(<span class="string">&quot;E&quot;</span>, <span class="string">&quot;E+T&quot;</span>),</span><br><span class="line">                       <span class="built_in">make_pair</span>(<span class="string">&quot;E&quot;</span>, <span class="string">&quot;E-T&quot;</span>),</span><br><span class="line">                       <span class="built_in">make_pair</span>(<span class="string">&quot;E&quot;</span>, <span class="string">&quot;T&quot;</span>),</span><br><span class="line">                       <span class="built_in">make_pair</span>(<span class="string">&quot;T&quot;</span>, <span class="string">&quot;T*F&quot;</span>),</span><br><span class="line">                       <span class="built_in">make_pair</span>(<span class="string">&quot;T&quot;</span>, <span class="string">&quot;T/F&quot;</span>),</span><br><span class="line">                       <span class="built_in">make_pair</span>(<span class="string">&quot;T&quot;</span>, <span class="string">&quot;F&quot;</span>),</span><br><span class="line">                       <span class="built_in">make_pair</span>(<span class="string">&quot;F&quot;</span>, <span class="string">&quot;(E)&quot;</span>),</span><br><span class="line">                       <span class="built_in">make_pair</span>(<span class="string">&quot;F&quot;</span>, <span class="string">&quot;i&quot;</span>)</span><br><span class="line">                      &#125;;</span><br><span class="line"></span><br><span class="line">stack&lt;PSS&gt; F;</span><br><span class="line"></span><br><span class="line">unordered_map&lt;string, unordered_set&lt;string&gt;&gt; FIRSTVT;</span><br><span class="line">unordered_map&lt;string, unordered_set&lt;string&gt;&gt; LASTVT;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Solve_FIRSTVT</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; (<span class="type">int</span>)grammar.<span class="built_in">size</span>(); ++ i) &#123;</span><br><span class="line">string front = grammar[i].first;</span><br><span class="line">string back = grammar[i].second;</span><br><span class="line"><span class="comment">//若有规则 U→b…, 或 U→Vb…,则 b ∈ FIRSTVT(U)</span></span><br><span class="line"><span class="type">int</span> len = back.<span class="built_in">length</span>();</span><br><span class="line"><span class="keyword">if</span> (len == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (Vt.<span class="built_in">find</span>(back) != Vt.<span class="built_in">end</span>()) &#123;</span><br><span class="line">FIRSTVT[front].<span class="built_in">insert</span>(back);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">string <span class="built_in">sub1</span>(back, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line"><span class="function">string <span class="title">sub2</span><span class="params">(back, <span class="number">1</span>, <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">if</span> (Vt.<span class="built_in">find</span>(sub1) != Vt.<span class="built_in">end</span>()) &#123;<span class="comment">//U→b…</span></span><br><span class="line">FIRSTVT[front].<span class="built_in">insert</span>(sub1);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (Vt.<span class="built_in">find</span>(sub2) != Vt.<span class="built_in">end</span>()) &#123;<span class="comment">//U→Vb…</span></span><br><span class="line">FIRSTVT[front].<span class="built_in">insert</span>(sub2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//循环</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it : FIRSTVT) &#123;<span class="comment">//F(U,b)为真的(U,b)对进STACK栈</span></span><br><span class="line">string left = it.first;</span><br><span class="line"><span class="keyword">auto</span> s = it.second;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> right : s) &#123;</span><br><span class="line">F.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(left, right));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (!F.<span class="built_in">empty</span>()) &#123; <span class="comment">//直至stack为空</span></span><br><span class="line"><span class="comment">//弹出栈顶元素,记: top = (V,b)</span></span><br><span class="line"><span class="keyword">auto</span> top = F.<span class="built_in">top</span>();</span><br><span class="line">F.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; (<span class="type">int</span>)grammar.<span class="built_in">size</span>(); ++ i) &#123;</span><br><span class="line">string left = grammar[i].first;</span><br><span class="line">string right = grammar[i].second;</span><br><span class="line"><span class="function">string <span class="title">one</span><span class="params">(right, <span class="number">0</span>, <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="comment">//对每一个形如 U →V…的规则</span></span><br><span class="line"><span class="comment">//若 F(U,b) 为假,变为真, 进STACK栈</span></span><br><span class="line"><span class="comment">//若 F(U,b) 为真,再循环</span></span><br><span class="line"><span class="keyword">if</span> (one == top.first) &#123;<span class="comment">//U →V…</span></span><br><span class="line"><span class="comment">//auto se = FIRSTVT[left];</span></span><br><span class="line"><span class="keyword">if</span> (FIRSTVT[left].<span class="built_in">find</span>(top.second) == FIRSTVT[left].<span class="built_in">end</span>()) &#123;<span class="comment">//F(U,b) 为假,变为真, 进STACK栈</span></span><br><span class="line">FIRSTVT[left].<span class="built_in">insert</span>(top.second);</span><br><span class="line">F.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(left, top.second));</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;&#125;<span class="comment">//F(U,b) 为真,再循环</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="built_in">Print_FIRSTVT</span>() &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it : FIRSTVT) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;FIRSTVT(&quot;</span> &lt;&lt; it.first &lt;&lt; <span class="string">&quot;)&quot;</span> &lt;&lt; <span class="string">&quot; : &quot;</span>;</span><br><span class="line"><span class="keyword">auto</span> s = it.second;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;&#123;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> i : s) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;、&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;&#125;&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Solve_LASTVT</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; (<span class="type">int</span>)grammar.<span class="built_in">size</span>(); ++ i) &#123;</span><br><span class="line">string front = grammar[i].first;</span><br><span class="line">string back = grammar[i].second;</span><br><span class="line"><span class="comment">//若有规则 U→…a, 或 U→…aV,则 a ∈ LASTVT(U)</span></span><br><span class="line"><span class="type">int</span> len = back.<span class="built_in">length</span>();</span><br><span class="line"><span class="keyword">if</span> (len == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (Vt.<span class="built_in">find</span>(back) != Vt.<span class="built_in">end</span>()) &#123;</span><br><span class="line">LASTVT[front].<span class="built_in">insert</span>(back);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">string <span class="built_in">sub1</span>(back, len - <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"><span class="function">string <span class="title">sub2</span><span class="params">(back, len - <span class="number">2</span>, <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">if</span> (Vt.<span class="built_in">find</span>(sub1) != Vt.<span class="built_in">end</span>()) &#123;<span class="comment">//U→…a</span></span><br><span class="line">LASTVT[front].<span class="built_in">insert</span>(sub1);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (Vt.<span class="built_in">find</span>(sub2) != Vt.<span class="built_in">end</span>()) &#123;<span class="comment">//U→…aV</span></span><br><span class="line">LASTVT[front].<span class="built_in">insert</span>(sub2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//循环</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it : LASTVT) &#123;<span class="comment">//F(U,b)为真的(U,b)对进STACK栈</span></span><br><span class="line">string left = it.first;</span><br><span class="line"><span class="keyword">auto</span> s = it.second;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> right : s) &#123;</span><br><span class="line">F.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(left, right));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (!F.<span class="built_in">empty</span>()) &#123; <span class="comment">//直至stack为空</span></span><br><span class="line"><span class="comment">//弹出栈顶元素,记: top = (V,b)</span></span><br><span class="line"><span class="keyword">auto</span> top = F.<span class="built_in">top</span>();</span><br><span class="line">F.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; (<span class="type">int</span>)grammar.<span class="built_in">size</span>(); ++ i) &#123;</span><br><span class="line">string left = grammar[i].first;</span><br><span class="line">string right = grammar[i].second;</span><br><span class="line"><span class="function">string <span class="title">one</span><span class="params">(right, <span class="number">0</span>, <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="comment">//对每一个形如 U →V…的规则</span></span><br><span class="line"><span class="comment">//若 F(U,b) 为假,变为真, 进STACK栈</span></span><br><span class="line"><span class="comment">//若 F(U,b) 为真,再循环</span></span><br><span class="line"><span class="keyword">if</span> (one == top.first) &#123;<span class="comment">//U →V…</span></span><br><span class="line"><span class="keyword">if</span> (LASTVT[left].<span class="built_in">find</span>(top.second) == LASTVT[left].<span class="built_in">end</span>()) &#123;<span class="comment">//F(U,b) 为假,变为真, 进STACK栈</span></span><br><span class="line">LASTVT[left].<span class="built_in">insert</span>(top.second);</span><br><span class="line">F.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(left, top.second));</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;&#125;<span class="comment">//F(U,b) 为真,再循环</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="built_in">Print_LASTVT</span>() &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it : LASTVT) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;LASTVT(&quot;</span> &lt;&lt; it.first &lt;&lt; <span class="string">&quot;)&quot;</span> &lt;&lt; <span class="string">&quot; : &quot;</span>;</span><br><span class="line"><span class="keyword">auto</span> s = it.second;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;&#123;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> i : s) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;、&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;&#125;&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造算符优先矩阵</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">hash_pair</span> &#123;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T1</span>, <span class="keyword">class</span> <span class="title class_">T2</span>&gt;</span><br><span class="line"><span class="function"><span class="type">size_t</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">const</span> pair&lt;T1, T2&gt;&amp; p)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line"><span class="keyword">auto</span> hash1 = hash&lt;T1&gt; &#123;&#125;(p.first);</span><br><span class="line"><span class="keyword">auto</span> hash2 = hash&lt;T2&gt; &#123;&#125;(p.second);</span><br><span class="line"><span class="keyword">return</span> hash1 ^ hash2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">unordered_map&lt;PSS, <span class="type">char</span>, hash_pair&gt; Table;</span><br><span class="line"><span class="comment">// &lt; 表示低于= 表示等于&gt; 表示高于</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Make_Table</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; (<span class="type">int</span>)grammar.<span class="built_in">size</span>(); ++ i) &#123;<span class="comment">//遍历每一条语法规则</span></span><br><span class="line">string front = grammar[i].first;</span><br><span class="line">string back = grammar[i].second;</span><br><span class="line"><span class="type">int</span> len = (<span class="type">int</span>)back.<span class="built_in">length</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; ++ i) &#123;</span><br><span class="line"><span class="function">string <span class="title">sub1</span><span class="params">(back, i, <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="function">string <span class="title">sub2</span><span class="params">(back, i + <span class="number">1</span>, <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">if</span> (Vt.<span class="built_in">find</span>(sub1) != Vt.<span class="built_in">end</span>() &amp;&amp; Vt.<span class="built_in">find</span>(sub2) != Vt.<span class="built_in">end</span>()) &#123;<span class="comment">//…ab…</span></span><br><span class="line">Table.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(<span class="built_in">make_pair</span>(sub1, sub2), <span class="string">&#x27;=&#x27;</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (i &lt; len - <span class="number">2</span>) &#123;</span><br><span class="line"><span class="function">string <span class="title">sub3</span><span class="params">(back, i + <span class="number">2</span>, <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">if</span> (Vt.<span class="built_in">find</span>(sub1) != Vt.<span class="built_in">end</span>() &amp;&amp; Vn.<span class="built_in">find</span>(sub2) != Vn.<span class="built_in">end</span>() &amp;&amp; Vt.<span class="built_in">find</span>(sub3) != Vt.<span class="built_in">end</span>()) &#123;<span class="comment">//…aVb…</span></span><br><span class="line">Table.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(<span class="built_in">make_pair</span>(sub1, sub3), <span class="string">&#x27;=&#x27;</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (Vt.<span class="built_in">find</span>(sub1) != Vt.<span class="built_in">end</span>() &amp;&amp; Vn.<span class="built_in">find</span>(sub2) != Vn.<span class="built_in">end</span>()) &#123;<span class="comment">//…aU…</span></span><br><span class="line"><span class="keyword">auto</span> se = FIRSTVT[sub2];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it : se) &#123;</span><br><span class="line">Table.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(<span class="built_in">make_pair</span>(sub1, it), <span class="string">&#x27;&lt;&#x27;</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (Vn.<span class="built_in">find</span>(sub1) != Vn.<span class="built_in">end</span>() &amp;&amp; Vt.<span class="built_in">find</span>(sub2) != Vt.<span class="built_in">end</span>()) &#123;<span class="comment">//…aU…</span></span><br><span class="line"><span class="keyword">auto</span> se = LASTVT[sub1];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it : se) &#123;</span><br><span class="line">Table.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(<span class="built_in">make_pair</span>(it, sub2), <span class="string">&#x27;&gt;&#x27;</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//添加#</span></span><br><span class="line"><span class="comment">//G[E]: #E#</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it : FIRSTVT[<span class="string">&quot;E&quot;</span>]) &#123;</span><br><span class="line">Table.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(<span class="built_in">make_pair</span>(<span class="string">&quot;#&quot;</span>, it), <span class="string">&#x27;&lt;&#x27;</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it : LASTVT[<span class="string">&quot;E&quot;</span>]) &#123;</span><br><span class="line">Table.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(<span class="built_in">make_pair</span>(it, <span class="string">&quot;#&quot;</span>), <span class="string">&#x27;&gt;&#x27;</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Display_OPGTable</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//规定算符优先矩阵表头终结符号顺序</span></span><br><span class="line">string order[<span class="number">8</span>] = &#123;<span class="string">&quot;(&quot;</span>, <span class="string">&quot;i&quot;</span>, <span class="string">&quot;+&quot;</span>, <span class="string">&quot;-&quot;</span>, <span class="string">&quot;*&quot;</span>, <span class="string">&quot;/&quot;</span>, <span class="string">&quot;)&quot;</span>, <span class="string">&quot;#&quot;</span>&#125;;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;算符优先矩阵如下:&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; ++ i) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot; | &quot;</span> &lt;&lt; order[i];</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;-&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; ++ i) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;---&quot;</span> &lt;&lt; <span class="string">&quot;-&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; ++ i) &#123;</span><br><span class="line">cout &lt;&lt; order[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">8</span>; ++ j) &#123;</span><br><span class="line"><span class="keyword">if</span> (Table.<span class="built_in">find</span>(<span class="built_in">make_pair</span>(order[i], order[j])) == Table.<span class="built_in">end</span>()) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot; | &quot;</span> &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="type">char</span> e = Table[<span class="built_in">make_pair</span>(order[i], order[j])];</span><br><span class="line">cout &lt;&lt; <span class="string">&quot; | &quot;</span> &lt;&lt; e;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;-&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; ++ i) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;---&quot;</span> &lt;&lt; <span class="string">&quot;-&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//接下来使用算符优先矩阵进行分析</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">OPG</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; pos; ++ i) &#123;</span><br><span class="line"><span class="function">string <span class="title">s</span><span class="params">(<span class="number">1</span>, token[i])</span></span>;</span><br><span class="line">token3[i + <span class="number">1</span>] = s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*for (int i = 0; i &lt; pos; ++i) &#123;</span></span><br><span class="line"><span class="comment">cout &lt;&lt; token3[i + 1];</span></span><br><span class="line"><span class="comment">&#125;cout &lt;&lt; endl;*/</span></span><br><span class="line">string S[MAX];</span><br><span class="line">string R, Q;</span><br><span class="line"><span class="type">int</span> i, j, k;</span><br><span class="line">S[<span class="number">1</span>] = <span class="string">&quot;#&quot;</span>;</span><br><span class="line">i = <span class="number">1</span>;</span><br><span class="line">k = <span class="number">0</span>;</span><br><span class="line">flag1:</span><br><span class="line">k = k + <span class="number">1</span>;</span><br><span class="line">R = token3[k];</span><br><span class="line">flag2:</span><br><span class="line"><span class="keyword">if</span> (Vt.<span class="built_in">find</span>(S[i]) != Vt.<span class="built_in">end</span>()) &#123;</span><br><span class="line">j = i;</span><br><span class="line">&#125; <span class="keyword">else</span> j = i - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (Table.<span class="built_in">find</span>(<span class="built_in">make_pair</span>(S[j], R)) == Table.<span class="built_in">end</span>()) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Failed!&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (Table[<span class="built_in">make_pair</span>(S[j], R)] == <span class="string">&#x27;&gt;&#x27;</span>) &#123;</span><br><span class="line">flag3:</span><br><span class="line">Q = S[j];</span><br><span class="line">j = j - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (Vt.<span class="built_in">find</span>(S[j]) == Vt.<span class="built_in">end</span>()) &#123;</span><br><span class="line">j = j - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (Table.<span class="built_in">find</span>(<span class="built_in">make_pair</span>(S[j], Q)) == Table.<span class="built_in">end</span>()) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Failed!&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (Table[<span class="built_in">make_pair</span>(S[j], Q)] == <span class="string">&#x27;&lt;&#x27;</span>) &#123;</span><br><span class="line">i = j + <span class="number">1</span>;</span><br><span class="line">S[i] = <span class="string">&quot;N&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (R == <span class="string">&quot;+&quot;</span> || R == <span class="string">&quot;-&quot;</span> || R == <span class="string">&quot;*&quot;</span> || R == <span class="string">&quot;/&quot;</span>) &#123;<span class="comment">//确保运算符前后存在两个操作数</span></span><br><span class="line"><span class="keyword">if</span> (token3[k + <span class="number">1</span>] != <span class="string">&quot;i&quot;</span> &amp;&amp; token3[k + <span class="number">1</span>] != <span class="string">&quot;(&quot;</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Error: The operands are missing!&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (i == <span class="number">2</span> &amp;&amp; R == <span class="string">&quot;#&quot;</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Success&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">goto</span> flag2;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">goto</span> flag3;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">i = i + <span class="number">1</span>;</span><br><span class="line">S[i] = R;</span><br><span class="line"><span class="keyword">if</span> (R == <span class="string">&quot;+&quot;</span> || R == <span class="string">&quot;-&quot;</span> || R == <span class="string">&quot;*&quot;</span> || R == <span class="string">&quot;/&quot;</span>) &#123;<span class="comment">//确保运算符前后存在两个操作数</span></span><br><span class="line"><span class="keyword">if</span> ((S[i - <span class="number">1</span>] != <span class="string">&quot;N&quot;</span> &amp;&amp; S[i - <span class="number">1</span>] != <span class="string">&quot;)&quot;</span>) || (token3[k + <span class="number">1</span>] != <span class="string">&quot;i&quot;</span> &amp;&amp; token3[k + <span class="number">1</span>] != <span class="string">&quot;(&quot;</span>)) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Error: The operands are missing!&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">goto</span> flag1;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">extract</span><span class="params">()</span> </span>&#123;</span><br><span class="line">FILE *fp = <span class="built_in">fopen</span>(<span class="string">&quot;D:\\A-Project\\Compiler\\OPG\\Test_data\\9.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (fp == <span class="literal">NULL</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;The file can&#x27;t be opened!&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> ch;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(fp);</span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">feof</span>(fp)) &#123;</span><br><span class="line"><span class="keyword">if</span> (ch == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line"><span class="type">char</span> left = <span class="built_in">fgetc</span>(fp);</span><br><span class="line"><span class="type">char</span> right = <span class="built_in">fgetc</span>(fp);</span><br><span class="line">string tmp = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">while</span> (right != left) &#123;</span><br><span class="line">tmp += right;</span><br><span class="line">right = <span class="built_in">fgetc</span>(fp);</span><br><span class="line">&#125;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(fp);</span><br><span class="line"><span class="type">char</span> label = <span class="built_in">fgetc</span>(fp);</span><br><span class="line"><span class="keyword">if</span> (label == <span class="string">&#x27;2&#x27;</span> || label == <span class="string">&#x27;3&#x27;</span>) &#123;</span><br><span class="line">token[pos] = <span class="string">&#x27;i&#x27;</span>;</span><br><span class="line">token2[pos++] = tmp;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (label == <span class="string">&#x27;4&#x27;</span> || label == <span class="string">&#x27;5&#x27;</span>) &#123;</span><br><span class="line">token[pos] = tmp[<span class="number">0</span>];</span><br><span class="line">token2[pos++] = tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">&#x27;#&#x27;</span>) &#123;</span><br><span class="line">token[pos] = <span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">token2[pos++] = <span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(fp);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">Solve_FIRSTVT</span>();<span class="comment">//求解FIRSTVT集</span></span><br><span class="line"><span class="built_in">Solve_LASTVT</span>();<span class="comment">//求解LASTVT集</span></span><br><span class="line"><span class="built_in">Print_FIRSTVT</span>();<span class="comment">//打印FIRSTVT集</span></span><br><span class="line"><span class="built_in">Print_LASTVT</span>();<span class="comment">//打印LASTVT集</span></span><br><span class="line"><span class="built_in">Make_Table</span>();<span class="comment">//生成算符优先矩阵</span></span><br><span class="line"><span class="built_in">Display_OPGTable</span>();<span class="comment">//打印算符优先矩阵</span></span><br><span class="line"><span class="built_in">extract</span>();<span class="comment">//接收输入,并进行处理</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;算术表达式为: &quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; pos; ++ i) &#123;</span><br><span class="line">cout &lt;&lt; token2[i];</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;等价于: &quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; pos; ++ i) &#123;</span><br><span class="line">cout &lt;&lt; token[i];</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"><span class="built_in">OPG</span>();<span class="comment">//进行算符优先分析</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="基于SLR-1-分析的语义分析及中间代码生成程序设计原理与实现-编译器前端"><a href="#基于SLR-1-分析的语义分析及中间代码生成程序设计原理与实现-编译器前端" class="headerlink" title="基于SLR(1)分析的语义分析及中间代码生成程序设计原理与实现(编译器前端)"></a>基于SLR(1)分析的语义分析及中间代码生成程序设计原理与实现(编译器前端)</h2><h3 id="实验内容-4"><a href="#实验内容-4" class="headerlink" title="实验内容"></a>实验内容</h3><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240115193720263.png" alt="image-20240115193720263"></p><h3 id="实验设计-4"><a href="#实验设计-4" class="headerlink" title="实验设计"></a>实验设计</h3>]]></content>
      
      
      <categories>
          
          <category> 计算机专业课 </category>
          
          <category> 编译原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 词法分析 </tag>
            
            <tag> 递归下降语法分析 </tag>
            
            <tag> LL(1)语法分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PDF汇总</title>
      <link href="/PDF/PDF/"/>
      <url>/PDF/PDF/</url>
      
        <content type="html"><![CDATA[<h1 id="Pytorch"><a href="#Pytorch" class="headerlink" title="Pytorch"></a>Pytorch</h1><embed src="./PyTorch.pdf" width="100%" height="750" type="application/pdf"><h1 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h1><h2 id="Elementary-tips"><a href="#Elementary-tips" class="headerlink" title="Elementary tips"></a>Elementary tips</h2><embed src="./Java/Elementary tips.pdf" width="100%" height="750" type="application/pdf"><h2 id="Thinking-in-Objects"><a href="#Thinking-in-Objects" class="headerlink" title="Thinking in Objects"></a>Thinking in Objects</h2><embed src="./Java/Thinking in Objects.pdf" width="100%" height="750" type="application/pdf"><h2 id="Inheritance-and-Polymorphism"><a href="#Inheritance-and-Polymorphism" class="headerlink" title="Inheritance and Polymorphism"></a>Inheritance and Polymorphism</h2><embed src="./Java/Inheritance and Polymorphism.pdf" width="100%" height="750" type="application/pdf"><h2 id="Exception-Handling-and-Text-IO"><a href="#Exception-Handling-and-Text-IO" class="headerlink" title="Exception Handling and Text IO"></a>Exception Handling and Text IO</h2><embed src="./Java/Exception Handling and Text IO.pdf" width="100%" height="750" type="application/pdf"><h2 id="Abstract-Classes-and-Interfaces"><a href="#Abstract-Classes-and-Interfaces" class="headerlink" title="Abstract Classes and Interfaces"></a>Abstract Classes and Interfaces</h2><embed src="./Java/Abstract Classes and Interfaces.pdf" width="100%" height="750" type="application/pdf"><h2 id="Binary-IO"><a href="#Binary-IO" class="headerlink" title="Binary IO"></a>Binary IO</h2><embed src="./Java/Binary IO.pdf" width="100%" height="750" type="application/pdf"><h2 id="Lists-Stacks-Queues-and-Priority-Queues"><a href="#Lists-Stacks-Queues-and-Priority-Queues" class="headerlink" title="Lists, Stacks, Queues, and Priority Queues"></a>Lists, Stacks, Queues, and Priority Queues</h2><embed src="./Java/Lists, Stacks, Queues, and Priority Queues.pdf" width="100%" height="750" type="application/pdf"><h2 id="Sets-and-Maps"><a href="#Sets-and-Maps" class="headerlink" title="Sets and Maps"></a>Sets and Maps</h2><embed src="./Java/Sets and Maps.pdf" width="100%" height="750" type="application/pdf">]]></content>
      
      
      <categories>
          
          <category> PDF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PDF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PyTorch</title>
      <link href="/Deep-Learning/PyTorch/"/>
      <url>/Deep-Learning/PyTorch/</url>
      
        <content type="html"><![CDATA[<h1 id="PyTorch"><a href="#PyTorch" class="headerlink" title="PyTorch"></a>PyTorch</h1><h2 id="PyTorch安装与环境配置"><a href="#PyTorch安装与环境配置" class="headerlink" title="PyTorch安装与环境配置"></a>PyTorch安装与环境配置</h2><p>详细过程见：<code>PDF.md</code></p><h2 id="基本数据处理与计算操作"><a href="#基本数据处理与计算操作" class="headerlink" title="基本数据处理与计算操作"></a>基本数据处理与计算操作</h2><p>​在深度学习中，我们通常会频繁地对数据进行操作。而在Pytorch中，torch.Tensor是存储和变换数据的主要工具。Tensor和Numpy的多维数组非常类似。</p><p>​“Tensor”，译作张量，可以看作是一个多维数组。<code>标量</code>可以看作0维张量，<code>向量</code>可以看作1维张量，<code>矩阵</code>可以看作2维张量。</p><h3 id="创建Tensor"><a href="#创建Tensor" class="headerlink" title="创建Tensor"></a>创建Tensor</h3><h4 id="导入PyTorch"><a href="#导入PyTorch" class="headerlink" title="导入PyTorch"></a>导入PyTorch</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">In [1]：  import torch</span><br></pre></td></tr></table></figure><h4 id="创建一个2-3的未初始化的Tensor"><a href="#创建一个2-3的未初始化的Tensor" class="headerlink" title="创建一个2*3的未初始化的Tensor"></a>创建一个2*3的未初始化的Tensor</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">In [2]：  x=torch.empty(2,3)</span><br></pre></td></tr></table></figure><h4 id="创建一个2-3的随机初始化的Tensor"><a href="#创建一个2-3的随机初始化的Tensor" class="headerlink" title="创建一个2*3的随机初始化的Tensor"></a>创建一个2*3的随机初始化的Tensor</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">In [3]：  x=torch.rand(2,3)</span><br></pre></td></tr></table></figure><h4 id="创建一个2x3的long型全0的Tensor"><a href="#创建一个2x3的long型全0的Tensor" class="headerlink" title="创建一个2x3的long型全0的Tensor"></a>创建一个2x3的long型全0的Tensor</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">In [4]：  x=torch.zeros(2,3,dtype=torch.long)</span><br></pre></td></tr></table></figure><h4 id="直接根据数据创建"><a href="#直接根据数据创建" class="headerlink" title="直接根据数据创建"></a>直接根据数据创建</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">In [5]：  x=torch.tensor([[5.5,3],[2.2,5]])</span><br></pre></td></tr></table></figure><p><code>以上创建的数据，直接 print(x) 即可查看对比</code></p><h4 id="通过现有的Tensor来创建"><a href="#通过现有的Tensor来创建" class="headerlink" title="通过现有的Tensor来创建"></a>通过现有的Tensor来创建</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 返回的tensor默认具有相同的torch.dtype和torch.device</span><br><span class="line">In [7]： x=x.new_ones(2,3)</span><br><span class="line">         print(x)</span><br><span class="line">      </span><br><span class="line"># 指定新的数据类型</span><br><span class="line">         x=torch.randn_like(x,dtype=torch.float)</span><br><span class="line">         print(x)</span><br></pre></td></tr></table></figure><h4 id="通过shape或者size-来获取Tensor的形状"><a href="#通过shape或者size-来获取Tensor的形状" class="headerlink" title="通过shape或者size()来获取Tensor的形状"></a>通过shape或者size()来获取Tensor的形状</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 返回的torch.Size其实就是一个tuple, 支持所有tuple的操作</span><br><span class="line">In [6]： print(x.size())</span><br><span class="line">         print(x.shape)</span><br></pre></td></tr></table></figure><h4 id="其他创建Tensor的函数"><a href="#其他创建Tensor的函数" class="headerlink" title="其他创建Tensor的函数"></a>其他创建Tensor的函数</h4><p>查阅官方API： <a href="https://pytorch.org/docs/stable/index.html">https://pytorch.org/docs/stable/index.html</a></p><h3 id="Tensor的相关操作"><a href="#Tensor的相关操作" class="headerlink" title="Tensor的相关操作"></a>Tensor的相关操作</h3><h4 id="算术操作"><a href="#算术操作" class="headerlink" title="算术操作"></a>算术操作</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [1]： # 加法形式一</span><br><span class="line">         x = torch.rand(2, 3)</span><br><span class="line">         y = torch.rand(2, 3)</span><br><span class="line">         print(x + y)</span><br><span class="line">         # 加法形式二</span><br><span class="line">         print(torch.add(x, y))</span><br><span class="line">         # 加法形式三，inplace（原地操作）</span><br><span class="line">         y.add_(x)</span><br><span class="line">         print(y)</span><br><span class="line">         </span><br><span class="line">         # PyTorch操作的inplace版本都有后缀“_” , 例如x.copy_(y), x.t_()</span><br></pre></td></tr></table></figure><h4 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h4><p>我们还可以使用类似NumPy的索引操作来访问Tensor的一部分<br>需要注意的是：索引出来的结果与原数据共享内存，也即修改一个，另一个会跟着修改。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [2]： y = x[0,:]</span><br><span class="line">         y += 1</span><br><span class="line">         print(y)</span><br><span class="line">         print(x[0, :]) # 源tensor也被改了</span><br></pre></td></tr></table></figure><h4 id="改变形状"><a href="#改变形状" class="headerlink" title="改变形状"></a>改变形状</h4><p>用 <strong>view()</strong> 来改变Tensor的形状</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [3]： y = x.view(6)</span><br><span class="line">         z = x.view(-1, 2) # -1所指的维度可以根据其他维度的值推出来</span><br><span class="line"> </span><br><span class="line"># 此时x为2*3, y为1*6, z为3*2</span><br></pre></td></tr></table></figure><p>注意 view() 返回的新Tensor与源Tensor虽然可能有不同的size，但是是共享data的，也<br>即更改其中的一个，另外一个也会跟着改变。(顾名思义，view仅仅是改变了对这个张量的观察角度，内部数据并未改变）</p><p>Pytorch还提供了一个 <strong>reshape()</strong> 方法可以改变形状，它通常返回一个视图（view），而不是其拷贝。这意味着 <strong>torch.reshape()</strong> 不会创建新的数据副本，而是返回原始数据的一个不同形状的视图。</p><p>如果我们想返回一个真正新的副本（即不共享data内存）该怎么办呢？</p><p>推荐先用 <strong>clone()</strong> 创造一个副本然后再使用 <strong>view()</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">In [4]： x_cp = x.clone().view(6)</span><br></pre></td></tr></table></figure><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20231007150355191.png" alt="image-20231007150355191"></p><h3 id="广播机制"><a href="#广播机制" class="headerlink" title="广播机制"></a>广播机制</h3><p>当我们对两个形状不同的Tensor按元素运算时，可能会触发广播（broadcasting）机制：先适当复制元素使这两个Tensor形状相同后再按元素运算。</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20231007150556841.png" alt="image-20231007150556841"></p><h3 id="Tensor和NumPy相互转换"><a href="#Tensor和NumPy相互转换" class="headerlink" title="Tensor和NumPy相互转换"></a>Tensor和NumPy相互转换</h3><p>我们可以使用numpy()和from_numpy()将Tensor和NumPy中的数组相互转换。但是需要注意的一点是： <strong>这两个函数所产生的Tensor和NumPy中的数组共享相同的内存（所以他们之间的转换很快），改变其中一个时另一个也会改变！</strong></p><h4 id="Tensor-转-NumPy数组"><a href="#Tensor-转-NumPy数组" class="headerlink" title="Tensor 转 NumPy数组"></a>Tensor 转 NumPy数组</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20231007150842304.png" alt="image-20231007150842304"></p><h4 id="NumPy数组-转-Tensor"><a href="#NumPy数组-转-Tensor" class="headerlink" title="NumPy数组 转 Tensor"></a>NumPy数组 转 Tensor</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20231007150923550.png" alt="image-20231007150923550"></p><p>使用torch.tensor()从NumPy数组创建Tensor（不再共享内存）</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20231007151018194.png" alt="image-20231007151018194"></p><h3 id="Tensor-on-GPU"><a href="#Tensor-on-GPU" class="headerlink" title="Tensor on GPU"></a>Tensor on GPU</h3><p>用方法 <strong>to()</strong> 可以将 Tensor 在CPU和GPU（需要硬件支持）之间相互移动。</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20231007151117125.png" alt="image-20231007151117125"></p><h3 id="自动求梯度"><a href="#自动求梯度" class="headerlink" title="自动求梯度"></a>自动求梯度</h3><p>在深度学习中，我们经常需要对函数求梯度（gradient）。PyTorch提供的autograd包能够根据输入和前向传播过程自动构建计算图，并执行反向传播。</p><p>Tensor是autograd包的核心类，如果将其属性.requires_grad设置为True，它将开始追踪(track)在其上的所有操作（这样就可以利用链式法则进行梯度传播了）。完成计算后，可以调用.backward()来完成所有梯度计算。此Tensor的梯度将累积到.grad属性中。</p><p>如果不想要被继续追踪，可以调用.detach()将其从追踪记录中分离出来，这样就可以防止将来的计算被追踪，这样梯度就传不过去了。此外，还可以用 <code>with torch.no_grad()</code> 将不想被追踪的操作代码块包裹起来，这种方法在评估模型 的时候很常用，因为在评估模型时，我们并不需要计算可训练参数 <code>(requires_grad=True)</code>的梯度。</p><p>Function是另外一个很重要的类。Tensor和Function互相结合就可以构建一个记录有整个计算过程的有向无环图（DAG）。每个Tensor都有一个.grad_fn属性，该属性即创建该Tensor的Function, 就是说该Tensor是不是通过某些运算得到的，若是，则grad_fn返回一个与这些运算相关的对象，否则是None。</p><h2 id="线性回归实现"><a href="#线性回归实现" class="headerlink" title="线性回归实现"></a>线性回归实现</h2><ul><li>线性回归（Linear Regression）是机器学习和统计学中最基础和广泛应用的模型，是一种对自变量和因变量之间关系进行建模的回归分析。</li><li>从机器学习的角度来看，自变量就是样本的特征向量 x ∈ 𝑅ௗ（每一维对应一个自变量），因变量是标签y ，这里 y ∈ 𝑅 是连续值。假设空间是一组参数化的线性函数𝑓(x; 𝑤, 𝑏) &#x3D; 𝑥𝑤<sup>T</sup> + 𝑏</li><li>其中，权重向量 𝒘 和偏置 𝒃 是线性回归需要学习的参数， 函数 𝑓(x; 𝑤, 𝑏) ∊ 𝑅 称为<strong>线性模型</strong></li></ul><p><code>实现线性回归</code></p><p>使用Tensor 和 autograd来实现一个线性回归，具体的步骤有:</p><ul><li>生成和读取数据集</li><li>构建模型</li><li>初始化模型参数</li><li>定义损失函数和优化算法</li><li>训练模型</li></ul><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20231007152542556.png" alt="image-20231007152542556"></p><h3 id="手动实现线性回归"><a href="#手动实现线性回归" class="headerlink" title="手动实现线性回归"></a>手动实现线性回归</h3><h4 id="生成数据"><a href="#生成数据" class="headerlink" title="生成数据"></a>生成数据</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20231007152743079.png" alt="image-20231007152743079"></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20231007152803373.png" alt="image-20231007152803373"></p><h4 id="读取数据"><a href="#读取数据" class="headerlink" title="读取数据"></a>读取数据</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20231007152837084.png" alt="image-20231007152837084"></p><h4 id="构建模型"><a href="#构建模型" class="headerlink" title="构建模型"></a>构建模型</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20231007152900758.png" alt="image-20231007152900758"></p><h4 id="损失函数和优化算法"><a href="#损失函数和优化算法" class="headerlink" title="损失函数和优化算法"></a>损失函数和优化算法</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20231007152951497.png" alt="image-20231007152951497"></p><h4 id="模型训练"><a href="#模型训练" class="headerlink" title="模型训练"></a>模型训练</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20231007153012257.png" alt="image-20231007153012257"></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20231007153116320.png" alt="image-20231007153116320"></p><h3 id="利用torch-nn实现线性回归"><a href="#利用torch-nn实现线性回归" class="headerlink" title="利用torch.nn实现线性回归"></a>利用torch.nn实现线性回归</h3><h4 id="Torch-nn-模块简介"><a href="#Torch-nn-模块简介" class="headerlink" title="Torch.nn 模块简介"></a>Torch.nn 模块简介</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20231007153310476.png" alt="image-20231007153310476"></p><h4 id="读取数据-1"><a href="#读取数据-1" class="headerlink" title="读取数据"></a>读取数据</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20231007153356867.png" alt="image-20231007153356867"></p><h4 id="构建模型-1"><a href="#构建模型-1" class="headerlink" title="构建模型"></a>构建模型</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20231007153519289.png" alt="image-20231007153519289"></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20231007153529272.png" alt="image-20231007153529272"></p><h4 id="模型参数初始化"><a href="#模型参数初始化" class="headerlink" title="模型参数初始化"></a>模型参数初始化</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20231007153547664.png" alt="image-20231007153547664"></p><h4 id="损失函数和优化"><a href="#损失函数和优化" class="headerlink" title="损失函数和优化"></a>损失函数和优化</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20231007153622841.png" alt="image-20231007153622841"></p><h4 id="模型训练-1"><a href="#模型训练-1" class="headerlink" title="模型训练"></a>模型训练</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20231007153640167.png" alt="image-20231007153640167"></p><h3 id="常用损失函数"><a href="#常用损失函数" class="headerlink" title="常用损失函数"></a>常用损失函数</h3><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20231007153708206.png" alt="image-20231007153708206"></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20231007153718918.png" alt="image-20231007153718918"></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20231007153730350.png" alt="image-20231007153730350"></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20231007153835518.png" alt="image-20231007153835518"></p><h3 id="模型预测及评价（分类问题）"><a href="#模型预测及评价（分类问题）" class="headerlink" title="模型预测及评价（分类问题）"></a>模型预测及评价（分类问题）</h3><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20231007153912585.png" alt="image-20231007153912585"></p>]]></content>
      
      
      <categories>
          
          <category> Deep-Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Deep-Learning </tag>
            
            <tag> Anoconda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java</title>
      <link href="/Java/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/Java/"/>
      <url>/Java/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/Java/</url>
      
        <content type="html"><![CDATA[<h1 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h1><h2 id="变量、运算符、表达式、输入与输出"><a href="#变量、运算符、表达式、输入与输出" class="headerlink" title="变量、运算符、表达式、输入与输出"></a>变量、运算符、表达式、输入与输出</h2><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>变量必须先定义，才可以使用。不能重名。</p><p>变量定义的方式同C语言。</p><p><code>内置数据类型</code></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20231002014701078.png" alt="image-20231002014701078"></p><p><code>常量</code></p><p>使用<code>final</code>修饰：<code>final int N = 110;</code></p><p><strong>final datatype CONSTANTNAME &#x3D; VALUE;</strong></p><p><code>类型转化</code></p><ul><li>显式转化：<code>int x = (int)&#39;A&#39;</code></li><li>隐式转化：<code>double x = 12, y = 4 * 3.3;</code></li></ul><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int A = 10, B = 20;</span><br></pre></td></tr></table></figure><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20231002015023378.png" alt="image-20231002015023378"></p><p><code>注意</code>：这里的 <strong>&#x2F;</strong> 是向零取整（10 &#x2F; 20 &#x3D; 0，-30 &#x2F; 20 &#x3D; -1），python中是向下取整，即 -30 &#x2F; 20 &#x3D; -2；</p><h3 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h3><p>整数的加减乘除四则运算：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">6</span> + <span class="number">3</span> * <span class="number">4</span> / <span class="number">2</span> - <span class="number">2</span>;</span><br><span class="line">        System.out.println(a);<span class="comment">// a = 10</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> a * <span class="number">10</span> + <span class="number">5</span> / <span class="number">2</span>;</span><br><span class="line">        System.out.println(b);<span class="comment">// b = 102</span></span><br><span class="line">        System.out.println(<span class="number">23</span> * <span class="number">56</span> - <span class="number">78</span> / <span class="number">3</span>);<span class="comment">//1262</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>浮点数（小数）的运算：(浮点数比较一般计算两数差值的绝对值与某一精度(1e-6、1e-8))</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">double</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">1.5</span>, y = <span class="number">3.2</span>;</span><br><span class="line">        System.out.println(x * y);<span class="comment">//4.800000000000001</span></span><br><span class="line">        System.out.println(x + y);<span class="comment">//4.7</span></span><br><span class="line">        System.out.println(x - y);<span class="comment">//-1.7000000000000002</span></span><br><span class="line">        System.out.println(x / y);<span class="comment">//0.46875</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整型变量的自增、自减：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> a ++ ;</span><br><span class="line">        System.out.println(a + <span class="string">&quot; &quot;</span> + b);<span class="comment">//2 1</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> ++ a;</span><br><span class="line">        System.out.println(a + <span class="string">&quot; &quot;</span> + c);<span class="comment">//3 3</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><p>方式1，效率较低，输入规模较小( &lt; 10<sup>5</sup> )时使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> sc.next();  <span class="comment">// 读入下一个字符串(遇到空白字符(空白、回车、制表符等)结束)</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> sc.nextInt();  <span class="comment">// 读入下一个整数</span></span><br><span class="line">        <span class="type">float</span> <span class="variable">y</span> <span class="operator">=</span> sc.nextFloat();  <span class="comment">// 读入下一个单精度浮点数</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">z</span> <span class="operator">=</span> sc.nextDouble();  <span class="comment">// 读入下一个双精度浮点数</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> sc.nextLine();  <span class="comment">// 读入下一行(遇回车结束)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方式2，效率较高，输入规模较大时使用。注意需要抛异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in));</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> br.readLine();<span class="comment">//hello world</span></span><br><span class="line">        System.out.println(str);<span class="comment">//hello world</span></span><br><span class="line">        String[] strs = br.readLine().split(<span class="string">&quot; &quot;</span>);<span class="comment">// 3 4</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> Integer.parseInt(strs[<span class="number">0</span>]);<span class="comment">//3</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> Integer.parseInt(strs[<span class="number">1</span>]);<span class="comment">//4</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p>方式1，效率较低，输出规模较小时使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="number">123</span>);  <span class="comment">// 输出整数 + 换行</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World&quot;</span>);  <span class="comment">// 输出字符串 + 换行</span></span><br><span class="line">        System.out.print(<span class="number">123</span>);  <span class="comment">// 输出整数</span></span><br><span class="line">        System.out.print(<span class="string">&quot;yxc\n&quot;</span>);  <span class="comment">// 输出字符串</span></span><br><span class="line">        System.out.printf(<span class="string">&quot;%04d %.2f\n&quot;</span>, <span class="number">4</span>, <span class="number">123.456D</span>);  <span class="comment">// 格式化输出，float与double都用%f输出</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>System.out.printf()</code>中不同类型变量的输出格式：</p><ul><li><code>int: %d</code></li><li><code>float: %f</code></li><li><code>double: %f</code></li><li><code>char: %c</code></li><li><code>String: %s</code></li></ul><p>方式2，效率较高，输出规模较大时使用。注意需要抛异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStreamWriter;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(System.out));</span><br><span class="line">        bw.write(<span class="string">&quot;Hello World\n&quot;</span>);</span><br><span class="line">        bw.flush();  <span class="comment">// 需要手动刷新缓冲区</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="判断语句"><a href="#判断语句" class="headerlink" title="判断语句"></a>判断语句</h2><h3 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h3><h4 id="基本if-else语句"><a href="#基本if-else语句" class="headerlink" title="基本if-else语句"></a>基本if-else语句</h4><p>当条件成立时，执行某些语句；否则执行另一些语句。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> sc.nextInt(), b = sc.nextInt();</span><br><span class="line">        <span class="keyword">if</span> (a &gt; b)</span><br><span class="line">            System.out.println(a);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            System.out.println(b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li><code>else</code> 语句不是必须的</li><li>当只有一条语句时，大括号可以省略</li><li><code>if-else</code>语句内部也可以是<code>if-else</code>语句(即允许嵌套)</li></ul><h4 id="常用比较运算符"><a href="#常用比较运算符" class="headerlink" title="常用比较运算符"></a>常用比较运算符</h4><ol><li>大于 <code>&gt;</code></li><li>小于 <code>&lt;</code></li><li>大于等于 <code>&gt;=</code></li><li>小于等于 <code>&lt;=</code></li><li>等于 <code>==</code></li><li>不等于 <code>!=</code></li></ol><h4 id="if-else-if-else连写"><a href="#if-else-if-else连写" class="headerlink" title="if-else if-else连写"></a><code>if-else</code> if-else连写</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">s</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        <span class="keyword">if</span> (s &gt;= <span class="number">90</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s &gt;= <span class="number">70</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s &gt;= <span class="number">60</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;C&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;D&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="条件表达式"><a href="#条件表达式" class="headerlink" title="条件表达式"></a>条件表达式</h3><ol><li>与 <code>&amp;&amp;</code></li><li>或 <code>||</code></li><li>非 <code>!</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">year</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        <span class="keyword">if</span> (year % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; year % <span class="number">100</span> != <span class="number">0</span> || year % <span class="number">400</span> == <span class="number">0</span>)</span><br><span class="line">            System.out.println(<span class="string">&quot;yes&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            System.out.println(<span class="string">&quot;no&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="switch-语句"><a href="#switch-语句" class="headerlink" title="switch 语句"></a>switch 语句</h3><p><code>swtich</code>语句中如果不加<code>break</code>语句，则从上到下匹配到第一个case后，会顺次执行后面每个<code>case</code>中的语句。</p><h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><p>以简单理解为循环版的<code>if</code>语句。<code>if</code>语句是判断一次，如果条件成立，则执行后面的语句；<code>while</code>是每次判断，如果成立，则执行循环体中的语句，否则停止。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>, b = <span class="number">1</span>, i = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; n) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> a + b;</span><br><span class="line">            a = b;</span><br><span class="line">            b = c;</span><br><span class="line">            i ++ ;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>死循环</code>：循环永久执行，无法结束。我们要避免写出死循环</p><h3 id="do-while-循环"><a href="#do-while-循环" class="headerlink" title="do while 循环"></a>do while 循环</h3><p><code>do while</code>循环不常用。<br><code>do while</code>语句与<code>while</code>语句非常相似。唯一的区别是，<code>do while</code>语句限制性循环体后检查条件。不管条件的值如何，我们都要至少执行一次循环。</p><h3 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h3><p>基本思想：把控制循环次数的变量从循环体中剥离。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for (init-statement; condition; expression) &#123;</span><br><span class="line">    statement</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>init-statement</code>可以是声明语句、表达式、空语句，一般用来初始化循环变量；<br><code>condition</code>是条件表达式，和<code>while</code>中的条件表达式作用一样；可以为空，空语句表示<code>true</code>；<br><code>expression</code>一般负责修改循环变量，可以为空。</p><p><code>init-statement</code>可以定义多个变量，<code>expression</code>也可以修改多个变量。</p><p><code>增强型for循环</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">double</span> value: myList)</span><br><span class="line">    System.out.println(value);</span><br></pre></td></tr></table></figure><h3 id="跳转语句"><a href="#跳转语句" class="headerlink" title="跳转语句"></a>跳转语句</h3><h4 id="break"><a href="#break" class="headerlink" title="break"></a>break</h4><p>可以提前从循环中退出，一般与<code>if</code>语句搭配。</p><h4 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h4><p>可以直接跳到当前循环体的结尾。作用与<code>if</code>语句类似。</p><h3 id="多层循环"><a href="#多层循环" class="headerlink" title="多层循环"></a>多层循环</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//打印1~100中的所有质数</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt;= <span class="number">100</span>; i ++ ) &#123;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">isPrime</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">2</span>; j &lt; i; j ++ ) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i % j == <span class="number">0</span>) &#123;</span><br><span class="line">                    isPrime = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (isPrime) System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h3><h4 id="数组的定义"><a href="#数组的定义" class="headerlink" title="数组的定义"></a>数组的定义</h4><p>数组的定义方式和变量类似。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] a = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>], b;</span><br><span class="line">        <span class="type">float</span>[] f = <span class="keyword">new</span> <span class="title class_">float</span>[<span class="number">33</span>];</span><br><span class="line">        <span class="type">double</span>[] d = <span class="keyword">new</span> <span class="title class_">double</span>[<span class="number">123</span>];</span><br><span class="line">        <span class="type">char</span>[] c = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">21</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="数组的初始化"><a href="#数组的初始化" class="headerlink" title="数组的初始化"></a>数组的初始化</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] a = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>&#125;;        <span class="comment">// 含有3个元素的数组，元素分别是0, 1, 2</span></span><br><span class="line">        <span class="type">int</span>[] b = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>];       <span class="comment">// 含有3个元素的数组，元素的值均为0</span></span><br><span class="line">        <span class="type">char</span>[] d = &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>&#125;; <span class="comment">// 字符数组的初始化</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="访问数组元素"><a href="#访问数组元素" class="headerlink" title="访问数组元素"></a>访问数组元素</h4><p>语法同C语言，通过下标访问数组。</p><h3 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h3><p>多维数组就是数组的数组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[][] a = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>][<span class="number">4</span>]; <span class="comment">// 大小为3的数组，每个元素是含有4个整数的数组。</span></span><br><span class="line">        <span class="type">int</span>[][][] b = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>][<span class="number">20</span>][<span class="number">30</span>]; <span class="comment">// 将所有元素的初值为0</span></span><br><span class="line">        <span class="comment">// 大小为10的数组，它的每个元素是含有20个数组的数组</span></span><br><span class="line">        <span class="comment">// 这些数组的元素是含有30个整数的数组</span></span><br><span class="line">        <span class="type">int</span>[][] c = &#123;           <span class="comment">// 三个元素，每个元素都是大小为4的数组</span></span><br><span class="line">            &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;,       <span class="comment">// 第1行的初始值</span></span><br><span class="line">            &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>&#125;,       <span class="comment">// 第2行的初始值</span></span><br><span class="line">            &#123;<span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>&#125;      <span class="comment">// 第3行的初始值</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数组的范围遍历"><a href="#数组的范围遍历" class="headerlink" title="数组的范围遍历"></a>数组的范围遍历</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[][] a = &#123;</span><br><span class="line">            &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;,</span><br><span class="line">            &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>&#125;,</span><br><span class="line">            &#123;<span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>&#125;,</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] row: a) &#123;  <span class="comment">// 范围遍历</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> x: row)  <span class="comment">// 范围遍历</span></span><br><span class="line">                System.out.printf(<span class="string">&quot;%d &quot;</span>, x);</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="常用API"><a href="#常用API" class="headerlink" title="常用API"></a>常用API</h3><ul><li>属性length：返回数组长度，注意不加小括号</li><li><code>Arrays.sort()</code>：数组排序</li><li><code>Arrays.fill(int[] a, int val)</code>：填充数组</li><li><code>Arrays.toString()</code>：将数组转化为字符串</li><li><code>Arrays.deepToString()</code>：将多维数组转化为字符串</li><li>数组不可变长</li><li>使用<code>Arrays</code>需要<code>import java.util.Arrays</code></li></ul><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h3 id="字符与整数的联系——ASCII码"><a href="#字符与整数的联系——ASCII码" class="headerlink" title="字符与整数的联系——ASCII码"></a>字符与整数的联系——ASCII码</h3><p>每个常用字符都对应一个<code>-128 ~ 127</code>的数字，二者之间可以相互转化。注意：目前负数没有与之对应的字符。</p><p>常用ASCII值：<code>&#39;A&#39;- &#39;Z&#39;</code> 是 <code>65 ~ 90</code>，<code>&#39;a&#39; - &#39;z&#39;</code> 是 <code>97 - 122</code>，<code>0 - 9</code> 是 <code>48 - 57</code></p><p>字符可以参与运算，运算时会将其当做整数</p><h3 id="String-类"><a href="#String-类" class="headerlink" title="String 类"></a>String 类</h3><p>初始化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">b</span> <span class="operator">=</span> <span class="string">&quot;My name is &quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">x</span> <span class="operator">=</span> b;  <span class="comment">// 存储到了相同地址</span></span><br><span class="line"><span class="type">String</span> <span class="variable">c</span> <span class="operator">=</span> b + <span class="string">&quot;lx&quot;</span>;  <span class="comment">// String可以通过加号拼接</span></span><br><span class="line"><span class="type">String</span> <span class="variable">d</span> <span class="operator">=</span> <span class="string">&quot;My age is &quot;</span> + <span class="number">18</span>;  <span class="comment">// int会被隐式转化成字符串&quot;18&quot;</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> String.format(<span class="string">&quot;My age is %d&quot;</span>, <span class="number">18</span>);  <span class="comment">// 格式化字符串，类似于C++中的sprintf</span></span><br><span class="line"><span class="type">String</span> <span class="variable">money_str</span> <span class="operator">=</span> <span class="string">&quot;123.45&quot;</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">money</span> <span class="operator">=</span> Double.parseDouble(money_str);  <span class="comment">// String转double</span></span><br></pre></td></tr></table></figure><p>只读变量，不能修改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> <span class="string">&quot;Hello &quot;</span>;</span><br><span class="line">a += <span class="string">&quot;World&quot;</span>;  <span class="comment">// 会构造一个新的字符串</span></span><br></pre></td></tr></table></figure><p>访问<code>String</code>中的字符</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; str.length(); i ++ ) &#123;</span><br><span class="line">    System.out.print(str.charAt(i));  <span class="comment">// 只能读取，不能写入</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>常用API</p><ul><li><code>length()</code>：返回长度</li><li><code>split(String regex)</code>：分割字符串</li><li><code>indexOf(char c)、indexOf(String str)、lastIndexOf(char c)、lastIndexOf(String str)</code>：查找，找不到返回-1</li><li><code>equals()</code>：判断两个字符串是否相等，注意不能直接用&#x3D;&#x3D;</li><li><code>compareTo()</code>：判断两个字符串的字典序大小，负数表示小于，0表示相等，正数表示大于</li><li><code>startsWith()</code>：判断是否以某个前缀开头</li><li><code>endsWith()</code>：判断是否以某个后缀结尾</li><li><code>trim()</code>：去掉首尾的空白字符</li><li><code>toLowerCase()</code>：全部用小写字符</li><li><code>toUpperCase()</code>：全部用大写字符</li><li><code>replace(char oldChar, char newChar)</code>：替换字符</li><li><code>replace(String oldRegex, String newRegex)</code>：替换字符串</li><li><code>substring(int beginIndex, int endIndex)</code>：返回<code>[beginIndex, endIndex)</code>中的子串</li><li><code>toCharArray()</code>：将字符串转化成字符数组</li></ul><h3 id="输入与输出"><a href="#输入与输出" class="headerlink" title="输入与输出"></a>输入与输出</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> sc.next();  <span class="comment">// 输入字符串，遇到空格、回车等空白字符时停止输入</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> sc.nextLine();  <span class="comment">// 输入一整行字符串，遇到空格不会停止输入，遇到回车才会停止</span></span><br><span class="line">        System.out.println(str1);  <span class="comment">// 可以直接输出</span></span><br><span class="line">        System.out.printf(<span class="string">&quot;%s\n&quot;</span>, str2);  <span class="comment">// 也可以格式化输出，用 %s 表示字符串</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="StringBuilder、StringBuffer"><a href="#StringBuilder、StringBuffer" class="headerlink" title="StringBuilder、StringBuffer"></a>StringBuilder、StringBuffer</h3><p><code>String</code>不能被修改，如果打算修改字符串，可以使用<code>StringBuilder</code>和<code>StringBuffer</code>。</p><p><code>StringBuffer</code>线程安全，速度较慢；<code>StringBuilder</code>线程不安全，速度较快。</p><p>常用API</p><ul><li><code>reverse()</code>：翻转字符串</li></ul><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="函数基础"><a href="#函数基础" class="headerlink" title="函数基础"></a>函数基础</h3><p>一个典型的函数定义包括以下部分：修饰符、返回类型、函数名字、由0个或多个形参组成的列表以及函数体。</p><h4 id="编写函数"><a href="#编写函数" class="headerlink" title="编写函数"></a>编写函数</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">fact</span><span class="params">(<span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= val; i ++ )</span><br><span class="line">            res *= i;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数名字是<code>fact</code>，它作用于一个整型参数，返回一个整型值。<code>return</code>语句负责结束<code>fact</code>并返回<code>res</code>的值。<br>修饰符包括<code>private、static</code>等，它们属于类相关的概念，会在下一章解释。</p><h4 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">fact</span><span class="params">(<span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= val; i ++ )</span><br><span class="line">            res *= i;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> fact(<span class="number">5</span>);</span><br><span class="line">        System.out.printf(<span class="string">&quot;5! is %d\n&quot;</span>, res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数的调用完成两项工作：</p><ol><li>用实参初始化函数对应的形参，</li><li>将控制权转移给被调用函数。此时，主调函数的执行被暂时中断，被调函数开始执行。</li></ol><h4 id="形参和实参"><a href="#形参和实参" class="headerlink" title="形参和实参"></a>形参和实参</h4><p>实参是形参的初始值。第一个实参初始化第一个形参，第二个实参初始化第二个形参，依次类推。形参和实参的类型和个数必须匹配。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fact(<span class="string">&quot;hello&quot;</span>);      <span class="comment">// 错误：实参类型不正确</span></span><br><span class="line">fact();             <span class="comment">// 错误：实参数量不足</span></span><br><span class="line">fact(<span class="number">42</span>, <span class="number">10</span>, <span class="number">0</span>);    <span class="comment">// 错误：实参数量过多</span></span><br><span class="line">fact(<span class="string">&#x27; &#x27;</span>);      <span class="comment">// 正确：该实参能自动转换成int类型，&#x27; &#x27;的ASCII值为32，所以该操作等价于fact(32);</span></span><br></pre></td></tr></table></figure><h4 id="函数的形参列表"><a href="#函数的形参列表" class="headerlink" title="函数的形参列表"></a>函数的形参列表</h4><p>函数的形参列表可以为空，但是不能省略</p><p>空形参列表：<code>void f1() &#123;/* …. */&#125; </code></p><p>形参列表中的形参通常用逗号隔开，其中每个形参都是含有一个声明符的声明。即使两个形参的类型一样，也必须把两个类型都写出来</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">f3</span><span class="params">(<span class="type">int</span> v1, v2)</span> &#123;<span class="comment">/* … */</span>&#125;        <span class="comment">// 错误</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">f4</span><span class="params">(<span class="type">int</span> v1, <span class="type">int</span> v2)</span> &#123;<span class="comment">/* … */</span>&#125;    <span class="comment">// 正确</span></span><br></pre></td></tr></table></figure><h4 id="函数返回类型"><a href="#函数返回类型" class="headerlink" title="函数返回类型"></a>函数返回类型</h4><p>大多数类型都能用作函数的返回类型。一种特殊的返回类型是<code>void</code>，它表示函数不返回任何值。</p><p>函数的返回类型也可以是数组、字符串或者其他对象</p><h4 id="变量的作用域"><a href="#变量的作用域" class="headerlink" title="变量的作用域"></a>变量的作用域</h4><p>本章中我们只使用静态成员变量和静态成员函数，非静态成员变量&#x2F;函数及其区别会在下一章中介绍。</p><p>函数内定义的变量为局部变量，只能在函数内部使用。<br>定义在类中的变量为成员变量，可以在类的所有成员函数中调用。<br>当局部变量与全局变量重名时，会优先使用局部变量。</p><h3 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h3><h4 id="值传递"><a href="#值传递" class="headerlink" title="值传递"></a>值传递</h4><p>八大基本数据类型和<code>String</code>类型等采用值传递。</p><p>将实参的初始值拷贝给形参。此时，对形参的改动不会影响实参的初始值。</p><h4 id="引用传递"><a href="#引用传递" class="headerlink" title="引用传递"></a>引用传递</h4><p>除<code>String</code>以外的数据类型的对象，例如<code>数组、StringBuilder</code>等采用引用传递。</p><p>将实参的引用（地址）传给形参，通过引用找到变量的真正地址，然后对地址中的值修改。所以此时对形参的修改会影响实参的初始值。</p><h3 id="返回类型和-return语句"><a href="#返回类型和-return语句" class="headerlink" title="返回类型和 return语句"></a>返回类型和 return语句</h3><p><code>return</code>语句终止当前正在执行的函数并将控制权返回到调用该函数的地方。</p><p><code>return</code>语句有两种形式：</p><p><code>return;</code><br><code>return expression;</code></p><h4 id="无返回值的函数"><a href="#无返回值的函数" class="headerlink" title="无返回值的函数"></a>无返回值的函数</h4><p>没有返回值的<code>return</code>语句只能用在返回类型是<code>void</code>的函数中。返回<code>void</code>的函数不要求非得有<code>return</code>语句，因为在这类函数的最后一句后面会隐式地执行<code>return</code>。</p><p>通常情况下，<code>void</code>函数如果想在它的中间位置提前退出，可以使用<code>return</code>语句。<code>return</code>的这种用法有点类似于我们用<code>break</code>语句退出循环。</p><h4 id="有返回值的函数"><a href="#有返回值的函数" class="headerlink" title="有返回值的函数"></a>有返回值的函数</h4><p>只要函数的返回类型不是<code>void</code>，则该函数内的每个分支都必须有<code>return</code>语句，且每条<code>return</code>语句都必须返回一个值。<code>return</code>语句返回值的类型必须与函数的返回类型相同，或者能隐式地转换函数的返回类型。</p><h3 id="函数重载"><a href="#函数重载" class="headerlink" title="函数重载"></a>函数重载</h3><p>函数重载是指：在同一个类中存在多个函数，函数名称相同但参数列表不同。</p><p>编译器会根据实参的类型选择最匹配的函数来执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;int max&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (a &gt; b) <span class="keyword">return</span> a;</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">max</span><span class="params">(<span class="type">double</span> a, <span class="type">double</span> b)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;double max&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (a &gt; b) <span class="keyword">return</span> a;</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(max(<span class="number">3</span>, <span class="number">4</span>));</span><br><span class="line">        System.out.println(max(<span class="number">3.0</span>, <span class="number">4.0</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数递归"><a href="#函数递归" class="headerlink" title="函数递归"></a>函数递归</h3><p>在一个函数内部，也可以调用函数本身。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">fib</span><span class="params">(<span class="type">int</span> n)</span> &#123;  <span class="comment">// 求斐波那切数列第n项</span></span><br><span class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">2</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> fib(n - <span class="number">1</span>) + fib(n - <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        System.out.println(fib(n));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="类与接口"><a href="#类与接口" class="headerlink" title="类与接口"></a>类与接口</h2><h3 id="类与对象"><a href="#类与对象" class="headerlink" title="类与对象"></a>类与对象</h3><p>类定义一种全新的数据类型，包含一组变量和函数；对象是类这种类型对应的实例。<br>例如在一间教室中，可以将Student定义成类，表示“学生”这个抽象的概念。那么每个同学就是Student类的一个对象（实例）。</p><h4 id="源文件声明规则"><a href="#源文件声明规则" class="headerlink" title="源文件声明规则"></a>源文件声明规则</h4><ul><li>一个源文件中只能有一个<code>public</code>类</li><li>一个源文件可以有多个非<code>public</code>类</li><li>源文件的名称应该和<code>public</code>类的类名保持一致</li><li>每个源文件中，先写<code>package</code>语句，再写<code>import</code>语句，最后定义类</li></ul><h4 id="类的定义"><a href="#类的定义" class="headerlink" title="类的定义"></a>类的定义</h4><ul><li><code>public</code>: 所有对象均可以访问</li><li><code>private</code>: 只有本类内部可以访问</li><li><code>protected</code>：同一个包或者子类中可以访问</li><li><code>不添加修饰符</code>：在同一个包中可以访问</li><li>静态（带static修饰符）成员变量&#x2F;函数与普通成员变量&#x2F;函数的区别：<ul><li>所有<code>static</code>成员变量&#x2F;函数在类中只有一份，被所有类的对象共享；</li><li>所有普通成员变量&#x2F;函数在类的每个对象中都有独立的一份；</li><li>静态函数中只能调用静态函数&#x2F;变量；普通函数中既可以调用普通函数&#x2F;变量，也可以调用静态函数&#x2F;变量。</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> x;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> y;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Point</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.x = x;</span><br><span class="line">        <span class="built_in">this</span>.y = y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setX</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.x = x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setY</span><span class="params">(<span class="type">int</span> y)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.y = y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getX</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getY</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">&quot;(%d, %d)&quot;</span>, x, y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h4><p>每个类只能继承一个类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ColorPoint</span> <span class="keyword">extends</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String color;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ColorPoint</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, String color)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(x, y);</span><br><span class="line">        <span class="built_in">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setColor</span><span class="params">(String color)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">&quot;(%d, %d, %s)&quot;</span>, <span class="built_in">super</span>.getX(), <span class="built_in">super</span>.getY(), <span class="built_in">this</span>.color);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="类的多态"><a href="#类的多态" class="headerlink" title="类的多态"></a>类的多态</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Point</span> <span class="variable">point</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Point</span>(<span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">        <span class="type">Point</span> <span class="variable">colorPoint</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ColorPoint</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="string">&quot;red&quot;</span>);</span><br><span class="line">        <span class="comment">// 多态，同一个类的实例，调用相同的函数，运行结果不同</span></span><br><span class="line">        System.out.println(point.toString());</span><br><span class="line">        System.out.println(colorPoint.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><p><code>interface</code>与<code>class</code>类似。主要用来定义类中所需包含的函数。</p><p>接口也可以继承其他接口，一个类可以实现多个接口。</p><h4 id="接口的定义"><a href="#接口的定义" class="headerlink" title="接口的定义"></a>接口的定义</h4><p>接口中不添加修饰符时，默认为<code>public</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Role</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">greet</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">move</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getSpeed</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="接口的继承"><a href="#接口的继承" class="headerlink" title="接口的继承"></a>接口的继承</h4><p>每个接口可以继承多个接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Hero</span> <span class="keyword">extends</span> <span class="title class_">Role</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attack</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="接口的实现"><a href="#接口的实现" class="headerlink" title="接口的实现"></a>接口的实现</h4><p>每个类可以实现多个接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Zeus</span> <span class="keyword">implements</span> <span class="title class_">Hero</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;Zeus&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attack</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;: Attack!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">greet</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;: Hi!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">move</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;: Move!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getSpeed</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="接口的多态"><a href="#接口的多态" class="headerlink" title="接口的多态"></a>接口的多态</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Athena</span> <span class="keyword">implements</span> <span class="title class_">Hero</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;Athena&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attack</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;: Attack!!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">greet</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;: Hi!!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">move</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;: Move!!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getSpeed</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Hero[] heros = &#123;<span class="keyword">new</span> <span class="title class_">Zeus</span>(), <span class="keyword">new</span> <span class="title class_">Athena</span>()&#125;;</span><br><span class="line">        <span class="keyword">for</span> (Hero hero: heros) &#123;</span><br><span class="line">            hero.greet();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="常用容器"><a href="#常用容器" class="headerlink" title="常用容器"></a>常用容器</h2><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><p>接口：<code>java.util.List&lt;&gt;</code></p><p>实现：</p><ul><li><code>java.util.ArrayList&lt;&gt;</code>：变长数组</li><li><code>java.util.LinkedList&lt;&gt;</code>：双链表</li></ul><p>函数：</p><ul><li><code>add()</code>：在末尾添加一个元素</li><li><code>clear()</code>：清空</li><li><code>size()</code>：返回长度</li><li><code>isEmpty()</code>：是否为空</li><li><code>get(i)</code>：获取第<code>i</code>个元素</li><li><code>set(i,val)</code>：将第<code>i</code>个元素设置为<code>val</code></li></ul><h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><p>类：<code>java.util.Stack&lt;&gt;</code></p><p>函数：</p><ul><li><code>push()</code>：压入元素</li><li><code>pop()</code>：弹出栈顶元素，并返回栈顶元素</li><li><code>peek()</code>：返回栈顶元素</li><li><code>size()</code>：返回长度</li><li><code>empty()</code>：栈是否为空</li><li><code>clear()</code>：清空</li></ul><h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><p>接口：<code>java.util.Queue&lt;&gt;</code></p><p>实现：</p><ul><li><code>java.util.LinkedList&lt;&gt;</code>：双链表</li><li><code>java.util.PriorityQueue&lt;&gt;</code>：优先队列<ul><li>默认是小根堆，大根堆写法：<code>new PriorityQueue&lt;&gt;(Collections.reverseOrder())</code></li></ul></li></ul><p>函数：</p><ul><li><code>add()</code>：在队尾添加元素</li><li><code>remove()</code>：删除并返回队头</li><li><code>isEmpty()</code>：是否为空</li><li><code>size()</code>：返回长度</li><li><code>peek()</code>：返回队头</li><li><code>clear()</code>：清空</li></ul><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><p>接口：<code>java.util.Set&lt;K&gt;</code></p><p>实现：</p><ul><li><code>java.util.HashSet&lt;K&gt;</code>：哈希表</li><li><code>java.util.TreeSet&lt;K&gt;</code>：平衡树</li></ul><p>函数：</p><ul><li><code>add()</code>：添加元素</li><li><code>contains()</code>：是否包含某个元素</li><li><code>remove()</code>：删除元素</li><li><code>size()</code>：返回元素数</li><li><code>isEmpty()</code>：是否为空</li><li><code>clear()</code>：清空</li></ul><p><code>java.util.TreeSet</code>多的函数：</p><ul><li><code>ceiling(key)</code>：返回大于等于key的最小元素，不存在则返回null</li><li><code>floor(key)</code>：返回小于等于key的最大元素，不存在则返回null</li></ul><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><p>接口：<code>java.util.Map&lt;K, V&gt;</code></p><p>实现：</p><ul><li><code>java.util.HashMap&lt;K, V&gt;</code>：哈希表</li><li><code>java.util.TreeMap&lt;K, V&gt;</code>：平衡树</li></ul><p>函数：</p><ul><li><code>put(key, value)</code>：添加关键字和其对应的值</li><li><code>get(key)</code>：返回关键字对应的值</li><li><code>containsKey(key)</code>：是否包含关键字</li><li><code>remove(key)</code>：删除关键字</li><li><code>size()</code>：返回元素数</li><li><code>isEmpty()</code>：是否为空</li><li><code>clear()</code>：清空</li><li><code>entrySet()</code>：获取Map中的所有对象的集合</li><li><code>Map.Entry&lt;K, V&gt;</code>：Map中的对象类型<ul><li><code>getKey()</code>：获取关键字</li><li><code>getValue()</code>：获取值</li></ul></li></ul><p><code>java.util.TreeMap&lt;K, V&gt;</code>多的函数：</p><ul><li><code>ceilingEntry(key)</code>：返回大于等于key的最小元素，不存在则返回null</li><li><code>floorEntry(key)</code>：返回小于等于key的最大元素，不存在则返回null</li></ul><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><h3 id="Error与Exception的区别"><a href="#Error与Exception的区别" class="headerlink" title="Error与Exception的区别"></a>Error与Exception的区别</h3><p><code>Error</code>是程序无法处理的错误，比如<code>OutOfMemoryError、ThreadDeath</code>等。这些异常发生时，Java虚拟机(JVM)一般会选择线程终止。此类异常是程序的致命异常，是无法捕获处理的。</p><p><code>Exception</code>是程序本身可以处理的异常，这种异常分两大类运行时异常和非运行时异常。 程序中应当尽可能去处理这些异常。</p><h3 id="Exception类的继承关系"><a href="#Exception类的继承关系" class="headerlink" title="Exception类的继承关系"></a>Exception类的继承关系</h3><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20231002123121411.png" alt="image-20231002123121411"></p><h3 id="运行时异常和非运行时异常的区别"><a href="#运行时异常和非运行时异常的区别" class="headerlink" title="运行时异常和非运行时异常的区别"></a>运行时异常和非运行时异常的区别</h3><p>运行时异常都是<code>RuntimeException</code>类及其子类异常，如<code>NullPointerException、IndexOutOfBoundsException</code>等， 这些异常是<strong>非检查型异常</strong>，程序中可以选择捕获处理，也可以不处理。这些异常一般是由程序逻辑错误引起的，程序应该从逻辑角度尽可能避免这类异常的发生。</p><p>非运行时异常是<code>RuntimeException</code>以外的异常，类型上都属于<code>Exception</code>类及其子类。从程序语法角度讲是必须进行处理的异常，如果不处理，程序就不能编译通过。如<code>IOException、SQLException</code>等以及用户自定义的<code>Exception</code>异常，这些是检查型异常。一般情况下不自定义检查型异常。</p><h3 id="内置异常类"><a href="#内置异常类" class="headerlink" title="内置异常类"></a>内置异常类</h3><h4 id="非检查性异常"><a href="#非检查性异常" class="headerlink" title="非检查性异常"></a>非检查性异常</h4><p><code>ArithmeticException</code></p><p>当出现异常的运算条件时，抛出此异常。例如，一个整数”除以零”时，抛出此类的一个实例</p><p><code>ArrayIndexOutOfBoundsException</code></p><p>用非法索引访问数组时抛出的异常。如果索引为负或大于等于数组大小，则该索引为非法索引</p><p><code>ArrayStoreException</code></p><p>试图将错误类型的对象存储到一个对象数组时抛出的异常</p><p><code>ClassCastException</code></p><p>当试图将对象强制转换为不是实例的子类时，抛出该异常</p><p><code>IllegalArgumentException</code></p><p>抛出的异常表明向方法传递了一个不合法或不正确的参数</p><p><code>IllegalMonitorStateException</code></p><p>抛出的异常表明某一线程已经试图等待对象的监视器，或者试图通知其他正在等待对象的监视器而本身没有指定监视器的线程</p><p><code>IllegalStateException</code></p><p>在非法或不适当的时间调用方法时产生的信号。换句话说，即 Java 环境或 Java 应用程序没有处于请求操作所要求的适当状态下</p><p><code>IllegalThreadStateException</code></p><p>线程没有处于请求操作所要求的适当状态时抛出的异常</p><p><code>IndexOutOfBoundsException</code></p><p>指示某排序索引（例如对数组、字符串或向量的排序）超出范围时抛出</p><p><code>NegativeArraySizeException</code></p><p>如果应用程序试图创建大小为负的数组，则抛出该异常</p><p><code>NullPointerException</code> </p><p>当应用程序试图在需要对象的地方使用 null 时，抛出该异常。</p><p><code>NumberFormatException</code> </p><p>当应用程序试图将字符串转换成一种数值类型，但该字符串不能转换为适当格式时，抛出该异常</p><p><code>SecurityException</code></p><p>由安全管理器抛出的异常，指示存在安全侵犯</p><p><code>StringIndexOutOfBoundsException</code></p><p>此异常由 String 方法抛出，指示索引或者为负，或者超出字符串的大小</p><p><code>UnsupportedOperationException</code></p><p>当不支持请求的操作时，抛出该异常</p><h4 id="检查性异常"><a href="#检查性异常" class="headerlink" title="检查性异常"></a>检查性异常</h4><p><code>ClassNotFoundException</code></p><p>应用程序试图加载类时，找不到相应的类，抛出该异常</p><p><code>CloneNotSupportedException</code></p><p>当调用 Object 类中的 <strong>clone</strong> 方法克隆对象，但该对象的类无法实现 <strong>Cloneable</strong> 接口时，抛出该异常</p><p><code>IllegalAccessException</code></p><p>拒绝访问一个类的时候，抛出该异常</p><p><code>InstantiationException</code></p><p>当试图使用 Class 类中的 <strong>newInstance</strong> 方法创建一个类的实例，而指定的类对象因为是一个接口或是一个抽象类而无法实例化时，抛出该异常。</p><p><code>InterruptedException</code></p><p>一个线程被另一个线程中断，抛出该异常。</p><p><code>NoSuchFieldException</code></p><p>请求的变量不存在</p><p><code>NoSuchMethodException</code></p><p>请求的方法不存在</p><h3 id="内置异常方法"><a href="#内置异常方法" class="headerlink" title="内置异常方法"></a>内置异常方法</h3><p><code>public String getMessage()</code></p><p>返回关于发生的异常的详细信息。这个消息在 <strong>Throwable</strong> 类的构造函数中初始化了</p><p><code>public Throwable getCause()</code></p><p>返回一个 <strong>Throwable</strong> 对象代表异常原因</p><p><code>public String toString()</code></p><p>返回此 <strong>Throwable</strong> 的简短描述</p><p><code>public void printStackTrace()</code></p><p>将此 <strong>Throwable</strong> 及其回溯打印到标准错误流</p><p><code>public StackTraceElement [] getStackTrace()</code></p><p>返回一个包含堆栈层次的数组。下标为 0 的元素代表栈顶，最后一个元素代表方法调用堆栈的栈底</p><p><code>public Throwable fillInStackTrace()</code></p><p>用当前的调用栈层次填充 <strong>Throwable</strong> 对象栈层次，添加到栈层次任何先前信息中</p><h3 id="捕获异常"><a href="#捕获异常" class="headerlink" title="捕获异常"></a>捕获异常</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">foo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] array = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i ++ )</span><br><span class="line">            array[i] = i;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            array[k] /= x;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ArithmeticException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;除零错误！&quot;</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ArrayIndexOutOfBoundsException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;数组越界！&quot;</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i ++ ) &#123;</span><br><span class="line">                System.out.println(array[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        foo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="抛出异常"><a href="#抛出异常" class="headerlink" title="抛出异常"></a>抛出异常</h3><p><code>throw</code>：在函数内抛出一个异常。<br><code>throws</code>：在函数定义时抛出一些可能的异常。</p><p>检查型异常必须被捕获或者抛出。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">foo</span><span class="params">()</span> <span class="keyword">throws</span> IOException, NoSuchFieldException &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IOException</span>(<span class="string">&quot;找不到文件！！！&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoSuchFieldException</span>(<span class="string">&quot;自定义异常&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            foo();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;IOException!&quot;</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;NoSuchFieldException!&quot;</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="try-with-resources"><a href="#try-with-resources" class="headerlink" title="try-with-resources"></a>try-with-resources</h3><p>JDK7 之后，Java 新增的 <code>try-with-resource</code> 语法糖来打开资源，并且可以在语句执行完毕后确保每个资源都被自动关闭 。<br>try 用于声明和实例化资源，catch 用于处理关闭资源时可能引发的所有异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">try</span> (</span><br><span class="line">                <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;input.txt&quot;</span>));</span><br><span class="line">                <span class="type">BufferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;output.txt&quot;</span>));</span><br><span class="line">        ) &#123;</span><br><span class="line">            <span class="keyword">while</span> ((line = br.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Line =&gt; &quot;</span> + line);</span><br><span class="line">                bw.write(<span class="string">&quot;copy: &quot;</span> + line + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            bw.flush();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;IOException in try block =&gt;&quot;</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="注解与反射"><a href="#注解与反射" class="headerlink" title="注解与反射"></a>注解与反射</h2><h3 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h3><ul><li><p>注解（Annotation）也被称为元数据（Metadata），用于修饰包、方法、属性、构造器、局部变量等数据信息。</p></li><li><p>注解不影响程序逻辑，但注解可以被编译或运行。</p></li><li><p>在JavaSE中，注解的使用目的比较简单，例如标记过时的功能，忽略警告等。在JavaEE中注解占据了更重</p><p>要的角色，例如用来配置应用程序的任何切面，代替JavaEE旧版中所遗留的繁冗代码和XML配置等。</p></li></ul><h4 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h4><ul><li><code>@Override</code>： 限定某个函数必须重写其他函数，该注解只能用于函数</li><li><code>@Deprecated</code>：用于表示某个程序元素（类、函数）已过时</li><li><code>@SuppressWarnings</code>：抑制编译器警告</li></ul><h4 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h4><p>修饰其他注解的注解，就被称为元注解。</p><ul><li><code>Retention</code>：指定注解的作用范围</li><li><code>Target</code>：指定注解可以用在哪些地方</li><li><code>Document</code>：注定注解是否出出现在 javadoc 中</li><li><code>Inherited</code>：子类会继承父类的注解</li></ul><h3 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h3><p>反射：动态引入类、动态调用实例的成员函数、成员变量等。</p><h4 id="常用API-1"><a href="#常用API-1" class="headerlink" title="常用API"></a>常用API</h4><ul><li><code>java.lang.Class</code></li><li><code>java.lang.reflect.Method</code></li><li><code>java.lang.reflect.Field</code></li><li><code>java.lang.reflect.Constructor</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.yxc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Calculator</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Calculator</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Calculator</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.yxc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException, InvocationTargetException, NoSuchFieldException &#123;</span><br><span class="line">        Class&lt;?&gt; cls = Class.forName(<span class="string">&quot;org.yxc.Calculator&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> cls.newInstance();</span><br><span class="line"></span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> cls.getMethod(<span class="string">&quot;add&quot;</span>, <span class="type">int</span>.class, <span class="type">int</span>.class);</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> (<span class="type">int</span>)method.invoke(o, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">        System.out.println(res);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> cls.getField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        field.set(o, <span class="string">&quot;My Calculator!&quot;</span>);</span><br><span class="line">        System.out.println(field.get(o));</span><br><span class="line"></span><br><span class="line">        Constructor&lt;?&gt; constructor = cls.getConstructor(String.class);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">new_o</span> <span class="operator">=</span> constructor.newInstance(<span class="string">&quot;New Calculator!&quot;</span>);</span><br><span class="line">        System.out.println(new_o);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h4><p>优点：可以动态创建和使用对象，使用灵活</p><p>缺点：执行速度慢</p><h2 id="多线程与锁"><a href="#多线程与锁" class="headerlink" title="多线程与锁"></a>多线程与锁</h2><h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h3><h4 id="实现多线程"><a href="#实现多线程" class="headerlink" title="实现多线程"></a>实现多线程</h4><p>写法1：继承Thread类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Worker</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i ++ ) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Hello! &quot;</span> + <span class="built_in">this</span>.getName());</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Worker</span> <span class="variable">worker1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Worker</span>();</span><br><span class="line">        <span class="type">Worker</span> <span class="variable">worker2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Worker</span>();</span><br><span class="line">        worker1.setName(<span class="string">&quot;thread-1&quot;</span>);</span><br><span class="line">        worker2.setName(<span class="string">&quot;thread-2&quot;</span>);</span><br><span class="line">        worker1.start();</span><br><span class="line">        worker2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写法2：实现Runnable接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Worker1</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i ++ ) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Hello! &quot;</span> + <span class="string">&quot;thread-1&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Worker2</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i ++ ) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Hello! &quot;</span> + <span class="string">&quot;thread-2&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Worker1</span>()).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Worker2</span>()).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="常用API-2"><a href="#常用API-2" class="headerlink" title="常用API"></a>常用API</h4><ul><li><code>start()</code>：开启一个线程</li><li><code>Thread.sleep()</code>：休眠一个线程</li><li><code>join()</code>：等待线程执行结束</li><li><code>interrupt()</code>：从休眠中中断线程</li><li><code>setDaemon()</code>：将线程设置为守护线程。当只剩下守护线程时，程序自动退出</li></ul><h3 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h3><ul><li><code>lock</code>：获取锁，如果锁已经被其他线程获取，则阻塞</li><li><code>unlock</code>：释放锁，并唤醒被该锁阻塞的其他线程</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Worker</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">cnt</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100000</span>; i ++ ) &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                cnt ++ ;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">Worker</span> <span class="variable">worker1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Worker</span>();</span><br><span class="line">        <span class="type">Worker</span> <span class="variable">worker2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Worker</span>();</span><br><span class="line"></span><br><span class="line">        worker1.start();</span><br><span class="line">        worker2.start();</span><br><span class="line">        worker1.join();</span><br><span class="line">        worker2.join();</span><br><span class="line"></span><br><span class="line">        System.out.println(Worker.cnt);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="同步（Synchronized）"><a href="#同步（Synchronized）" class="headerlink" title="同步（Synchronized）"></a>同步（Synchronized）</h3><p>写法1：将Synchronized加到代码块上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Count</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="variable">cnt</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Worker</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> Count count;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Worker</span><span class="params">(Count count)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.count = count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (count) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100000</span>; i ++ ) &#123;</span><br><span class="line">                count.cnt ++ ;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">Count</span> <span class="variable">count</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Count</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Worker</span> <span class="variable">worker1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Worker</span>(count);</span><br><span class="line">        <span class="type">Worker</span> <span class="variable">worker2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Worker</span>(count);</span><br><span class="line"></span><br><span class="line">        worker1.start();</span><br><span class="line">        worker2.start();</span><br><span class="line">        worker1.join();</span><br><span class="line">        worker2.join();</span><br><span class="line"></span><br><span class="line">        System.out.println(count.cnt);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写法2：将Synchronized加到函数上（锁加到了this对象上）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Worker</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">cnt</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">work</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100000</span>; i ++ ) &#123;</span><br><span class="line">            cnt ++ ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        work();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">Worker</span> <span class="variable">worker</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Worker</span>();</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">worker1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(worker);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">worker2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(worker);</span><br><span class="line"></span><br><span class="line">        worker1.start();</span><br><span class="line">        worker2.start();</span><br><span class="line">        worker1.join();</span><br><span class="line">        worker2.join();</span><br><span class="line"></span><br><span class="line">        System.out.println(Worker.cnt);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="wait与notify"><a href="#wait与notify" class="headerlink" title="wait与notify"></a>wait与notify</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.yxc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Worker</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object object;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">boolean</span> needWait;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Worker</span><span class="params">(Object object, <span class="type">boolean</span> needWait)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.object = object;</span><br><span class="line">        <span class="built_in">this</span>.needWait = needWait;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (object) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (needWait) &#123;</span><br><span class="line">                    object.wait();</span><br><span class="line">                    System.out.println(<span class="built_in">this</span>.getName() + <span class="string">&quot;: 被唤醒啦！&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    object.notifyAll();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i ++ ) &#123;</span><br><span class="line">            <span class="type">Worker</span> <span class="variable">worker</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Worker</span>(object, <span class="literal">true</span>);</span><br><span class="line">            worker.setName(<span class="string">&quot;thread-&quot;</span> + i);</span><br><span class="line">            worker.start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">Worker</span> <span class="variable">worker</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Worker</span>(object, <span class="literal">false</span>);</span><br><span class="line">        worker.setName(<span class="string">&quot;thread-&quot;</span> + <span class="number">5</span>);</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        worker.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> AcWing </category>
          
          <category> Java </category>
          
          <category> Java </category>
          
          <category> 基础语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>贪心</title>
      <link href="/AcWing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/%E8%B4%AA%E5%BF%83/%E8%B4%AA%E5%BF%83/"/>
      <url>/AcWing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/%E8%B4%AA%E5%BF%83/%E8%B4%AA%E5%BF%83/</url>
      
        <content type="html"><![CDATA[<h1 id="贪心"><a href="#贪心" class="headerlink" title="贪心"></a>贪心</h1><p>[toc]</p><h2 id="区间问题"><a href="#区间问题" class="headerlink" title="区间问题"></a>区间问题</h2><h3 id="区间选点"><a href="#区间选点" class="headerlink" title="区间选点"></a>区间选点</h3><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230824190033773.png" alt="image-20230824190033773"></p><h4 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/652_632882e016-image_19.png"></p><h4 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Range</span>&#123;</span><br><span class="line">    <span class="type">int</span> l, r;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> &lt;(<span class="type">const</span> Range &amp;W) <span class="type">const</span> &#123;<span class="comment">//运算符重载,按右端点排序</span></span><br><span class="line">        <span class="keyword">return</span> r &lt; W.r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;range[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++ i) &#123;</span><br><span class="line">        <span class="type">int</span> l, r;</span><br><span class="line">        cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line">        range[i] = &#123;l, r&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">sort</span>(range, range + n);</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>, ed = <span class="number">-2e9</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++ i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (range[i].l &gt; ed) &#123;</span><br><span class="line">            ++ ans;</span><br><span class="line">            ed = range[i].r;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最大不相交区间数量"><a href="#最大不相交区间数量" class="headerlink" title="最大不相交区间数量"></a>最大不相交区间数量</h3><h4 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230824190057602.png" alt="image-20230824190057602"></p><h4 id="思路证明"><a href="#思路证明" class="headerlink" title="思路证明"></a>思路证明</h4><p><code>最大不相交区间数量 == 最少覆盖区间点数</code></p><p>因为如果几个区间能被同一个点覆盖，说明他们相交了<br>所以有几个点就是有几个不相交区间</p><h4 id="完整代码-1"><a href="#完整代码-1" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Range</span>&#123;</span><br><span class="line">    <span class="type">int</span> l, r;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> &lt;(<span class="type">const</span> Range &amp;W) <span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> r &lt; W.r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;range[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++ i) &#123;</span><br><span class="line">        <span class="type">int</span> l, r;</span><br><span class="line">        cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line">        range[i] = &#123;l, r&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">sort</span>(range, range + n);</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>, ed = <span class="number">-2e9</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++ i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (range[i].l &gt; ed) &#123;</span><br><span class="line">            ++ ans;</span><br><span class="line">            ed = range[i].r;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="区间分组"><a href="#区间分组" class="headerlink" title="区间分组"></a>区间分组</h3><h4 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230824190130537.png" alt="image-20230824190130537"></p><h4 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h4><p>从前往后枚举每个区间，判断此区间能否将其放到现有的组中</p><ul><li>如果一个区间的左端点比最小组的右端点要小，ranges[i].l &lt;&#x3D; heap.top() ，就开一个新组 heap.push(range[i].r)；</li><li>如果一个区间的左端点比最小组的右端点要大，则放在该组， heap.pop()、heap.push(range[i].r)；</li><li>每组去除右端点最小的区间，只保留一个右端点较大的区间，这样heap有多少区间，就有多少组。</li></ul><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230916155140720.png" alt="image-20230916155140720"></p><h4 id="完整代码-2"><a href="#完整代码-2" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Range</span>&#123;</span><br><span class="line">    <span class="type">int</span> l, r;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> &lt;(<span class="type">const</span> Range &amp;W) <span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> l &lt; W.l;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;range[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++ i) &#123;</span><br><span class="line">        <span class="type">int</span> l, r;</span><br><span class="line">        cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line">        range[i] = &#123;l, r&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">sort</span>(range, range + n);</span><br><span class="line">    </span><br><span class="line">    priority_queue&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;, greater&lt;<span class="type">int</span>&gt;&gt; heap;<span class="comment">//小根堆</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++ i) &#123;</span><br><span class="line">        <span class="keyword">auto</span> tmp = range[i];</span><br><span class="line">        <span class="keyword">if</span> (heap.<span class="built_in">empty</span>() || heap.<span class="built_in">top</span>() &gt;= tmp.l) heap.<span class="built_in">push</span>(tmp.r);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            heap.<span class="built_in">pop</span>();</span><br><span class="line">            heap.<span class="built_in">push</span>(tmp.r);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; heap.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="区间覆盖"><a href="#区间覆盖" class="headerlink" title="区间覆盖"></a>区间覆盖</h3><h4 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230824190421052.png" alt="image-20230824190421052"></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入样例：</span><br><span class="line">1 5</span><br><span class="line">3</span><br><span class="line">-1 3</span><br><span class="line">2 4</span><br><span class="line">3 5</span><br><span class="line">输出样例：</span><br><span class="line">2</span><br></pre></td></tr></table></figure><h4 id="算法图解"><a href="#算法图解" class="headerlink" title="算法图解"></a>算法图解</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230916155709177.png" alt="image-20230916155709177"></p><h4 id="完整代码-3"><a href="#完整代码-3" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Range</span>&#123;</span><br><span class="line">    <span class="type">int</span> l, r;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> &lt;(<span class="type">const</span> Range &amp;W) <span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> l &lt; W.l;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;range[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    <span class="type">int</span> st, ed;</span><br><span class="line">    cin &gt;&gt; st &gt;&gt; ed;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++ i) &#123;</span><br><span class="line">        <span class="type">int</span> l, r;</span><br><span class="line">        cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line">        range[i] = &#123;l, r&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">sort</span>(range, range + n);</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="type">bool</span> success = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++ i) &#123;</span><br><span class="line">        <span class="type">int</span> j = i, r = <span class="number">-2e9</span>;</span><br><span class="line">        <span class="keyword">while</span> (j &lt; n &amp;&amp; range[j].l &lt;= st) &#123;</span><br><span class="line">            r = <span class="built_in">max</span>(r, range[j].r);</span><br><span class="line">            ++j;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (r &lt; st) &#123;</span><br><span class="line">            ans = <span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        ++ ans;</span><br><span class="line">        <span class="keyword">if</span> (r &gt;= ed) &#123;</span><br><span class="line">            success = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        st = r;</span><br><span class="line">        i = j - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (!success) ans = <span class="number">-1</span>;</span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Huffman树"><a href="#Huffman树" class="headerlink" title="Huffman树"></a>Huffman树</h2><h3 id="合并果子"><a href="#合并果子" class="headerlink" title="合并果子"></a>合并果子</h3><h4 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h4><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">在一个果园里，达达已经将所有的果子打了下来，而且按果子的不同种类分成了不同的堆。</span><br><span class="line">达达决定把所有的果子合成一堆。</span><br><span class="line">每一次合并，达达可以把两堆果子合并到一起，消耗的体力等于两堆果子的重量之和。</span><br><span class="line">可以看出，所有的果子经过 n−1 次合并之后，就只剩下一堆了。</span><br><span class="line">达达在合并果子时总共消耗的体力等于每次合并所耗体力之和。</span><br><span class="line">因为还要花大力气把这些果子搬回家，所以达达在合并果子时要尽可能地节省体力。</span><br><span class="line">假定每个果子重量都为 1 ，并且已知果子的种类数和每种果子的数目，你的任务是设计出合并的次序方案，使达达耗费的体力最少，并输出这个最小的体力耗费值。</span><br><span class="line">例如有 3 种果子，数目依次为 1，2，9。</span><br><span class="line">可以先将 1、2堆合并，新堆数目为 3，耗费体力为 3。</span><br><span class="line">接着，将新堆与原先的第三堆合并，又得到新的堆，数目为 12，耗费体力为 12。</span><br><span class="line">所以达达总共耗费体力 = 3 + 12 = 15。</span><br><span class="line">可以证明 15为最小的体力耗费值。</span><br><span class="line"></span><br><span class="line">输入格式</span><br><span class="line"></span><br><span class="line">输入包括两行，第一行是一个整数 n，表示果子的种类数。</span><br><span class="line">第二行包含 n 个整数，用空格分隔，第 i 个整数 ai 是第 i 种果子的数目。</span><br><span class="line"></span><br><span class="line">输出格式</span><br><span class="line"></span><br><span class="line">输出包括一行，这一行只包含一个整数，也就是最小的体力耗费值。</span><br><span class="line">输入数据保证这个值小于 2^31。</span><br><span class="line"></span><br><span class="line">数据范围</span><br><span class="line">1 ≤ n ≤ 10000,1 ≤ ai ≤ 20000</span><br><span class="line"></span><br><span class="line">输入样例：</span><br><span class="line">3 </span><br><span class="line">1 2 9 </span><br><span class="line"></span><br><span class="line">输出样例：</span><br><span class="line">15</span><br></pre></td></tr></table></figure><h4 id="完整代码-4"><a href="#完整代码-4" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e4</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n; cin &gt;&gt; n;</span><br><span class="line">    priority_queue&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;, greater&lt;<span class="type">int</span>&gt;&gt; heap;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++ i) &#123;</span><br><span class="line">        <span class="type">int</span> tmp; cin &gt;&gt; tmp;</span><br><span class="line">        heap.<span class="built_in">push</span>(tmp);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (heap.<span class="built_in">size</span>() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="type">int</span> a = heap.<span class="built_in">top</span>(); heap.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="type">int</span> b = heap.<span class="built_in">top</span>(); heap.<span class="built_in">pop</span>();</span><br><span class="line">        ans += a + b;</span><br><span class="line">        heap.<span class="built_in">push</span>(a + b);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="排序不等式"><a href="#排序不等式" class="headerlink" title="排序不等式"></a>排序不等式</h2><h3 id="排队打水"><a href="#排队打水" class="headerlink" title="排队打水"></a>排队打水</h3><h4 id="题目描述-5"><a href="#题目描述-5" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230824190825220.png" alt="image-20230824190825220"></p><h4 id="完整代码-5"><a href="#完整代码-5" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> t[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++ i)</span><br><span class="line">        cin &gt;&gt; t[i];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">sort</span>(t, t + n);</span><br><span class="line">    </span><br><span class="line">    LL ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++ i) </span><br><span class="line">        ans += t[i] * (n - i - <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="绝对值不等式"><a href="#绝对值不等式" class="headerlink" title="绝对值不等式"></a>绝对值不等式</h2><h3 id="货仓选址"><a href="#货仓选址" class="headerlink" title="货仓选址"></a>货仓选址</h3><h4 id="题目描述-6"><a href="#题目描述-6" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230824190854616.png" alt="image-20230824190854616"></p><h4 id="证明"><a href="#证明" class="headerlink" title="证明"></a>证明</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230917185606355.png" alt="image-20230917185606355"></p><p><code>中位数即是最优解</code></p><h4 id="完整代码-6"><a href="#完整代码-6" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//写法一,时间复杂度：O(nlogn)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> A[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++ i)</span><br><span class="line">        cin &gt;&gt; A[i];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">sort</span>(A, A + n);</span><br><span class="line">    </span><br><span class="line">    LL ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++ i)</span><br><span class="line">        ans += <span class="built_in">abs</span>(A[i] - A[n / <span class="number">2</span>]);<span class="comment">//将n换成i同样正确</span></span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//写法二,快速选择算法,,时间复杂度：O(n)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> A[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++ i)</span><br><span class="line">        cin &gt;&gt; A[i];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">nth_element</span>(A, A + n / <span class="number">2</span>, A + n);</span><br><span class="line">    </span><br><span class="line">    LL ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++ i)</span><br><span class="line">        ans += <span class="built_in">abs</span>(A[i] - A[n / <span class="number">2</span>]);</span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="推公式"><a href="#推公式" class="headerlink" title="推公式"></a>推公式</h2><h3 id="耍杂技的牛"><a href="#耍杂技的牛" class="headerlink" title="耍杂技的牛"></a>耍杂技的牛</h3><h4 id="题目描述-7"><a href="#题目描述-7" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230824190928437.png" alt="image-20230824190928437"></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入样例：</span><br><span class="line">3</span><br><span class="line">10 3</span><br><span class="line">2 5</span><br><span class="line">3 3</span><br><span class="line">输出样例：</span><br><span class="line">2</span><br></pre></td></tr></table></figure><h4 id="贪心证明"><a href="#贪心证明" class="headerlink" title="贪心证明"></a>贪心证明</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230917192523433.png" alt="image-20230917192523433"></p><p>其他牛的危险值显然不变，所以分析交换前后这两头牛中最大的危险值即可。<br>将上述式子进行化简，每个式子减去 ∑<sup>i−1</sup><sub>j&#x3D;1</sub>w<sub>j</sub>得到如下式子</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230917192427379.png" alt="image-20230917192427379"></p><p>由于s, w都是正数，w<sub>i</sub> − s<sub>i+1</sub> &gt; −s<sub>i+1</sub>，w<sub>i+1</sub> − s<sub>i</sub> &gt; −s<sub>i</sub>，</p><p>比较 w<sub>i</sub> − s<sub>i+1</sub>，w<sub>i+1</sub> − s<sub>i</sub> 即可</p><p>当 w<sub>i</sub> − s<sub>i+1</sub> &gt;&#x3D; w<sub>i+1</sub> − s<sub>i</sub>，即 w<sub>i</sub> + s<sub>i</sub> &gt;&#x3D; w<sub>i+1</sub> + s<sub>i+1</sub> 时， 交换后更优；</p><p>当 w<sub>i</sub> − s<sub>i+1</sub> &lt; w<sub>i+1</sub> − s<sub>i</sub>，即 w<sub>i</sub> + s<sub>i</sub> &lt; w<sub>i+1</sub> + s<sub>i+1</sub> 时，交换前更优。</p><p>所以得到做法: 按每头牛的 w + s 进行排序, 当存在逆序时就进行交换(即升序排序)，<br>然后根据题意算出每头牛的危险值记录其中的最大值即可</p><h4 id="完整代码-7"><a href="#完整代码-7" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">5e4</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">PII cows[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++ i) &#123;</span><br><span class="line">        <span class="type">int</span> w, s;</span><br><span class="line">        cin &gt;&gt; w &gt;&gt; s;</span><br><span class="line">        cows[i] = &#123;w + s, w&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">sort</span>(cows, cows + n);</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>, ans = INT_MIN;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++ i) &#123;</span><br><span class="line">        <span class="type">int</span> w = cows[i].second, s = cows[i].first - w;</span><br><span class="line">        ans = <span class="built_in">max</span>(ans, sum - s);</span><br><span class="line">        sum += w;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> AcWing </category>
          
          <category> 算法基础 </category>
          
          <category> 贪心 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法基础课 </tag>
            
            <tag> 贪心 </tag>
            
            <tag> 区间问题 </tag>
            
            <tag> Huffman </tag>
            
            <tag> 排序不等式 </tag>
            
            <tag> 绝对值不等式 </tag>
            
            <tag> 快速选择算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划</title>
      <link href="/AcWing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
      <url>/AcWing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
      
        <content type="html"><![CDATA[<h1 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h1><p>[toc]</p><h2 id="闫式DP分析法"><a href="#闫式DP分析法" class="headerlink" title="闫式DP分析法"></a>闫式DP分析法</h2><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230830143637078.png" alt="image-20230830143637078"></p><h2 id="背包问题"><a href="#背包问题" class="headerlink" title="背包问题"></a>背包问题</h2><h3 id="01背包问题"><a href="#01背包问题" class="headerlink" title="01背包问题"></a>01背包问题</h3><p>特点：<code>每个物品仅能使用一次</code></p><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230823181605021.png" alt="image-20230823181605021"></p><h4 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//无优化版本</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">(1) 如果不装第 i 件物品，那么问题就转化为“前 i−1 件物品放入容量为 j 的背包中的最大价值”</span></span><br><span class="line"><span class="comment">(2) 如果装第 i件物品，那么问题就转化为“前 i−1 件物品放入剩下的容量为 j−v[i] 的背包中的最大价值”</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> f[N][N];<span class="comment">//前i个物品，背包体积是j时的最大价值</span></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> v[N], w[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i)</span><br><span class="line">        cin &gt;&gt; v[i] &gt;&gt; w[i];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= m; ++ j) &#123;</span><br><span class="line">            f[i][j] = f[i - <span class="number">1</span>][j];</span><br><span class="line">            <span class="keyword">if</span> (j &gt;= v[i]) </span><br><span class="line">                f[i][j] = <span class="built_in">max</span>(f[i][j], f[i<span class="number">-1</span>][j - v[i]] + w[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; f[n][m] &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//优化版本</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">在本轮更新的值，不会影响本轮中其他未更新的值！较小的index对应的状态是上一轮的状态值！</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> f[N];</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> v[N], w[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i)</span><br><span class="line">        cin &gt;&gt; v[i] &gt;&gt; w[i];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = m; j &gt;= v[i]; -- j) </span><br><span class="line">            f[j] = <span class="built_in">max</span>(f[j], f[j - v[i]] + w[i]);</span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; f[m] &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="优化思路"><a href="#优化思路" class="headerlink" title="优化思路"></a>优化思路</h4><p>动态规划的优化一般都是对代码或者集合最值方程进行一个等价变形。在考虑动态规划问题的时候，一定要先把基本的形式写出来，然后再对它进行优化。</p><p>首先，根据优化前的起码，f[i][j] 是从上到下，一行一行这样填满的：</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/55289_d9d6c184c4-2023-03-17-225446.gif"></p><p>看一下 f[i][j] 的计算公式：f[i][j] &#x3D; max(A, B)。</p><p>只用到了f[i - 1][j]，f[i-1][j - v<sub>i</sub>]，即只用到了 f[i - 1] 这一层，并且用到的体积为 j 和 j - v<sub>i</sub>，都是小于等于 j 的。</p><p>因此可以从体积为 V 开始，利用f[i - 1]的数据，求解出 f[i][j]，把 f[i][j] 放到 f[i -1][j] 的位置上。这样 f 数组就能优化到一维了。</p><p>并且，当 背包容量小于 v<sub>j</sub> 的时候，f[i][j] &#x3D; max{f[i - 1][j]，0} &#x3D; f[i - 1][j]。所以 j 只需要从 V 遍历到 v<sub>j</sub> 即可。</p><h3 id="完全背包问题"><a href="#完全背包问题" class="headerlink" title="完全背包问题"></a>完全背包问题</h3><h4 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230824182404659.png" alt="image-20230824182404659"></p><h4 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/55289_09752555ce-6.png"></p><h4 id="完整代码-1"><a href="#完整代码-1" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//无优化</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> v[N], w[N];</span><br><span class="line"><span class="type">int</span> f[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        cin &gt;&gt; v[i] &gt;&gt; w[i];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; ++j) &#123;</span><br><span class="line">            f[i][j] = f[i - <span class="number">1</span>][j];</span><br><span class="line">            <span class="keyword">if</span>(j &gt;= v[i])</span><br><span class="line">                f[i][j] = <span class="built_in">max</span>(f[i][j], f[i][j - v[i]] + w[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; f[n][m] &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//优化到1维</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> v[N], w[N];</span><br><span class="line"><span class="type">int</span> f[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        cin &gt;&gt; v[i] &gt;&gt; w[i];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = v[i]; j &lt;= m; ++j) &#123;</span><br><span class="line">                f[j] = <span class="built_in">max</span>(f[j], f[j - v[i]] + w[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; f[m] &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="优化思路-1"><a href="#优化思路-1" class="headerlink" title="优化思路"></a>优化思路</h4><p>f[i][j] &#x3D; max( f[i - 1][j]，f[i - 1][j - vi] + w，f[i - 1][j - 2 * vi] + 2 * w，f[i - 1][j - 3 * vi] + 3 * w，…..)。<br>f[i][j - vi] &#x3D; max( f[i - 1][j - vi]，f[i - 1][j - 2 * vi] + w，f[i - 1][j - 3 * vi] + 2 * w，…..) 。</p><p>极限尺度上是一样的</p><p>由上述两式，可以得到递推关系： f[i][j] &#x3D; max(f[i][j - v] + w，f[i - 1][j])</p><h3 id="多重背包问题"><a href="#多重背包问题" class="headerlink" title="多重背包问题"></a>多重背包问题</h3><p>即完全背包问题加上一个数量限制，数据范围较小的时候可以直接暴力三重循环。</p><h4 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230824212932847.png" alt="image-20230824212932847"></p><h4 id="完整代码-2"><a href="#完整代码-2" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">110</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> v[N], w[N], s[N];</span><br><span class="line"><span class="type">int</span> f[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) </span><br><span class="line">        cin &gt;&gt; v[i] &gt;&gt; w[i] &gt;&gt; s[i];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt;= m; ++j)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span>; k &lt;= s[i] &amp;&amp; k * v[i] &lt;= j; ++k)</span><br><span class="line">                f[i][j] = <span class="built_in">max</span>(f[i][j], f[i - <span class="number">1</span>][j - k * v[i]] + k * w[i]);</span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; f[n][m] &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在输入时直接计算</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">110</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> v, w, s;</span><br><span class="line"><span class="type">int</span> f[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        cin &gt;&gt; v &gt;&gt; w &gt;&gt; s;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt;= m; ++j)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span>; k &lt;= s &amp;&amp; k * v &lt;= j; ++k)</span><br><span class="line">                f[i][j] = <span class="built_in">max</span>(f[i][j], f[i - <span class="number">1</span>][j - k * v] + k * w);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; f[n][m] &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多重背包问题-II"><a href="#多重背包问题-II" class="headerlink" title="多重背包问题 II"></a>多重背包问题 II</h3><p>沿用上题的代码，由于数据范围变大，会 TLE</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230825173513707.png" alt="image-20230825173513707"></p><h4 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230824213004316.png" alt="image-20230824213004316"></p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入样例</span><br><span class="line">4 5</span><br><span class="line">1 2 3</span><br><span class="line">2 4 1</span><br><span class="line">3 4 3</span><br><span class="line">4 5 2</span><br><span class="line">输出样例：</span><br><span class="line">10</span><br></pre></td></tr></table></figure><h4 id="完整代码-3"><a href="#完整代码-3" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TLE</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> v, w, s;</span><br><span class="line"><span class="type">int</span> f[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        cin &gt;&gt; v &gt;&gt; w &gt;&gt; s;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt;= m; ++j)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span>; k &lt;= s &amp;&amp; k * v &lt;= j; ++k)</span><br><span class="line">                f[i][j] = <span class="built_in">max</span>(f[i][j], f[i - <span class="number">1</span>][j - k * v] + k * w);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; f[n][m] &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//二进制优化</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">25000</span>;<span class="comment">//25000 &gt; 2000 * log 2000 </span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> v[N], w[N];</span><br><span class="line"><span class="type">int</span> f[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="type">int</span> V, W, S;</span><br><span class="line">        cin &gt;&gt; V &gt;&gt; W &gt;&gt; S;</span><br><span class="line">        <span class="type">int</span> k = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(k &lt;= S) &#123;</span><br><span class="line">            ++ cnt;</span><br><span class="line">            v[cnt] = V * k;</span><br><span class="line">            w[cnt] = W * k;</span><br><span class="line">            S -= k;</span><br><span class="line">            k *= <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(S &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            ++ cnt;</span><br><span class="line">            v[cnt] = V * S;</span><br><span class="line">            w[cnt] = W * S;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    n = cnt;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = m; j &gt;= v[i]; --j)</span><br><span class="line">            f[j] = <span class="built_in">max</span>(f[j], f[j - v[i]] + w[i]);</span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; f[m] &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分组背包问题"><a href="#分组背包问题" class="headerlink" title="分组背包问题"></a>分组背包问题</h3><h4 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230824213051489.png" alt="image-20230824213051489"></p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">输入样例</span><br><span class="line">3 5</span><br><span class="line">2</span><br><span class="line">1 2</span><br><span class="line">2 4</span><br><span class="line">1</span><br><span class="line">3 4</span><br><span class="line">1</span><br><span class="line">4 5</span><br><span class="line">输出样例：</span><br><span class="line">8</span><br></pre></td></tr></table></figure><h4 id="思维导图-1"><a href="#思维导图-1" class="headerlink" title="思维导图"></a>思维导图</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230825181027678.png" alt="image-20230825181027678"></p><h4 id="完整代码-4"><a href="#完整代码-4" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">110</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> v[N][N], w[N][N], s[N];</span><br><span class="line"><span class="type">int</span> f[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        cin &gt;&gt; s[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; s[i]; ++j) &#123;</span><br><span class="line">            cin &gt;&gt; v[i][j] &gt;&gt; w[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = m; j &gt;= <span class="number">0</span>; --j)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span>; k &lt; s[i]; ++k)</span><br><span class="line">                <span class="keyword">if</span>(v[i][k] &lt;= j)</span><br><span class="line">                    f[j] = <span class="built_in">max</span>(f[j], f[j - v[i][k]] + w[i][k]);</span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; f[m] &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="线性DP"><a href="#线性DP" class="headerlink" title="线性DP"></a>线性DP</h2><h3 id="数字三角形"><a href="#数字三角形" class="headerlink" title="数字三角形"></a>数字三角形</h3><h4 id="题目描述-5"><a href="#题目描述-5" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230824213145503.png" alt="image-20230824213145503"></p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">输入样例：</span><br><span class="line">5</span><br><span class="line">7</span><br><span class="line">3 8</span><br><span class="line">8 1 0 </span><br><span class="line">2 7 4 4</span><br><span class="line">4 5 2 6 5</span><br><span class="line">输出样例：</span><br><span class="line">30</span><br></pre></td></tr></table></figure><h4 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h4><h5 id="思路一"><a href="#思路一" class="headerlink" title="思路一"></a>思路一</h5><p>闫氏DP分析法：<br><code>状态表示：</code>f<sub>(i，j)</sub> 集合：从 (1，1) 到 (i，j) 所有方案的集合<br><code>属性：</code>Max</p><p><code>状态计算：</code>这个点可以由 (i−1，j) 走过来，即f<sub>(i−1，j)</sub> + a<sub>(i，j)</sub><br>这个点也可以由 (i−1，j−1) 走过来，即f<sub>(i−1，j−1)</sub> + a<sub>(i，j)</sub><br>所以状态转移方程就是 f<sub>(i，j)</sub> &#x3D;max{f<sub>(i−1，j)</sub>，f<sub>(i−1，j−1)</sub>} + a<sub>(i，j)</sub></p><p>答案：根据定义，这里答案就是最下面那一层的和，即max<sub>1 ≤ i ≤ n</sub>{f<sub>(n，i)</sub>}</p><h5 id="思路二"><a href="#思路二" class="headerlink" title="思路二"></a>思路二</h5><p>闫氏DP分析法：<br><code>状态表示：</code>f<sub>(i，j)</sub> ：从 (i，j) 到最后一层的所有方案<br><code>属性：</code>Max</p><p><code>状态计算：</code>这条路径可以从(i+1，j)走上来，即f<sub>(i+1，j)</sub> + a<sub>(i，j)</sub><br>也可以从 (i+1，j+1) 走上来，即 f<sub>(i+1，j+1)</sub> + a<sub>(i，j)</sub><br>所以状态转移方程就是f<sub>(i，j)</sub> &#x3D; max{f<sub>(i+1，j)</sub>，f<sub>(i+1，j+1)</sub>} + a<sub>(i，j)</sub></p><p>答案：根据定义，答案就是 f<sub>(1，1)</sub> </p><h4 id="完整代码-5"><a href="#完整代码-5" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//解法一</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">510</span>, INF = <span class="number">2e9</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> a[N][N], f[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= i; ++j)</span><br><span class="line">            cin &gt;&gt; a[i][j];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt;= i + <span class="number">1</span>; ++j)</span><br><span class="line">            f[i][j] = -INF;</span><br><span class="line">    </span><br><span class="line">    f[<span class="number">1</span>][<span class="number">1</span>] = a[<span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= i; ++j) &#123;</span><br><span class="line">            f[i][j] = <span class="built_in">max</span>(f[i - <span class="number">1</span>][j - <span class="number">1</span>] + a[i][j], f[i - <span class="number">1</span>][j] + a[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> ans = -INF;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        ans = <span class="built_in">max</span>(ans, f[n][i]);</span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//解法二</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">510</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> a[N][N];</span><br><span class="line"><span class="type">int</span> f[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= i; ++j)</span><br><span class="line">            cin &gt;&gt; a[i][j];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        f[n][i] = a[n][i];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">1</span>; --i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= i; ++j)</span><br><span class="line">            f[i][j] = <span class="built_in">max</span> (f[i + <span class="number">1</span>][j],f[i + <span class="number">1</span>][j + <span class="number">1</span>]) + a[i][j];</span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; f[<span class="number">1</span>][<span class="number">1</span>] &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最长上升子序列"><a href="#最长上升子序列" class="headerlink" title="最长上升子序列"></a>最长上升子序列</h3><h4 id="题目描述-6"><a href="#题目描述-6" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230824213233994.png" alt="image-20230824213233994"></p><h4 id="思路分析-1"><a href="#思路分析-1" class="headerlink" title="思路分析"></a>思路分析</h4><p><code>状态表示</code></p><p><code>集合：</code>f[i] 表示从第一个数字开始算，以 a[i] 结尾的最大的上升序列。</p><p><code>属性：</code> Max</p><p><code>状态计算</code></p><p>默认 f[i] &#x3D; 1</p><p>j∈(1，2，……，i-1),，在a[j] &lt; a[i]时，f[i] &#x3D; max(f[i], f[j] + 1)。 </p><p><code>时间复杂度</code></p><p>O(n<sub>2</sub>) ：状态数(n) * 转移数(n)</p><h4 id="完整代码-6"><a href="#完整代码-6" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>, INF = <span class="number">2e9</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> a[N], f[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) cin &gt;&gt; a[i];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        f[i] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; i; ++j)</span><br><span class="line">            <span class="keyword">if</span>(a[j] &lt; a[i])</span><br><span class="line">                f[i] = <span class="built_in">max</span>(f[i], f[j] + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> ans = -INF;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) ans = <span class="built_in">max</span>(ans, f[i]);</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最长上升子序列-II"><a href="#最长上升子序列-II" class="headerlink" title="最长上升子序列 II"></a>最长上升子序列 II</h3><h4 id="题目描述-7"><a href="#题目描述-7" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230824213255672.png" alt="image-20230824213255672"></p><h4 id="完整代码-7"><a href="#完整代码-7" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> a[N], q[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) cin &gt;&gt; a[i];</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> len = <span class="number">0</span>;</span><br><span class="line">    q[<span class="number">0</span>] = <span class="number">-2e9</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="type">int</span> l = <span class="number">0</span>, r = len;</span><br><span class="line">        <span class="keyword">while</span>(l &lt; r) &#123;</span><br><span class="line">            <span class="type">int</span> mid = l + r + <span class="number">1</span> &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(q[mid] &lt; a[i]) l = mid;</span><br><span class="line">            <span class="keyword">else</span> r = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        len = <span class="built_in">max</span>(len, r + <span class="number">1</span>);</span><br><span class="line">        q[r + <span class="number">1</span>] = a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; len &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最长公共子序列"><a href="#最长公共子序列" class="headerlink" title="最长公共子序列"></a>最长公共子序列</h3><h4 id="题目描述-8"><a href="#题目描述-8" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230824213321082.png" alt="image-20230824213321082"></p><h4 id="思路图解"><a href="#思路图解" class="headerlink" title="思路图解"></a>思路图解</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230829180444997.png" alt="image-20230829180444997"></p><h4 id="完整代码-8"><a href="#完整代码-8" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">char</span> a[N], b[N];</span><br><span class="line"><span class="type">int</span> f[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; a + <span class="number">1</span> &gt;&gt; b + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; ++j) &#123;</span><br><span class="line">            f[i][j] = <span class="built_in">max</span>(f[i - <span class="number">1</span>][j], f[i][j - <span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">if</span>(a[i] == b[j]) f[i][j] = <span class="built_in">max</span>(f[i][j], f[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; f[n][m] &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最短编辑距离"><a href="#最短编辑距离" class="headerlink" title="最短编辑距离"></a>最短编辑距离</h3><h4 id="题目描述-9"><a href="#题目描述-9" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230824213352456.png" alt="image-20230824213352456"></p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入样例：</span><br><span class="line">10 </span><br><span class="line">AGTCTGACGC</span><br><span class="line">11 </span><br><span class="line">AGTAAGTAGGC</span><br><span class="line">输出样例：</span><br><span class="line">4</span><br></pre></td></tr></table></figure><h4 id="思路分析-2"><a href="#思路分析-2" class="headerlink" title="思路分析"></a>思路分析</h4><p><code>状态表示</code></p><p><code>集合</code>：g[i][j]表示 a[1<del>i] 变成 b[1</del>j] 的操作集合</p><p><code>属性</code>：Min</p><p><code>状态计算</code></p><p>以对 a 中的第i个字母操作不同进行状态划分</p><p>若是删除操作，则保证a[1<del>i-1] 与 b[1</del>j] 相同，即 f[i - 1][j] + 1</p><p>若是增加操作，则保证a[1<del>i] 与 b[1</del>j-1] 相同，即 f[i][j - 1] + 1</p><p>如果是替换操作，需考虑 a[i] 是否等于 b[j]，即 f[i - 1][j - 1] + (a[i] !&#x3D; b[j])</p><p>上述三者取 Min 即可</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230830145101869.png" alt="image-20230830145101869"></p><h4 id="完整代码-9"><a href="#完整代码-9" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">char</span> a[N], b[N];</span><br><span class="line"><span class="type">int</span> f[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; a + <span class="number">1</span> &gt;&gt; m &gt;&gt; b + <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= m; ++i) f[<span class="number">0</span>][i] = i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; ++i) f[i][<span class="number">0</span>] = i;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; ++j) &#123;</span><br><span class="line">            f[i][j] = <span class="built_in">min</span>(f[i - <span class="number">1</span>][j] + <span class="number">1</span>, f[i][j - <span class="number">1</span>] + <span class="number">1</span>);</span><br><span class="line">            f[i][j] = <span class="built_in">min</span>(f[i][j], f[i - <span class="number">1</span>][j - <span class="number">1</span>] + (a[i] != b[j]));</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; f[n][m] &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编辑距离"><a href="#编辑距离" class="headerlink" title="编辑距离"></a>编辑距离</h3><h4 id="题目描述-10"><a href="#题目描述-10" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230824213438091.png" alt="image-20230824213438091"></p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">输入样例：</span><br><span class="line">3 2</span><br><span class="line">abc</span><br><span class="line">acd</span><br><span class="line">bcd</span><br><span class="line">ab 1</span><br><span class="line">acbd 2</span><br><span class="line">输出样例：</span><br><span class="line">1</span><br><span class="line">3</span><br></pre></td></tr></table></figure><h4 id="完整代码-10"><a href="#完整代码-10" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">15</span>, M = <span class="number">1010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> f[N][N];</span><br><span class="line"><span class="type">char</span> str[M][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">edit_distance</span><span class="params">(<span class="type">char</span> a[], <span class="type">char</span> b[])</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> la = <span class="built_in">strlen</span>(a + <span class="number">1</span>), lb = <span class="built_in">strlen</span>(b + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= lb; i ++ ) f[<span class="number">0</span>][i] = i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= la; i ++ ) f[i][<span class="number">0</span>] = i;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= la; i ++ )</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= lb; j ++ ) &#123;</span><br><span class="line">            f[i][j] = <span class="built_in">min</span>(f[i - <span class="number">1</span>][j] + <span class="number">1</span>, f[i][j - <span class="number">1</span>] + <span class="number">1</span>);</span><br><span class="line">            f[i][j] = <span class="built_in">min</span>(f[i][j], f[i - <span class="number">1</span>][j - <span class="number">1</span>] + (a[i] != b[j]));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> f[la][lb];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ ) cin &gt;&gt; str[i] + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (m -- ) &#123;</span><br><span class="line">        <span class="type">char</span> s[N];</span><br><span class="line">        <span class="type">int</span> limit;</span><br><span class="line">        cin &gt;&gt; s + <span class="number">1</span> &gt;&gt; limit;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ )</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">edit_distance</span>(str[i], s) &lt;= limit)</span><br><span class="line">                ans ++ ;</span><br><span class="line"></span><br><span class="line">        cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="区间DP"><a href="#区间DP" class="headerlink" title="区间DP"></a>区间DP</h2><h3 id="石子合并"><a href="#石子合并" class="headerlink" title="石子合并"></a>石子合并</h3><h4 id="题目描述-11"><a href="#题目描述-11" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230824213522018.png" alt="image-20230824213522018"></p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入样例：</span><br><span class="line">4</span><br><span class="line">1 3 5 2</span><br><span class="line">输出样例：</span><br><span class="line">22</span><br></pre></td></tr></table></figure><h4 id="思路分析-3"><a href="#思路分析-3" class="headerlink" title="思路分析"></a>思路分析</h4><p><code>状态表示</code></p><p><code>集合</code>：f[i][j] 表示将 i 到 j 这一段石子合并成一堆的方案的集合</p><p><code>属性</code>： Min</p><p><code>状态计算</code></p><p>​i &lt; j 时，f[i][j] &#x3D; min<sub>i≤ k ≤j−1</sub>f[i][k] + f[k + 1][j] + (s[j] − s[i − 1])<br>​i &#x3D; j 时，f[i][i] &#x3D; 0 （合并一堆石子代价为 0）</p><h4 id="完整代码-11"><a href="#完整代码-11" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">310</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> s[N];<span class="comment">//前缀和数组</span></span><br><span class="line"><span class="type">int</span> f[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ ) &#123;</span><br><span class="line">        cin &gt;&gt; s[i];</span><br><span class="line">        s[i] += s[i - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> len = <span class="number">2</span>; len &lt;= n; len ++ )<span class="comment">//先枚举区间长度</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i + len - <span class="number">1</span> &lt;= n; i ++ ) &#123;</span><br><span class="line">            <span class="type">int</span> l = i, r = i + len - <span class="number">1</span>;</span><br><span class="line">            f[l][r] = <span class="number">1e8</span>;<span class="comment">//先定义成无穷大</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = l; k &lt; r; k ++ )</span><br><span class="line">                f[l][r] = <span class="built_in">min</span>(f[l][r], f[l][k] + f[k + <span class="number">1</span>][r] + s[r] - s[l - <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; f[<span class="number">1</span>][n] &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="计数类DP"><a href="#计数类DP" class="headerlink" title="计数类DP"></a>计数类DP</h2><h3 id="整数划分"><a href="#整数划分" class="headerlink" title="整数划分"></a>整数划分</h3><h4 id="题目描述-12"><a href="#题目描述-12" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230824213603906.png" alt="image-20230824213603906"></p><h4 id="思路图解-1"><a href="#思路图解-1" class="headerlink" title="思路图解"></a>思路图解</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230830152159152.png" alt="image-20230830152159152"></p><h4 id="完整代码-12"><a href="#完整代码-12" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//完全背包解法</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">状态表示：</span></span><br><span class="line"><span class="comment">f[i][j]表示只从1~i中选，且总和等于j的方案数</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">状态转移方程:</span></span><br><span class="line"><span class="comment">f[i][j] = f[i - 1][j] + f[i][j - i];</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>, mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> f[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">    f[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i; j &lt;= n; j ++ )</span><br><span class="line">            f[j] = (f[j] + f[j - i]) % mod;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; f[n] &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//其他解法</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">状态表示：</span></span><br><span class="line"><span class="comment">f[i][j]表示总和为i，总个数为j的方案数</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">状态转移方程：</span></span><br><span class="line"><span class="comment">f[i][j] = f[i - 1][j - 1] + f[i - j][j];</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>, mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> f[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">    f[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i ++ )</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= i; j ++ )</span><br><span class="line">            f[i][j] = (f[i - <span class="number">1</span>][j - <span class="number">1</span>] + f[i - j][j]) % mod;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ ) res = (res + f[n][i]) % mod;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数位统计DP"><a href="#数位统计DP" class="headerlink" title="数位统计DP"></a>数位统计DP</h2><h3 id="计数问题"><a href="#计数问题" class="headerlink" title="计数问题"></a>计数问题</h3><h4 id="题目描述-13"><a href="#题目描述-13" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230824213629139.png" alt="image-20230824213629139"></p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">输入样例：</span><br><span class="line">1 10</span><br><span class="line">44 497</span><br><span class="line">346 542</span><br><span class="line">1199 1748</span><br><span class="line">1496 1403</span><br><span class="line">1004 503</span><br><span class="line">1714 190</span><br><span class="line">1317 854</span><br><span class="line">1976 494</span><br><span class="line">1001 1960</span><br><span class="line">0 0</span><br><span class="line">输出样例：</span><br><span class="line">1 2 1 1 1 1 1 1 1 1</span><br><span class="line">85 185 185 185 190 96 96 96 95 93</span><br><span class="line">40 40 40 93 136 82 40 40 40 40</span><br><span class="line">115 666 215 215 214 205 205 154 105 106</span><br><span class="line">16 113 19 20 114 20 20 19 19 16</span><br><span class="line">107 105 100 101 101 197 200 200 200 200</span><br><span class="line">413 1133 503 503 503 502 502 417 402 412</span><br><span class="line">196 512 186 104 87 93 97 97 142 196</span><br><span class="line">398 1375 398 398 405 499 499 495 488 471</span><br><span class="line">294 1256 296 296 296 296 287 286 286 247</span><br></pre></td></tr></table></figure><h4 id="完整代码-13"><a href="#完整代码-13" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">(vector&lt;<span class="type">int</span>&gt; num, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;<span class="comment">//因为我们举的分类中，有需要求出一串数字中某个区间的数字，例如abcdefg有一个分类需要求出efg+1</span></span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = l; i &gt;= r; -- i) </span><br><span class="line">        res = res * <span class="number">10</span> + num[i];<span class="comment">//这里从小到大枚举是因为下面count的时候读入数据是从最低位读到最高位，那么此时在num里，最高位存的就是数字的最低位，那么假如我们要求efg，那就是从2算到0</span></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">power10</span><span class="params">(<span class="type">int</span> i)</span> </span>&#123;<span class="comment">//这里有power10是因为有一个分类需要求得十次方的值，例如abc*10^3</span></span><br><span class="line">    <span class="type">int</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> ( i -- ) res *= <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">count</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; num;<span class="comment">//num用来存储数中每一位的数字</span></span><br><span class="line">    <span class="keyword">while</span> (n) &#123;</span><br><span class="line">        num.<span class="built_in">push_back</span>(n % <span class="number">10</span>);<span class="comment">//get里有解释</span></span><br><span class="line">        n /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    n = num.<span class="built_in">size</span>();<span class="comment">//得出他的长度</span></span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">1</span> - !x; i &gt;= <span class="number">0</span>; -- i) &#123;<span class="comment">//这里需要注意，我们的长度需要减一，是因为num是从0开始存储，而长度是元素的个数，因此需要减1才能读到正确的数值，而！x出现的原因是因为我们不能让前导零出现，如果此时需要我们列举的是0出现的次数，那么我们自然不能让他出现在第一位，而是从第二位开始枚举</span></span><br><span class="line">        <span class="keyword">if</span> (i &lt; n - <span class="number">1</span>) &#123;<span class="comment">//其实这里可以不用if判断，因为for里面实际上就已经达成了if的判断，但为了方便理解还是加上if来理解，这里i要小于n-1的原因是因为我们不能越界只有7位数就最高从七位数开始读起</span></span><br><span class="line">            res += <span class="built_in">get</span>(num, n - <span class="number">1</span>, i + <span class="number">1</span>) * <span class="built_in">power10</span>(i);<span class="comment">//这里就是第一个分类，000~abc-1,那么此时情况个数就会是abc*10^3，这里的3取决于后面efg的长度，假如他是efgh，那么就是4</span></span><br><span class="line">            <span class="comment">//这里的n-1，i-1，自己将数组列出来然后根据分类标准就可以得出为什么l是n-1，r是i-1</span></span><br><span class="line">            <span class="keyword">if</span> (!x) res -= <span class="built_in">power10</span>(i);<span class="comment">//假如此时我们要列举的是0出现的次数，因为不能出现前导零，这样是不合法也不符合我们的分类情况，例如abcdefg我们列举d，那么他就得从001~abc-1，这样就不会直接到efg，而是会到0efg，因为前面不是前导零，自然就可以列举这个时候0出现的次数，所以要减掉1个power10</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//剩下的这两个就直接根据分类标准来就好了</span></span><br><span class="line">        <span class="keyword">if</span> (num[i] == x) res += <span class="built_in">get</span>(num, i - <span class="number">1</span>, <span class="number">0</span>) + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (num[i] &gt; x) res += <span class="built_in">power10</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="keyword">return</span> res;<span class="comment">//返回res，即出现次数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> a, b;</span><br><span class="line">    <span class="keyword">while</span> (cin &gt;&gt; a &gt;&gt; b, a) &#123;<span class="comment">//读入数据，无论a，b谁是0，都是终止输入，因为不会有数字从零开始（a，b&gt;0）</span></span><br><span class="line">        <span class="keyword">if</span> (a &gt; b) <span class="built_in">swap</span>(a, b);<span class="comment">//因为我们需要从小到大，因此如果a大于b，那么就得交换，使得a小于b</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">9</span>; ++ i )<span class="comment">//列举a和b之间的所有数字中 0∼9的出现次数</span></span><br><span class="line">            cout &lt;&lt; <span class="built_in">count</span>(b, i) - <span class="built_in">count</span>(a - <span class="number">1</span>, i) &lt;&lt; <span class="string">&#x27; &#x27;</span>;<span class="comment">//这里有点类似前缀和，要求a和b之间，那么就先求0到a i出现的次数，再求0到b i出现的次数，最后再相减就可以得出a和b之间i出现的次数</span></span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="状态压缩DP"><a href="#状态压缩DP" class="headerlink" title="状态压缩DP"></a>状态压缩DP</h2><h3 id="蒙德里安的梦想"><a href="#蒙德里安的梦想" class="headerlink" title="蒙德里安的梦想"></a>蒙德里安的梦想</h3><h4 id="题目描述-14"><a href="#题目描述-14" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230824213713331.png" alt="image-20230824213713331"></p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">输入样例：</span><br><span class="line">1 2</span><br><span class="line">1 3</span><br><span class="line">1 4</span><br><span class="line">2 2</span><br><span class="line">2 3</span><br><span class="line">2 4</span><br><span class="line">2 11</span><br><span class="line">4 11</span><br><span class="line">0 0</span><br><span class="line">输出样例：</span><br><span class="line">1</span><br><span class="line">0</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">5</span><br><span class="line">144</span><br><span class="line">51205</span><br></pre></td></tr></table></figure><h4 id="完整代码-14"><a href="#完整代码-14" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">12</span>, M = <span class="number">1</span> &lt;&lt; N;</span><br><span class="line"><span class="comment">//数据范围1~11,每一列的每一个空格有两种选择,放和不放,所以是 2^n</span></span><br><span class="line"></span><br><span class="line">LL f[N][M];</span><br><span class="line"><span class="comment">//f[i][j]表示 i-1 列的方案数已经确定,从 i-1 列伸出,并且第 i 列的状态是 j 的所有方案数</span></span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> st[M];</span><br><span class="line"><span class="comment">//第 i-2 列伸到 i-1 列的状态为 k ,是否能成功转移到第 i-1 列伸到 i 列的状态为 j</span></span><br><span class="line"><span class="comment">//st[j|k] = true 表示能成功转移</span></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//预处理st数组</span></span><br><span class="line">    <span class="keyword">while</span> (cin &gt;&gt; n &gt;&gt; m, n || m) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1</span> &lt;&lt; n; ++ i) &#123;</span><br><span class="line">           <span class="comment">//第 i-2 列伸到 i-1 列的状态为 k ,能成功转移到第 i-1 列伸到 i 列的状态为 j</span></span><br><span class="line">            st[i] = <span class="literal">true</span>;</span><br><span class="line">            <span class="type">int</span> cnt = <span class="number">0</span>;<span class="comment">//记录一列中0的个数</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; ++ j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i &gt;&gt; j &amp; <span class="number">1</span>) &#123;<span class="comment">//通过位操作,i状态下j行是否放置方格,0就是不放,1就是放</span></span><br><span class="line">                    <span class="keyword">if</span> (cnt &amp; <span class="number">1</span>) &#123;</span><br><span class="line">                        <span class="comment">//如果放置小方块使得连续的空白格子数成为奇数,这样的状态就是不行的.</span></span><br><span class="line">                        st[i] = <span class="literal">false</span>;</span><br><span class="line">                        cnt = <span class="number">0</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">else</span> ++ cnt;<span class="comment">//不放置小方格</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (cnt &amp; <span class="number">1</span>) st[i] = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//初始化状态数组f</span></span><br><span class="line">        <span class="built_in">memset</span>(f, <span class="number">0</span>, <span class="keyword">sizeof</span> f);</span><br><span class="line"></span><br><span class="line"><span class="comment">//棋盘是从第0列开始,没有-1列,所以第0列第0行,不会有延伸出来的小方块.没有横着摆放的小方块,所有小方块都是竖着摆放的，这种状态记录为一种方案</span></span><br><span class="line">        f[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//遍历每一列</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++ i) &#123;</span><br><span class="line">            <span class="comment">//枚举i列每一种状态</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">1</span> &lt;&lt; n; ++ j) &#123;</span><br><span class="line">                <span class="comment">//枚举i-1列每一种状态</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">1</span> &lt;&lt; n; ++ k) &#123;</span><br><span class="line">                    <span class="comment">//f[i-1][k] 成功转到 f[i][j]</span></span><br><span class="line">                    <span class="keyword">if</span> ((j &amp; k) == <span class="number">0</span> &amp;&amp; st[j | k]) &#123;</span><br><span class="line">                        f[i][j] += f[i - <span class="number">1</span>][k]; </span><br><span class="line">                        <span class="comment">//那么这种状态下它的方案数等于之前每种k状态数目的和</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">/*棋盘一共有 0 ~ m-1 列</span></span><br><span class="line"><span class="comment">f[i][j]表示 前i-1列的方案数已经确定,从i-1列伸出,并且第i列的状态是j的所有方案数</span></span><br><span class="line"><span class="comment">f[m][0]表示 前m-1列的方案数已经确定,从m-1列伸出,并且第m列的状态是0的所有方案数</span></span><br><span class="line"><span class="comment">也就是m列不放小方格，前m-1列已经完全摆放好并且不伸出来的状态</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">        cout &lt;&lt; f[m][<span class="number">0</span>] &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最短Hamilton路径"><a href="#最短Hamilton路径" class="headerlink" title="最短Hamilton路径"></a>最短Hamilton路径</h3><h4 id="题目描述-15"><a href="#题目描述-15" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230824213756491.png" alt="image-20230824213756491"></p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">输入样例：</span><br><span class="line">5</span><br><span class="line">0 2 4 5 1</span><br><span class="line">2 0 6 5 3</span><br><span class="line">4 6 0 8 3</span><br><span class="line">5 5 8 0 5</span><br><span class="line">1 3 3 5 0</span><br><span class="line">输出样例：</span><br><span class="line">18</span><br></pre></td></tr></table></figure><h4 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230924190133198.png" alt="image-20230924190133198"></p><p>时间复杂度：O(2<sup>n</sup>n<sup>2</sup>)</p><p>Q<sub>1</sub>：f[i][j] 中 i 和 j 具体表示什么?</p><p>A<sub>1</sub>：i 为一个二进制数，每一位分别表示是否经过该位上的点；j表示从0号点开始，最后在j号点落脚的最短路径。</p><p>Q<sub>2</sub>：为什么更新状态转移方程时需要将 i 减去 2<sup>j</sup> ？</p><p>A<sub>2</sub>：i的每一位分别表示是否经过该位上的点。</p><p>f[i][j]&#x3D;min(f[i][j]，f[i−2<sup>j</sup>][k] + w[k][j])，在调用 f[i−2<sup>j</sup>][k] 时，这段路径的落脚点为k点，不一定经过j点，所以需要把j位改成0（因为i表示的二进制数中f[i][j]这段路径经过了j，第j位为1）</p><p>Q<sub>3</sub>：最后的答案为什么存在f[2<sup>n</sup> − 1][n − 1]中？</p><p>A<sub>3</sub>：i &#x3D; 2<sup>n</sup> - 1表示有n个1，也就是所有的点都走完了，j &#x3D; n - 1，表示最后落脚于 n - 1号点。</p><h4 id="完整代码-15"><a href="#完整代码-15" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">20</span>, M = <span class="number">1</span> &lt;&lt; N;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> f[M][N], weight[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++ i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; ++ j)</span><br><span class="line">            cin &gt;&gt; weight[i][j];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">memset</span>(f, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> f);</span><br><span class="line">    f[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1</span> &lt;&lt; n; ++ i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; ++ j)</span><br><span class="line">            <span class="keyword">if</span>(i &gt;&gt; j &amp; <span class="number">1</span>)</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; n; ++ k)</span><br><span class="line">                    <span class="keyword">if</span> (i - (<span class="number">1</span> &lt;&lt; j) &gt;&gt; k &amp; <span class="number">1</span>)</span><br><span class="line">                        f[i][j] = <span class="built_in">min</span>(f[i][j], f[i - (<span class="number">1</span> &lt;&lt; j)][k] + weight[k][j]);</span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; f[(<span class="number">1</span> &lt;&lt; n) - <span class="number">1</span>][n - <span class="number">1</span>] &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="树形DP"><a href="#树形DP" class="headerlink" title="树形DP"></a>树形DP</h2><h3 id="没有上司的舞会"><a href="#没有上司的舞会" class="headerlink" title="没有上司的舞会"></a>没有上司的舞会</h3><h4 id="题目描述-16"><a href="#题目描述-16" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230824213837759.png" alt="image-20230824213837759"></p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">输入样例：</span><br><span class="line">7</span><br><span class="line">1</span><br><span class="line">1</span><br><span class="line">1</span><br><span class="line">1</span><br><span class="line">1</span><br><span class="line">1</span><br><span class="line">1</span><br><span class="line">1 3</span><br><span class="line">2 3</span><br><span class="line">6 4</span><br><span class="line">7 4</span><br><span class="line">4 5</span><br><span class="line">3 5</span><br><span class="line">输出样例：</span><br><span class="line">5</span><br></pre></td></tr></table></figure><h4 id="思维图解"><a href="#思维图解" class="headerlink" title="思维图解"></a>思维图解</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230923201433952.png" alt="image-20230923201433952"></p><h4 id="完整代码-16"><a href="#完整代码-16" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">6010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> joy[N];</span><br><span class="line"><span class="type">int</span> h[N], e[N], ne[N], idx;</span><br><span class="line"><span class="type">int</span> f[N][<span class="number">2</span>];</span><br><span class="line"><span class="type">bool</span> has_father[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">    e[idx] = b, ne[idx] = h[a], h[a] = idx ++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">    f[u][<span class="number">1</span>] = joy[u];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = h[u]; i != <span class="number">-1</span>; i = ne[i]) &#123;</span><br><span class="line">        <span class="type">int</span> j = e[i];</span><br><span class="line">        <span class="built_in">dfs</span>(j);</span><br><span class="line">        <span class="comment">//状态转移</span></span><br><span class="line">        f[u][<span class="number">1</span>] += f[j][<span class="number">0</span>];</span><br><span class="line">        f[u][<span class="number">0</span>] += <span class="built_in">max</span>(f[j][<span class="number">0</span>], f[j][<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i)</span><br><span class="line">        cin &gt;&gt; joy[i];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="keyword">sizeof</span> h);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; ++ i) &#123;</span><br><span class="line">        <span class="type">int</span> a, b;</span><br><span class="line">        cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">        has_father[a] = <span class="literal">true</span>;</span><br><span class="line">        <span class="built_in">add</span>(b, a);<span class="comment">//建边</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//找到根节点</span></span><br><span class="line">    <span class="type">int</span> root = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(has_father[root]) ++ root;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">dfs</span>(root);</span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; <span class="built_in">max</span>(f[root][<span class="number">0</span>], f[root][<span class="number">1</span>]) &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="记忆化搜索"><a href="#记忆化搜索" class="headerlink" title="记忆化搜索"></a>记忆化搜索</h2><h3 id="滑雪"><a href="#滑雪" class="headerlink" title="滑雪"></a>滑雪</h3><h4 id="题目描述-17"><a href="#题目描述-17" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230824213928481.png" alt="image-20230824213928481"></p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">输入格式</span><br><span class="line">第一行包含两个整数 R 和 C。</span><br><span class="line">接下来 R 行，每行包含 C 个整数，表示完整的二维矩阵。</span><br><span class="line"></span><br><span class="line">输出格式</span><br><span class="line">输出一个整数，表示可完成的最长滑雪长度。</span><br><span class="line"></span><br><span class="line">数据范围</span><br><span class="line">1 ≤ R, C ≤ 300, 0 ≤ 矩阵中整数 ≤ 10000</span><br><span class="line"></span><br><span class="line">输入样例：</span><br><span class="line">5 5</span><br><span class="line">1 2 3 4 5</span><br><span class="line">16 17 18 19 6</span><br><span class="line">15 24 25 20 7</span><br><span class="line">14 23 22 21 8</span><br><span class="line">13 12 11 10 9</span><br><span class="line"></span><br><span class="line">输出样例：</span><br><span class="line">25</span><br></pre></td></tr></table></figure><h4 id="算法分析-1"><a href="#算法分析-1" class="headerlink" title="算法分析"></a>算法分析</h4><p>本来是一个<code>dfs</code>的过程，遍历所有的位置，找到从当前位置往下走的最大路径，再取最大值，可是这样做会有很多重复的位置被重新计算过，因此可以利用空间换时间的思想，把遍历过的位置往下走的路径的最大值进行记录，这就是<code>记忆化搜索</code></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230923193621931.png" alt="image-20230923193621931"></p><p><code>时间复杂度</code>：O(n<sup>2</sup>)</p><h4 id="完整代码-17"><a href="#完整代码-17" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">310</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> R, C;</span><br><span class="line"><span class="type">int</span> f[N][N];</span><br><span class="line"><span class="type">int</span> h[N][N];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> dir[<span class="number">4</span>][<span class="number">2</span>] = &#123;&#123;<span class="number">-1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">1</span>&#125;, &#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">-1</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dp</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> &amp;v = f[x][y];<span class="comment">//把f[x][y]简化成了v，如果v发生变化，f[x][y]也会随之变化</span></span><br><span class="line">    <span class="keyword">if</span> (v != <span class="number">-1</span>) <span class="keyword">return</span> v;<span class="comment">//已经计算过，直接返回答案</span></span><br><span class="line">    v = <span class="number">1</span>;<span class="comment">//必须初始化为1</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++ i) &#123;</span><br><span class="line">        <span class="type">int</span> dx = x + dir[i][<span class="number">0</span>], dy = y + dir[i][<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (dx &gt;= <span class="number">1</span> &amp;&amp; dx &lt;= R &amp;&amp; dy &gt;= <span class="number">1</span> &amp;&amp; dy &lt;= C &amp;&amp; h[dx][dy] &lt; h[x][y])</span><br><span class="line">            v = <span class="built_in">max</span>(v, <span class="built_in">dp</span>(dx, dy) + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; R &gt;&gt; C;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= R; ++ i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= C; ++ j)</span><br><span class="line">            cin &gt;&gt; h[i][j];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">memset</span>(f, <span class="number">-1</span>, <span class="keyword">sizeof</span> f);</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= R; ++ i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= C; ++ j)</span><br><span class="line">            ans = <span class="built_in">max</span>(ans, <span class="built_in">dp</span>(i, j));</span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> AcWing </category>
          
          <category> 算法基础 </category>
          
          <category> 动态规划 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
            <tag> 算法基础课 </tag>
            
            <tag> 背包问题 </tag>
            
            <tag> 线性DP </tag>
            
            <tag> 区间DP </tag>
            
            <tag> 计数类DP </tag>
            
            <tag> 数位统计DP </tag>
            
            <tag> 状态压缩DP </tag>
            
            <tag> 树形DP </tag>
            
            <tag> 记忆化搜索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typora-数学公式</title>
      <link href="/markdown/math-equation/%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%E6%B1%87%E6%80%BB/"/>
      <url>/markdown/math-equation/%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="数学公式汇总"><a href="#数学公式汇总" class="headerlink" title="数学公式汇总"></a>数学公式汇总</h1><p>[toc]</p><h2 id="公式块与行内公式的添加"><a href="#公式块与行内公式的添加" class="headerlink" title="公式块与行内公式的添加"></a>公式块与行内公式的添加</h2><h3 id="公式块"><a href="#公式块" class="headerlink" title="公式块"></a>公式块</h3><p>效果：创建独立的一块公式区域</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/%E5%85%AC%E5%BC%8F%E5%9D%97.png" alt="公式块"></p><p><strong>方法一：</strong> 左上角点击“段落”，再点击“公式块”</p><p><strong>方法二：</strong> 在文中输入$$，再按下回车</p><h3 id="行内公式"><a href="#行内公式" class="headerlink" title="行内公式"></a>行内公式</h3><p>效果：将公式嵌入文字内，不会单独成行</p><p><strong>方法一：</strong> 在$$的中间加入需要的公式</p><p><strong>方法二：</strong> 先按 $ ，再按 “esc”（键盘左上角）</p><h2 id="常用符号的代码"><a href="#常用符号的代码" class="headerlink" title="常用符号的代码"></a>常用符号的代码</h2><h3 id="上下标，正负无穷"><a href="#上下标，正负无穷" class="headerlink" title="上下标，正负无穷"></a>上下标，正负无穷</h3><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230812164429559.png" alt="image-20230812164429559"></p><h3 id="加减乘，分式，根号，省略号"><a href="#加减乘，分式，根号，省略号" class="headerlink" title="加减乘，分式，根号，省略号"></a>加减乘，分式，根号，省略号</h3><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230812164448346.png" alt="image-20230812164448346"></p><h3 id="三角函数"><a href="#三角函数" class="headerlink" title="三角函数"></a>三角函数</h3><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230812164506457.png" alt="image-20230812164506457"></p><h3 id="矢量，累加累乘，极限"><a href="#矢量，累加累乘，极限" class="headerlink" title="矢量，累加累乘，极限"></a>矢量，累加累乘，极限</h3><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230812164521371.png" alt="image-20230812164521371"></p><h3 id="希腊字母"><a href="#希腊字母" class="headerlink" title="希腊字母"></a>希腊字母</h3><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230812164536746.png" alt="image-20230812164536746"></p><h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h3><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230812164605580.png" alt="image-20230812164605580"></p><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230812164621287.png" alt="image-20230812164621287"></p><h2 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h2><h3 id="简单矩阵"><a href="#简单矩阵" class="headerlink" title="简单矩阵"></a>简单矩阵</h3><p><strong>语法格式：</strong> 使用<code>\begin&#123;matrix&#125;…\end&#123;matrix&#125;</code>生成， 每一行以<code>\\</code>结尾表示换行，元素间以<code>&amp;</code>间隔，式子的表示序号<code>\tag&#123;1&#125;</code>（右边的序号）。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">\begin&#123;matrix&#125;</span><br><span class="line"> 1 &amp; 2 &amp; 3 \\</span><br><span class="line"> 4 &amp; 5 &amp; 6 \\</span><br><span class="line"> 7 &amp; 8 &amp; 9 </span><br><span class="line">\end&#123;matrix&#125; \tag&#123;1&#125;</span><br></pre></td></tr></table></figure><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230812164648967.png" alt="image-20230812164648967"></p><h3 id="带左右括号的矩阵-大中小括号"><a href="#带左右括号的矩阵-大中小括号" class="headerlink" title="带左右括号的矩阵(大中小括号)"></a>带左右括号的矩阵(大中小括号)</h3><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><p>在<code>\begin&#123;&#125;</code>之前和<code>\end&#123;&#125;</code>之后添加左右括号的代码。</p><h5 id="大括号"><a href="#大括号" class="headerlink" title="大括号"></a>大括号</h5><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">\left\&#123;</span><br><span class="line"> \begin&#123;matrix&#125;</span><br><span class="line">   1 &amp; 2 &amp; 3 \\</span><br><span class="line">   4 &amp; 5 &amp; 6 \\</span><br><span class="line">   7 &amp; 8 &amp; 9</span><br><span class="line">  \end&#123;matrix&#125;</span><br><span class="line">\right\&#125; \tag&#123;2&#125;</span><br></pre></td></tr></table></figure><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230812164707717.png" alt="image-20230812164707717"></p><h5 id="中括号"><a href="#中括号" class="headerlink" title="中括号"></a>中括号</h5><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">\left[</span><br><span class="line"> \begin&#123;matrix&#125;</span><br><span class="line">   1 &amp; 2 &amp; 3 \\</span><br><span class="line">   4 &amp; 5 &amp; 6 \\</span><br><span class="line">   7 &amp; 8 &amp; 9</span><br><span class="line">  \end&#123;matrix&#125;</span><br><span class="line">\right] \tag&#123;3&#125;</span><br></pre></td></tr></table></figure><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230812164729280.png" alt="image-20230812164729280"></p><h5 id="小括号"><a href="#小括号" class="headerlink" title="小括号"></a>小括号</h5><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">\left(</span><br><span class="line"> \begin&#123;matrix&#125;</span><br><span class="line">   1 &amp; 2 &amp; 3 \\</span><br><span class="line">   4 &amp; 5 &amp; 6 \\</span><br><span class="line">   7 &amp; 8 &amp; 9</span><br><span class="line">  \end&#123;matrix&#125;</span><br><span class="line">\right) \tag&#123;4&#125;</span><br></pre></td></tr></table></figure><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230812164747476.png" alt="image-20230812164747476"></p><h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><p>改变<code>\begin&#123;matrix&#125;</code>和<code>\end&#123;matrix&#125;</code>中<code>&#123;matrix&#125;</code></p><h5 id="大括号-1"><a href="#大括号-1" class="headerlink" title="大括号"></a>大括号</h5><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">\begin&#123;Bmatrix&#125;</span><br><span class="line">   1 &amp; 2 &amp; 3 \\</span><br><span class="line">   4 &amp; 5 &amp; 6 \\</span><br><span class="line">   7 &amp; 8 &amp; 9</span><br><span class="line">\end&#123;Bmatrix&#125; \tag&#123;6&#125;</span><br></pre></td></tr></table></figure><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230812164805465.png" alt="image-20230812164805465"></p><h5 id="中括号-1"><a href="#中括号-1" class="headerlink" title="中括号"></a>中括号</h5><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">\begin&#123;bmatrix&#125;</span><br><span class="line">   1 &amp; 2 &amp; 3 \\</span><br><span class="line">   4 &amp; 5 &amp; 6 \\</span><br><span class="line">   7 &amp; 8 &amp; 9</span><br><span class="line"> \end&#123;bmatrix&#125; \tag&#123;6&#125;</span><br></pre></td></tr></table></figure><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230812164825326.png" alt="image-20230812164825326"></p><h3 id="包含希腊字母与省略号"><a href="#包含希腊字母与省略号" class="headerlink" title="包含希腊字母与省略号"></a>包含希腊字母与省略号</h3><p><em><strong>语法格式：</strong></em> 行省略号<code>\cdots</code>，列省略号<code>\vdots</code>，斜向省略号（左上至右下）<code>\ddots</code></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">\left\&#123;</span><br><span class="line"> \begin&#123;matrix&#125;</span><br><span class="line"> 1      &amp; 2        &amp; \cdots &amp; 5        \\</span><br><span class="line"> 6      &amp; 7        &amp; \cdots &amp; 10       \\</span><br><span class="line"> \vdots &amp; \vdots   &amp; \ddots &amp; \vdots   \\</span><br><span class="line"> \alpha &amp; \alpha+1 &amp; \cdots &amp; \alpha+4 </span><br><span class="line"> \end&#123;matrix&#125;</span><br><span class="line">\right\&#125;\tag&#123;7&#125;</span><br></pre></td></tr></table></figure><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230812164838514.png" alt="image-20230812164838514"></p><h2 id="公示序号"><a href="#公示序号" class="headerlink" title="公示序号"></a>公示序号</h2><p><em><strong>语法格式：</strong></em> \tag{序号}</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">\tal</span>&#123;……&#125;</span><br></pre></td></tr></table></figure><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230812164906509.png" alt="image-20230812164906509"></p><h2 id="行列式"><a href="#行列式" class="headerlink" title="行列式"></a>行列式</h2><p>行列式相关语法与矩阵类似</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">\begin&#123;vmatrix&#125;</span><br><span class="line">   1 &amp; 2 &amp; 3 \\</span><br><span class="line">   4 &amp; 5 &amp; 6 \\</span><br><span class="line">   7 &amp; 8 &amp; 9</span><br><span class="line">\end&#123;vmatrix&#125;\tag&#123;8&#125;</span><br></pre></td></tr></table></figure><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230812164943202.png" alt="image-20230812164943202"></p><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><h3 id="简易表格"><a href="#简易表格" class="headerlink" title="简易表格"></a>简易表格</h3><p>&#x3D;&#x3D;语法格式：&#x3D;&#x3D;</p><p><strong>开头结尾</strong>： <code>\begin&#123;array&#125;</code> ， <code>\end&#123;array&#125;</code></p><p><strong>定义式</strong>：例：<code>&#123;|c|c|c|&#125;</code>，其中<code>c</code> <code>l</code> <code>r</code> 分别代表居中、左对齐及右对齐。</p><p><strong>分割线</strong>：①<strong>竖直分割线</strong>：在定义式中插入 <code>|</code>， （<code>||</code>表示两条竖直分割线）。</p><p>②<strong>水平分割线</strong>：在下一行输入前插入 <code>\hline</code>，以下图真值表为例。</p><p>其他：每行元素间均须要插入 <code>&amp;</code> ，每行元素以 <code>\\</code> 结尾。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">\begin&#123;array&#125;&#123;|c|c|c|&#125;</span><br><span class="line">\hline 2&amp;9&amp;4\\</span><br><span class="line">\hline 7&amp;5&amp;3\\</span><br><span class="line">\hline 6&amp;1&amp;8\\</span><br><span class="line">\hline</span><br><span class="line">\end&#123;array&#125;\tag&#123;9&#125;</span><br></pre></td></tr></table></figure><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230812165011885.png" alt="image-20230812165011885"></p><h3 id="真值表"><a href="#真值表" class="headerlink" title="真值表"></a>真值表</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">\begin&#123;array&#125;&#123;cc|c&#125;</span><br><span class="line">       A&amp;B&amp;F\\</span><br><span class="line">\hline 0&amp;0&amp;0\\</span><br><span class="line">       0&amp;1&amp;1\\</span><br><span class="line">       1&amp;0&amp;1\\</span><br><span class="line">       1&amp;1&amp;1\\</span><br><span class="line">\end&#123;array&#125; \tag&#123;10&#125;</span><br></pre></td></tr></table></figure><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230812165024508.png" alt="image-20230812165024508"></p><h2 id="多行等式对齐"><a href="#多行等式对齐" class="headerlink" title="多行等式对齐"></a>多行等式对齐</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">\begin&#123;aligned&#125;</span><br><span class="line">a &amp;= b + c \\</span><br><span class="line">  &amp;= d + e + f</span><br><span class="line">\end&#123;aligned&#125;</span><br></pre></td></tr></table></figure><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230812165035746.png" alt="image-20230812165035746"></p><h2 id="方程组、条件表达式"><a href="#方程组、条件表达式" class="headerlink" title="方程组、条件表达式"></a>方程组、条件表达式</h2><h3 id="方程组"><a href="#方程组" class="headerlink" title="方程组"></a>方程组</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">\begin&#123;cases&#125;</span><br><span class="line">3x + 5y +  z \\</span><br><span class="line">7x - 2y + 4z \\</span><br><span class="line">-6x + 3y + 2z</span><br><span class="line">\end&#123;cases&#125; \tag&#123;12&#125;</span><br></pre></td></tr></table></figure><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230812165057033.png" alt="image-20230812165057033"></p><h3 id="条件表达式"><a href="#条件表达式" class="headerlink" title="条件表达式"></a>条件表达式</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">f(n) =</span><br><span class="line">\begin&#123;cases&#125; </span><br><span class="line">n/2,  &amp; \text&#123;if &#125;n\text&#123; is even&#125; \\</span><br><span class="line">3n+1, &amp; \text&#123;if &#125;n\text&#123; is odd&#125;</span><br><span class="line">\end&#123;cases&#125; \tag&#123;13&#125;</span><br></pre></td></tr></table></figure><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230812165110418.png" alt="image-20230812165110418"></p><h2 id="间隔（大小空格、紧贴）"><a href="#间隔（大小空格、紧贴）" class="headerlink" title="间隔（大小空格、紧贴）"></a>间隔（大小空格、紧贴）</h2><p><strong>语法格式：</strong></p><p>紧贴<code>\!</code></p><p>无空格 小空格<code>\,</code> 中空格<code>\;</code> 大空格<code>\</code></p><p>真空格<code>\quad</code> 双真空格<code>\qquad</code></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a\!b + ab + a\,b + a\;b + a\ b + a\quad b + a\qquad b</span><br></pre></td></tr></table></figure><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230812165126426.png" alt="image-20230812165126426"></p>]]></content>
      
      
      <categories>
          
          <category> markdown </category>
          
          <category> math equation </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown 相关语法</title>
      <link href="/markdown/%E7%9B%B8%E5%85%B3%E8%AF%AD%E6%B3%95/Markdown%20%E7%9B%B8%E5%85%B3%E8%AF%AD%E6%B3%95/"/>
      <url>/markdown/%E7%9B%B8%E5%85%B3%E8%AF%AD%E6%B3%95/Markdown%20%E7%9B%B8%E5%85%B3%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="Markdown-相关语法"><a href="#Markdown-相关语法" class="headerlink" title="Markdown 相关语法"></a>Markdown 相关语法</h1><p>[TOC]</p><h2 id="有关级数标题（1到6级标题）"><a href="#有关级数标题（1到6级标题）" class="headerlink" title="有关级数标题（1到6级标题）"></a>有关级数标题（1到6级标题）</h2><p>直接选中文本，鼠标右键 -&gt; 段落 -&gt; X级标题</p><p>直接对应数量的#加上空格即可</p><p>使用快捷键： Ctrl + 上方键盘数字1到6</p><h2 id="有关字体-加粗-（-）"><a href="#有关字体-加粗-（-）" class="headerlink" title="有关字体_加粗 （**）"></a>有关字体_加粗 （**）</h2><p>直接选中文本，鼠标右键 -&gt; B加粗</p><p>加粗语法格式：** **（中间为待加粗的文本）</p><p>使用快捷键： Ctrl + B</p><h2 id="有关字体-倾斜（-）"><a href="#有关字体-倾斜（-）" class="headerlink" title="有关字体_倾斜（*）"></a>有关字体_倾斜（*）</h2><p>直接选中文本，鼠标右键 -&gt; I倾斜</p><p>倾斜语法格式： * *（中间为待倾斜的文本）</p><p>使用快捷键： Ctrl + I</p><h2 id="有关字体-倾斜并加粗（-）"><a href="#有关字体-倾斜并加粗（-）" class="headerlink" title="有关字体_倾斜并加粗（***）"></a>有关字体_倾斜并加粗（***）</h2><p>直接选中文本，鼠标右键 -&gt; B加粗 -&gt; I倾斜</p><p><strong>语法格式：（用法类似于上面，但为左右均三个*）</strong></p><p>使用快捷键： Ctrl + I 然后 Ctrl + B（顺序不分前后）</p><h2 id="有关字体-高亮"><a href="#有关字体-高亮" class="headerlink" title="有关字体_高亮(&#x3D;&#x3D;)"></a>有关字体_高亮(&#x3D;&#x3D;)</h2><p><strong>语法格式：&#x3D;&#x3D; &#x3D;&#x3D;（中间为高亮文本）</strong></p><p>&#x3D;&#x3D;key&#x3D;&#x3D;</p><h2 id="有关字体-上标与下标-and"><a href="#有关字体-上标与下标-and" class="headerlink" title="有关字体_上标与下标(^and~)"></a>有关字体_上标与下标(^and~)</h2><p>语法格式：用 <code>^</code> 来包裹上标内容，用 <code>~</code> 来包裹下标内容</p><p>H<del>2</del>O和 H^2^O</p><h2 id="有关字体-中划线（-）"><a href="#有关字体-中划线（-）" class="headerlink" title="有关字体_中划线（~~）"></a>有关字体_中划线（~~）</h2><p>此功能不支持快捷键和右键菜单</p><p><strong>语法格式： 在文本前后加上~~</strong></p><h2 id="有关字体-分割线（—）"><a href="#有关字体-分割线（—）" class="headerlink" title="有关字体_分割线（—）"></a>有关字体_分割线（—）</h2><p><em><em>语法： 三个-或者三个_或者三个</em> 加回车即可</em>*</p><p>下面是三个-的分割线效果</p><hr><p>下面是三个_的分割线效果</p><hr><p>下面是三个***的分割线效果</p><hr><p>还可以右键 -&gt; 插入 -&gt; 水平分割线</p><h2 id="有关引用（-）"><a href="#有关引用（-）" class="headerlink" title="有关引用（&gt;）"></a>有关引用（&gt;）</h2><p>右键 -&gt; 引用按钮 创建引用框</p><p><strong>语法格式：&gt;加上空格加上文本</strong></p><p>使用快捷键： Ctrl + shift + Q 快速生成一个引用框</p><p>points：如果在引用文本后加回车会默认继续处于引用状态，再敲一次回车即可退出引用</p><p>同时：引用框可以无限嵌套 嵌套几层便几个&gt;</p><h2 id="有关图片"><a href="#有关图片" class="headerlink" title="有关图片(! + [] + () )"></a>有关图片(! + [] + () )</h2><p>points: 注意是英文状态下</p><p>[] 中即为图片的名称 默认为alt；</p><p>()中即为图片的位置 分为本地位置和网络图片 </p><p>右键 -&gt; 插入 -&gt; 图片</p><p>使用快捷键： Ctrl + shift + I</p><p>本地导入可以直接拖入即可</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/%E8%AF%AD%E6%B3%95%E6%A8%A1%E6%9D%BF.png" alt="语法模板"></p><h2 id="有关超链接"><a href="#有关超链接" class="headerlink" title="有关超链接(  )"></a>有关超链接( <a href=""></a> )</h2><p><strong>语法格式：[链接名] + (href)</strong></p><p>如：<a href="https://www.baidu.com/">超链接</a></p><h2 id="有关列表（-）"><a href="#有关列表（-）" class="headerlink" title="有关列表（- ）"></a>有关列表（- ）</h2><p>右键菜单 选择 无序列表或者有序列表</p><p><strong>语法格式：</strong></p><p>无序列表：-或者+或者*（+空格）项目一</p><p>有序列表：1.（+空格）项目一</p><p>快捷键： Ctrl + shift + [ 生成有序列表Ctrl + shift + ] 快速生成无序列表</p><p>points：在列表中创建子列表：在子列表前按下Tab键</p><h2 id="有关表格（-单元格-）"><a href="#有关表格（-单元格-）" class="headerlink" title="有关表格（|单元格|）"></a>有关表格（|单元格|）</h2><p>建议直接右键插入</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/%E8%A1%A8%E6%A0%BC%E8%AF%AD%E6%B3%95%E6%A0%BC%E5%BC%8F.png" alt="表格语法格式"></p><h2 id="有关代码（-）"><a href="#有关代码（-）" class="headerlink" title="有关代码（&#96;）"></a>有关代码（&#96;）</h2><p><strong>代码块语法格式： ‘代码块’</strong></p><p>points：可以理解为注释，不会被识别为任何语言，即不会被渲染</p><h2 id="有关代码块（-）"><a href="#有关代码块（-）" class="headerlink" title="有关代码块（&#96;&#96;&#96;&#96;）"></a>有关代码块（&#96;&#96;&#96;&#96;）</h2><p>&#96; 为 反单引号</p><p><strong>代码块的语法格式：’’’’ + 语言名</strong></p><p>也可用右键菜单</p><h2 id="有关表情符号-content"><a href="#有关表情符号-content" class="headerlink" title="有关表情符号(: + content + :)"></a>有关表情符号(: + content + :)</h2><p><strong>语法格式为：: + content + :</strong></p><p>such as：</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230812164321325.png" alt="image-20230812164321325"></p><h2 id="内联数学公式"><a href="#内联数学公式" class="headerlink" title="内联数学公式"></a>内联数学公式</h2><p><strong>语法格式：使用 <code>$</code> 来包裹TeX命令</strong></p><p>如要触发内联公式的预览提示功能：输入“$”, 然后按 <code>ESC</code> 键, 然后输入TeX命令，如下图</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/inline-math.gif" alt="inline-math"></p>]]></content>
      
      
      <categories>
          
          <category> markdown </category>
          
          <category> 相关语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python学习笔记</title>
      <link href="/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/Python/"/>
      <url>/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/Python/</url>
      
        <content type="html"><![CDATA[<h1 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h1><p><a href="https://docs.python.org/zh-cn/3/tutorial/index.html">Python官方文档</a></p><p>[toc]</p><h2 id="变量命名规则"><a href="#变量命名规则" class="headerlink" title="变量命名规则"></a>变量命名规则</h2><ol><li>只能由<strong>字母</strong>、<strong>数字</strong>、<strong>下划线</strong>组成</li><li>不能以数字开头</li><li>不能有空格</li></ol><p><strong>大小写敏感</strong></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230812153238580.png" alt="image-20230812153238580"></p><p><strong>不能以保留字命名</strong></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230812153502234.png" alt="image-20230812153502234"></p><p>在 Python 3 中，可以用中文作为变量名，非 ASCII 标识符也是允许的了。但考虑到编码问题，一般还是采用英文命名法（下划线法、驼峰命名法）</p><h2 id="交互模式"><a href="#交互模式" class="headerlink" title="交互模式"></a>交互模式</h2><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230812235140381.png" alt="image-20230812235140381"></p><p>输入一行命令，立即执行，展现结果</p><p>交互模式下，上次输出的表达式会赋给变量<code>_</code>。</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/20250214171523.png"></p><p>加强版交互模式（行号 + 自动补齐）：<code>ipython3</code></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/20250214164533.png"></p><p>一般一直使用的是<strong>命令行模式</strong>：写好命令后保存并运行整个文件</p><p>在文件开头写上 <code>#! /usr/bin/env python3</code>，作用：使得该文件可以通过 <code>./文件名</code> 执行（记得添加可执行权限：<code>chmod +x 文件名.py</code>）</p><p>编码：<code>#-*- coding: utf-8 -*-</code></p><h2 id="数学运算"><a href="#数学运算" class="headerlink" title="数学运算"></a>数学运算</h2><p>基础：<code>+、-、*、/、%、**(乘方)</code></p><p>数值的除法包含两个运算符：<code>/</code> 返回一个浮点数，<code>//</code> 返回一个整数。</p><p><code>//</code> 往小的方向取整数（C++向零取整）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">9</span>//<span class="number">2</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>-<span class="number">9</span>//<span class="number">2</span></span><br><span class="line">-<span class="number">5</span></span><br></pre></td></tr></table></figure><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230812154259369.png" alt="image-20230812154259369"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line">math.函数名(…)</span><br></pre></td></tr></table></figure><p>math库官方文档：<a href="https://docs.python.org/zh-cn/3/library/math.html">math — 数学函数 — Python 3.11.4 文档</a></p><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>单行注释以 <strong>#</strong> 开头</p><p>多行注释可以在每行开头加上 <strong>#</strong> ，也可以用 <strong>‘’’</strong> 或者 <strong>“””</strong> 包裹起来进行注释</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230812170434751.png" alt="image-20230812170434751"></p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>Python3中常见的数字类型有：Number（数字）、String（字符串）、bool（布尔类型）、List（列表）、Tuple（元组）、Set（集合）、Dictionary（字典）</p><p><strong>不可变数据</strong>：Number（数字）、String（字符串）、Tuple（元组）</p><p><strong>可变数据</strong>：List（列表）、Set（集合）、Dictionary（字典）</p><h3 id="Number（数字）"><a href="#Number（数字）" class="headerlink" title="Number（数字）"></a>Number（数字）</h3><p>Python3 支持 int、float、bool、complex</p><p>在Python 3里，只有一种整数类型 int，表示为长整型，没有 python2 中的 Long。</p><p>浮点型由整数部分与小数部分组成，浮点型也可以使用科学计数法表示（2.5e2 &#x3D; 2.5 x 102 &#x3D; 250）</p><p>复数由实数部分和虚数部分构成，可以用a + bj,或者complex(a,b)表示， 复数的实部a和虚部b都是浮点型。</p><h3 id="String（字符串）"><a href="#String（字符串）" class="headerlink" title="String（字符串）"></a>String（字符串）</h3><p>Python中的字符串用单引号 <code>&#39;</code> 或双引号 <code>&quot;</code> 括起来，同时使用反斜杠 <code>\</code> 转义特殊字符。</p><p>加号 <code>+</code> 是字符串的连接符， 星号 <code>*</code> 表示复制当前字符串，与之结合的数字为复制的次数。</p><p><strong>Python 没有单独的字符类型，一个字符就是长度为1的字符串。</strong></p><p>字符串的截取格式：<code>变量[头下标，尾下标)</code></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230812232606877.png" alt="image-20230812232606877"></p><p>Python 使用反斜杠 \ 转义特殊字符，如果你不想让反斜杠发生转义，可以在字符串前面添加一个 <code>r</code>，表示原始字符串。</p><h3 id="Bool（布尔类型）"><a href="#Bool（布尔类型）" class="headerlink" title="Bool（布尔类型）"></a>Bool（布尔类型）</h3><p>布尔类型只有两个值：True 和 False</p><p>在 Python 中，所有非零的数字和非空的字符串、列表、元组等数据类型都被视为 True，只有 <strong>0、空字符串、空列表、空元组</strong>等被视为 False。因此，在进行布尔类型转换时，需要注意数据类型的真假性。</p><h3 id="List（列表）"><a href="#List（列表）" class="headerlink" title="List（列表）"></a>List（列表）</h3><p>列表可以完成大多数集合类的数据结构实现。列表中元素的类型可以不相同，它支持数字，字符串甚至可以包含列表（所谓嵌套）</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230812234740717.png" alt="image-20230812234740717"></p><p>Python 列表截取可以接收第三个参数，参数作用是截取的步长，来截取字符串</p><p>如果第三个参数为负数表示逆向读取，以下实例用于翻转字符串</p><h3 id="Tuple（元组）"><a href="#Tuple（元组）" class="headerlink" title="Tuple（元组）"></a>Tuple（元组）</h3><p>元组（tuple）与列表类似，不同之处在于元组的元素不能修改。元组写在小括号 <strong>()</strong> 里，元素之间用逗号隔开。元组中的元素类型也可以不相同。</p><p>虽然tuple的元素不可改变，但它可以包含可变的对象，比如list列表。</p><p>元组与字符串类似，可以被索引且下标索引从0开始，-1 为从末尾开始的位置。也可以进行截取，可以用+进行拼接。</p><p><strong>构造包含 0 个或 1 个元素的元组比较特殊，所以有一些额外的语法规则：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tup1 = ()    <span class="comment"># 空元组</span></span><br><span class="line">tup2 = (<span class="number">20</span>,) <span class="comment"># 一个元素，需要在元素后添加逗号</span></span><br></pre></td></tr></table></figure><h3 id="Set（集合）"><a href="#Set（集合）" class="headerlink" title="Set（集合）"></a>Set（集合）</h3><p>Python 中的集合（Set）是一种无序、可变的数据类型，用于存储唯一的元素。</p><p>集合中的元素不会重复，并且可以进行交集、并集、差集等常见的集合操作。</p><p>在 Python 中，集合使用大括号 <strong>{}</strong> 表示，元素之间用逗号 <strong>,</strong> 分隔。</p><p>另外，也可以使用 <strong>set()</strong> 函数创建集合。</p><p><strong>注意：</strong>创建一个空集合必须用 <strong>set()</strong> 而不是 **{ }**，因为 <strong>{ }</strong> 是用来创建一个空字典。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">parame = &#123;value01,value02,...&#125;</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line"><span class="built_in">set</span>(value)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如</span></span><br><span class="line">set1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;            <span class="comment"># 直接使用大括号创建集合</span></span><br><span class="line">set2 = <span class="built_in">set</span>([<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>])      <span class="comment"># 使用 set() 函数从列表创建集合</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//<span class="built_in">set</span>可以进行集合运算</span><br><span class="line">a = <span class="built_in">set</span>(<span class="string">&#x27;abracadabra&#x27;</span>)</span><br><span class="line">b = <span class="built_in">set</span>(<span class="string">&#x27;alacazam&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a - b)     <span class="comment"># a 和 b 的差集</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a | b)     <span class="comment"># a 和 b 的并集</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a &amp; b)     <span class="comment"># a 和 b 的交集</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a ^ b)     <span class="comment"># a 和 b 中不同时存在的元素</span></span><br></pre></td></tr></table></figure><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">对应输出结果：</span><br><span class="line">&#123;&#x27;b&#x27;, &#x27;c&#x27;, &#x27;a&#x27;, &#x27;r&#x27;, &#x27;d&#x27;&#125;</span><br><span class="line">&#123;&#x27;r&#x27;, &#x27;b&#x27;, &#x27;d&#x27;&#125;</span><br><span class="line">&#123;&#x27;b&#x27;, &#x27;c&#x27;, &#x27;a&#x27;, &#x27;z&#x27;, &#x27;m&#x27;, &#x27;r&#x27;, &#x27;l&#x27;, &#x27;d&#x27;&#125;</span><br><span class="line">&#123;&#x27;c&#x27;, &#x27;a&#x27;&#125;</span><br><span class="line">&#123;&#x27;z&#x27;, &#x27;b&#x27;, &#x27;m&#x27;, &#x27;r&#x27;, &#x27;l&#x27;, &#x27;d&#x27;&#125;</span><br></pre></td></tr></table></figure><h3 id="Dictionary（字典）"><a href="#Dictionary（字典）" class="headerlink" title="Dictionary（字典）"></a>Dictionary（字典）</h3><p>列表是有序的对象集合，字典是无序的对象集合。两者之间的区别在于：字典当中的元素是通过键来存取的，而不是通过偏移存取。</p><p>字典是一种映射类型，字典用 <strong>{ }</strong> 标识，它是一个无序的 <strong>键(key) : 值(value)</strong> 的集合。</p><p>键(key)必须使用<code>不可变类型</code>。</p><p>在同一个字典中，键(key)必须是唯一的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">//实例</span><br><span class="line"><span class="built_in">dict</span> = &#123;&#125;</span><br><span class="line"><span class="built_in">dict</span>[<span class="string">&#x27;one&#x27;</span>] = <span class="string">&quot;1 - 菜鸟教程&quot;</span></span><br><span class="line"><span class="built_in">dict</span>[<span class="number">2</span>]     = <span class="string">&quot;2 - 菜鸟工具&quot;</span></span><br><span class="line"></span><br><span class="line">tinydict = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;runoob&#x27;</span>,<span class="string">&#x27;code&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;site&#x27;</span>: <span class="string">&#x27;www.runoob.com&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">dict</span>[<span class="string">&#x27;one&#x27;</span>])       <span class="comment"># 输出键为 &#x27;one&#x27; 的值</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">dict</span>[<span class="number">2</span>])           <span class="comment"># 输出键为 2 的值</span></span><br><span class="line"><span class="built_in">print</span> (tinydict)          <span class="comment"># 输出完整的字典</span></span><br><span class="line"><span class="built_in">print</span> (tinydict.keys())   <span class="comment"># 输出所有键</span></span><br><span class="line"><span class="built_in">print</span> (tinydict.values()) <span class="comment"># 输出所有值</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;输出结果</span></span><br><span class="line"><span class="string">1 - 菜鸟教程</span></span><br><span class="line"><span class="string">2 - 菜鸟工具</span></span><br><span class="line"><span class="string">&#123;&#x27;name&#x27;: &#x27;runoob&#x27;, &#x27;code&#x27;: 1, &#x27;site&#x27;: &#x27;www.runoob.com&#x27;&#125;</span></span><br><span class="line"><span class="string">dict_keys([&#x27;name&#x27;, &#x27;code&#x27;, &#x27;site&#x27;])</span></span><br><span class="line"><span class="string">dict_values([&#x27;runoob&#x27;, 1, &#x27;www.runoob.com&#x27;])</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>：</p><p>1、字典是一种映射类型，它的元素是键值对。</p><p>2、字典的关键字必须为不可变类型，且不能重复。</p><p>3、创建空字典使用 **{ }**。</p><h2 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h2><p>Python 数据类型转换可以分为两种：</p><ul><li>隐式类型转换 - 自动完成</li><li>显式类型转换 - 需要使用类型函数来转换</li></ul><h3 id="隐式类型转换"><a href="#隐式类型转换" class="headerlink" title="隐式类型转换"></a>隐式类型转换</h3><p>在隐式类型转换中，Python 会自动将一种数据类型转换为另一种数据类型，不需要我们去干预。</p><p>先看一个实例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">num_int = <span class="number">123</span></span><br><span class="line">num_flo = <span class="number">1.23</span></span><br><span class="line"></span><br><span class="line">num_new = num_int + num_flo</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;num_int 数据类型为:&quot;</span>,<span class="built_in">type</span>(num_int))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;num_flo 数据类型为:&quot;</span>,<span class="built_in">type</span>(num_flo))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;num_new 值为:&quot;</span>,num_new)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;num_new 数据类型为:&quot;</span>,<span class="built_in">type</span>(num_new))</span><br></pre></td></tr></table></figure><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输出结果：</span><br><span class="line">num_int 数据类型为: &lt;class &#x27;int&#x27;&gt;</span><br><span class="line">num_flo 数据类型为: &lt;class &#x27;float&#x27;&gt;</span><br><span class="line">num_new: 值为: 124.23</span><br><span class="line">num_new 数据类型为: &lt;class &#x27;float&#x27;&gt;</span><br></pre></td></tr></table></figure><p>新的变量 <code>num_new</code> 是 <code>浮点型（float）</code>，这是因为 Python 会将较小的数据类型转换为较大的数据类型，以避免数据丢失。</p><p>再看一个实例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">num_int = <span class="number">123</span></span><br><span class="line">num_str = <span class="string">&quot;456&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;num_int 数据类型为:&quot;</span>,<span class="built_in">type</span>(num_int))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;num_str 数据类型为:&quot;</span>,<span class="built_in">type</span>(num_str))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(num_int+num_str)</span><br></pre></td></tr></table></figure><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输出结果：</span><br><span class="line">num_int 数据类型为: &lt;class &#x27;int&#x27;&gt;</span><br><span class="line">num_str 数据类型为: &lt;class &#x27;str&#x27;&gt;</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;/runoob-test/test.py&quot;, line 7, in &lt;module&gt;</span><br><span class="line">    print(num_int+num_str)</span><br><span class="line">TypeError: unsupported operand type(s) for +: &#x27;int&#x27; and &#x27;str&#x27;</span><br></pre></td></tr></table></figure><p>从输出中可以看出，整型和字符串类型运算结果会报错，输出 TypeError。 Python 在这种情况下无法使用隐式转换。但是，Python 为这些类型的情况提供了一种解决方案，称为<code>显式转换</code>。</p><h3 id="显式类型转换"><a href="#显式类型转换" class="headerlink" title="显式类型转换"></a>显式类型转换</h3><p>在显式类型转换中，用户将对象的数据类型转换为所需的数据类型。 我们使用 int()、float()、str() 等预定义函数来执行显式类型转换。</p><p><strong>int()</strong> 强制转换为整型</p><p><strong>float()</strong> 强制转换为浮点型</p><p><strong>str()</strong> 强制转换为字符串类型</p><h2 id="条件控制"><a href="#条件控制" class="headerlink" title="条件控制"></a>条件控制</h2><h3 id="if…else…"><a href="#if…else…" class="headerlink" title="if…else…"></a>if…else…</h3><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/006faQNTgw1f5wnm0mcxrg30ci07o47l.gif" alt="006faQNTgw1f5wnm0mcxrg30ci07o47l"></p><h3 id="match…case"><a href="#match…case" class="headerlink" title="match…case"></a>match…case</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">match</span> subject:</span><br><span class="line">    <span class="keyword">case</span> &lt;pattern_1&gt;:</span><br><span class="line">        &lt;action_1&gt;</span><br><span class="line">    <span class="keyword">case</span> &lt;pattern_2&gt;:</span><br><span class="line">        &lt;action_2&gt;</span><br><span class="line">    <span class="keyword">case</span> &lt;pattern_3&gt;:</span><br><span class="line">        &lt;action_3&gt;</span><br><span class="line">    <span class="keyword">case</span> _:</span><br><span class="line">        &lt;action_wildcard&gt;</span><br><span class="line">        </span><br><span class="line">//实例</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">http_error</span>(<span class="params">status</span>):</span><br><span class="line">    <span class="keyword">match</span> status:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">400</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Bad request&quot;</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">404</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Not found&quot;</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">418</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;I&#x27;m a teapot&quot;</span></span><br><span class="line">        <span class="keyword">case</span> _:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Something&#x27;s wrong with the internet&quot;</span></span><br><span class="line"></span><br><span class="line">mystatus=<span class="number">400</span></span><br><span class="line"><span class="built_in">print</span>(http_error(<span class="number">400</span>))</span><br><span class="line"></span><br><span class="line">//结果输出</span><br><span class="line">Bad request</span><br></pre></td></tr></table></figure><p>一个 case 也可以设置多个匹配条件，条件使用 <strong>｜</strong> 隔开</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">    <span class="keyword">case</span> <span class="number">401</span>|<span class="number">403</span>|<span class="number">404</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Not allowed&quot;</span></span><br></pre></td></tr></table></figure><h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><p><code>Python 中 while 语句的一般形式</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> 判断条件(condition)：</span><br><span class="line">    执行语句(statements)……</span><br></pre></td></tr></table></figure><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/006faQNTgw1f5wnm06h3ug30ci08cake.gif" alt="006faQNTgw1f5wnm06h3ug30ci08cake"></p><p><code>while 循环使用 else 语句</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> &lt;expr&gt;:</span><br><span class="line">    &lt;statement(s)&gt;</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    &lt;additional_statement(s)&gt;</span><br></pre></td></tr></table></figure><p>expr 条件语句为 true 则执行 statement(s) 语句块，如果为 false，则执行 additional_statement(s)。</p><p><code>for循环的一般格式如下</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> &lt;variable&gt; <span class="keyword">in</span> &lt;sequence&gt;:</span><br><span class="line">    &lt;statements&gt;</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    &lt;statements&gt;</span><br><span class="line">// <span class="keyword">for</span> 循环可以遍历任何可迭代对象，如一个列表或者一个字符串。</span><br></pre></td></tr></table></figure><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230813215359820.png" alt="image-20230813215359820"></p><p><code>整数范围值可以配合 range() 函数使用</code></p><p><code>for…else语句</code></p><p>在 Python 中，for…else 语句用于在循环结束后执行一段代码。形式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> iterable:</span><br><span class="line">    <span class="comment"># 循环主体</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="comment"># 循环结束后执行的代码</span></span><br></pre></td></tr></table></figure><p>当循环执行完毕（即遍历完 iterable 中的所有元素）后，会执行 else 子句中的代码，如果在循环过程中遇到了 break 语句，则会中断循环，此时不会执行 else 子句</p><p><code>break 和 continue </code></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230813220113585.png" alt="image-20230813220113585"></p><p><code>pass 语句</code></p><p>Python pass是空语句，是为了保持程序结构的完整性。pass 不做任何事情，一般用做占位语句，</p><h2 id="end关键字"><a href="#end关键字" class="headerlink" title="end关键字"></a>end关键字</h2><p>关键字end可以用于将结果输出到同一行，或者在输出的末尾添加不同的字符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a, b = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> b &lt; <span class="number">1000</span>:</span><br><span class="line">    <span class="built_in">print</span>(b, end=<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">    a, b = b, a+b</span><br></pre></td></tr></table></figure><p>输出结果:</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1,1,2,3,5,8,13,21,34,55,89,144,233,377,610,987,</span><br></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="函数构成"><a href="#函数构成" class="headerlink" title="函数构成"></a>函数构成</h3><p>函数是组织好的，可重复使用的，用来实现单一，或相关联功能的代码段。</p><p>函数能提高应用的模块性，和代码的重复利用率。</p><p>简单规则如下：</p><ul><li>函数代码块以 <strong>def</strong> 关键词开头，后接函数标识符名称和圆括号 **()**。</li><li>任何传入参数和自变量必须放在圆括号中间，圆括号之间可以用于定义参数。</li><li>函数的第一行语句可以选择性地使用文档字符串—用于存放函数说明。</li><li>函数内容以冒号 <strong>:</strong> 起始，并且缩进。</li><li><strong>return [表达式]</strong> 结束函数，选择性地返回一个值给调用方，不带表达式的 return 相当于返回 None。</li></ul><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230813224047157.png" alt="image-20230813224047157"></p><h3 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h3><p>在 python 中，类型属于对象，对象有不同类型的区分，变量是没有类型的</p><h3 id="可更改-mutable-与不可更改-immutable-对象"><a href="#可更改-mutable-与不可更改-immutable-对象" class="headerlink" title="可更改(mutable)与不可更改(immutable)对象"></a>可更改(mutable)与不可更改(immutable)对象</h3><p>在 python 中，strings, tuples, 和 numbers 是不可更改的对象，而 list,dict 等则是可以修改的对象。</p><ul><li><strong>不可变类型：</strong>变量赋值 <strong>a&#x3D;5</strong> 后再赋值 <strong>a&#x3D;10</strong>，这里实际是新生成一个 int 值对象 10，再让 a 指向它，而 5 被丢弃，不是改变 a 的值，相当于新生成了 a。</li><li><strong>可变类型：</strong>变量赋值 <strong>la&#x3D;[1,2,3,4]</strong> 后再赋值 <strong>la[2]&#x3D;5</strong> 则是将 list la 的第三个元素值更改，本身la没有动，只是其内部的一部分值被修改了。</li></ul><p>python 函数的参数传递：</p><ul><li><strong>不可变类型：</strong>类似 C++ 的值传递，如整数、字符串、元组。如 fun(a)，传递的只是 a 的值，没有影响 a 对象本身。如果在 fun(a) 内部修改 a 的值，则是新生成一个 a 的对象。</li><li><strong>可变类型：</strong>类似 C++ 的引用传递，如 列表，字典。如 fun(la)，则是将 la 真正的传过去，修改后 fun 外部的 la 也会受影响</li></ul><p>python 中一切都是对象，严格意义我们不能说值传递还是引用传递，我们应该说传不可变对象和传可变对象。</p><h2 id="Python-引入模块"><a href="#Python-引入模块" class="headerlink" title="Python 引入模块"></a>Python 引入模块</h2><h3 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h3><p><code>官方文档：</code><a href="https://docs.python.org/zh-cn/3/library/functions.html">https://docs.python.org/zh-cn/3/library/functions.html</a></p><h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3><p><code>import 语句</code></p><p><code>from…import…语句</code></p><p><code>from…import *</code></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230814161002565.png" alt="image-20230814161002565"></p><p><code>Python标准库：</code> <a href="https://docs.python.org/zh-cn/3/library/index.html">Python 标准库 — Python 3.11.4 文档</a></p><p><code>第三方库搜索：</code><a href="https://pypi.org/">PyPI · The Python Package Index</a></p><h2 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h2><p><code>Object Oriented Programming</code></p><h3 id="创建类"><a href="#创建类" class="headerlink" title="创建类"></a>创建类</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 模板</span></span><br><span class="line"><span class="keyword">class</span> &lt;name&gt;:</span><br><span class="line">&lt;类属性名&gt; = &lt;类属性初值&gt;<span class="comment">#类属性与初值定义</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,&lt;参数列表&gt;</span>):</span><br><span class="line">self.&lt;实例属性名&gt; = &lt;实例属性初值&gt;</span><br><span class="line">...</span><br><span class="line">        </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">method</span>(<span class="params">self</span>):<span class="comment">#也可加参数</span></span><br><span class="line"><span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p><code>类属性：</code>类对象的属性，由所有实例对象所共享</p><p><code>实例属性：</code>实例对象的属性，由各实例对象所独享</p><p><code>__init__()的使用说明：</code></p><p>参数：第一个参数约定是 self，表示类实例自身，其他参数是实例参数</p><p>函数名：Python解释器内部定义，由双下划线（__)开始和结束</p><p>返回值：构造函数没有返回值，或返回None，否则产生TypeError异常</p><h3 id="类继承"><a href="#类继承" class="headerlink" title="类继承"></a>类继承</h3><p><code>DRY原则</code>：Don’t Repeat Yourself</p><p><code>继承：</code>子类继承父类的属性和方法</p><p>子类没有自己方法的时候会调用父类的方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">son</span>(<span class="title class_ inherited__">father</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):<span class="comment">#可新加子类的属性作为参数</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br></pre></td></tr></table></figure><p><code>例题：人力系统</code></p><ul><li>员工分为两类：全职员工 FullTimeEmployee、兼职员工 PartTimeEmployee</li><li>全职和兼职都有 “姓名 name”、”工号 id” 属性</li><li>都具备 “打印信息 print_info” (打印姓名、工号)方法</li><li>全职有 “月薪 monthly_salary” 属性</li><li>兼职有 “日薪 daily_salary” 属性、”每月工作天数 work_days”属性</li><li>全职和兼职都有 “计算月薪 calculate_monthly_pay” 的方法，但具体计算过程不一样</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, <span class="built_in">id</span></span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.<span class="built_in">id</span> = <span class="built_in">id</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">print_info</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;员工姓名：<span class="subst">&#123;self.name&#125;</span>, 工号：<span class="subst">&#123;self.<span class="built_in">id</span>&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FullTimeEmployee</span>(<span class="title class_ inherited__">Employee</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, <span class="built_in">id</span>, monthly_salary</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(name, <span class="built_in">id</span>)</span><br><span class="line">        self.monthly_salary = monthly_salary</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">calculate_monthly_pay</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.monthly_salary</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PartTimeEmployee</span>(<span class="title class_ inherited__">Employee</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, <span class="built_in">id</span>, daily_salary, work_days</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(name, <span class="built_in">id</span>)</span><br><span class="line">        self.daily_salary = daily_salary</span><br><span class="line">        self.work_days = work_days</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">calculate_monthly_pay</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.daily_salary * self.work_days</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">zhangsan = FullTimeEmployee(<span class="string">&quot;张三&quot;</span>, <span class="number">110001</span>, <span class="number">10000</span>)</span><br><span class="line">lisi = PartTimeEmployee(<span class="string">&quot;李四&quot;</span>, <span class="number">110002</span>, <span class="number">200</span>, <span class="number">25</span>)</span><br><span class="line"></span><br><span class="line">zhangsan.print_info();</span><br><span class="line">lisi.print_info();</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;zhangsan.name&#125;</span>的月薪是：<span class="subst">&#123;zhangsan.calculate_monthly_pay()&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;lisi.name&#125;</span>的月薪是：<span class="subst">&#123;lisi.calculate_monthly_pay()&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p><code>输出结果：</code></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230814211328834.png" alt="image-20230814211328834"></p><h2 id="Python文件"><a href="#Python文件" class="headerlink" title="Python文件"></a>Python文件</h2><h3 id="电脑操作系统的目录结构"><a href="#电脑操作系统的目录结构" class="headerlink" title="电脑操作系统的目录结构"></a>电脑操作系统的目录结构</h3><h4 id="类Unix操作系统（Linux、macOS等）"><a href="#类Unix操作系统（Linux、macOS等）" class="headerlink" title="类Unix操作系统（Linux、macOS等）"></a>类Unix操作系统（Linux、macOS等）</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230814212502108.png" alt="image-20230814212502108"></p><h4 id="Windows操作系统"><a href="#Windows操作系统" class="headerlink" title="Windows操作系统"></a>Windows操作系统</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230814212538860.png" alt="image-20230814212538860"></p><h3 id="定位文件"><a href="#定位文件" class="headerlink" title="定位文件"></a>定位文件</h3><h4 id="绝对路径"><a href="#绝对路径" class="headerlink" title="绝对路径"></a>绝对路径</h4><p>以根节点为基准，</p><p>对于Linux、macOS等类Unix系统，绝对路径以斜杠<code>/</code>开头，路径中的每个目录之间用斜杠进行分隔，最后以目标文件或目标目录结尾</p><p>对于Windows系统，绝对路径以分区名加反斜杠<code>\</code>开头，路径中的每个目录之间用斜杠进行分隔，最后以目标文件或目标目录结尾</p><h4 id="相对路径"><a href="#相对路径" class="headerlink" title="相对路径"></a>相对路径</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230814213218900.png" alt="image-20230814213218900"></p><h3 id="读文件操作"><a href="#读文件操作" class="headerlink" title="读文件操作"></a>读文件操作</h3><h4 id="第一步：打开目标文件"><a href="#第一步：打开目标文件" class="headerlink" title="第一步：打开目标文件"></a>第一步：打开目标文件</h4><p>open（）函数第一个参数里面先放上文件的路径（可以是相对路径，也可以是绝对路径）</p><p>第二个参数是模式，模式是一个字符串</p><p>“r”：读取模式（只读）</p><p>“w”：写入模式（只写）</p><p>模式可以不写，默认是读模式</p><p>最后一个为可选参数：encoding，表示编码方式，一般编码方式都是UTF-8，<code>encoding=&quot;utf-8&quot;</code></p><h4 id="第二步：读文件"><a href="#第二步：读文件" class="headerlink" title="第二步：读文件"></a>第二步：读文件</h4><p><code>read()方法：读取全部的文件内容，第二次调用会返回空字符串</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;./data.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding = <span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(f.read(<span class="number">10</span>))<span class="comment">#会读第1-10个字节的文件内容</span></span><br></pre></td></tr></table></figure><p><code>readline()方法：会读一行文件内容</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 根据换行符，判断什么时候是行末，换行符也会被当成读取的内容的一部分</span></span><br><span class="line"><span class="comment"># 读到文件末尾，同样会返回空字符串</span></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;./data.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding = <span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(f.readline())</span><br></pre></td></tr></table></figure><p><code>readlines()方法：会读全部文件内容，并把每行作为列表元素返回</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;./data.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding = <span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">lines = f.readlines() <span class="comment">#把每行内容储存到列表里</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:<span class="comment">#遍历每行内容</span></span><br><span class="line">    <span class="built_in">print</span>(line)<span class="comment">#打印当前行</span></span><br></pre></td></tr></table></figure><h4 id="第三步：关闭文件"><a href="#第三步：关闭文件" class="headerlink" title="第三步：关闭文件"></a>第三步：关闭文件</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;./data.txt&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(f.read())<span class="comment">#对文件的操作</span></span><br><span class="line">f.close()<span class="comment">#关闭文件，释放资源</span></span><br></pre></td></tr></table></figure><p><code>有时候可能会忘记调用close，另外一种方法是用with关键字</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#缩进中放上对文件的操作，在缩进的内容执行完毕后，文件就会被自动关闭</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;./data.txt&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="built_in">print</span>(f.read())<span class="comment">#对文件的操作</span></span><br></pre></td></tr></table></figure><h3 id="写文件操作"><a href="#写文件操作" class="headerlink" title="写文件操作"></a>写文件操作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 写文件模式下，如果文件不存在，程序就会自动创建;如果文件存在，先把先前的内容清空</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;./unknown.txt&quot;</span>, <span class="string">&quot;w&quot;</span>, <span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p><code>f.write():</code> 不会自动换行，需自己手动加换行符</p><p><code>模式选&quot;a&quot;</code> 则不会将原本内容清空，而是在后面追加内容</p><p><code>模式选&quot;r+&quot;</code> ，可同时读文件和写文件，且write调用后会以追加的形式在文件后面添加新的内容</p><h2 id="Python异常处理"><a href="#Python异常处理" class="headerlink" title="Python异常处理"></a>Python异常处理</h2><h3 id="异常类型"><a href="#异常类型" class="headerlink" title="异常类型"></a>异常类型</h3><p><code>IndexError：索引错误</code></p><p><code>ZeroDivisionError：除零错误</code></p><p><code>FileNotFoundError：找不到文件错误</code></p><p><code>TypeError：类型错误（如两个字符串相乘）</code></p><p>and etc</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230814222150481.png" alt="image-20230814222150481"></p><h3 id="捕捉异常"><a href="#捕捉异常" class="headerlink" title="捕捉异常"></a>捕捉异常</h3><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230814222447450.png" alt="image-20230814222447450"></p><h2 id="Python测试"><a href="#Python测试" class="headerlink" title="Python测试"></a>Python测试</h2><p>目的：确认程序的行为是否和我们的预期相同</p><p>除了能验证新代码是否正确之外，还能验证在改动老代码之后不该受影响的地方是否仍然按预期进行</p><h3 id="assert"><a href="#assert" class="headerlink" title="assert"></a>assert</h3><p><code>中文释义：断言</code></p><p>后面可跟任何布尔表达式，测试时，在assert后面跟上认为是TRUE的表达式，如果确实是TRUE，则无事发生，继续运行后面的代码，如果为FALSE，会产生”AssertionError”，一但出现，程序会直接终止。</p><p>一般使用专门做测试的库</p><h3 id="unittest"><a href="#unittest" class="headerlink" title="unittest"></a>unittest</h3><p><code>中文释义：单元测试</code> Python自带的库</p><p>同时，一般把测试代码和实现代码分开，如下：</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230814225237879.png" alt="image-20230814225237879"></p><p>创建一个类，要当unittest.TestCase的子类，这样能使用继承自unittest.TestCase的各种测试功能</p><p>类里定义多个测试用例，每个测试用例均是类下的一个方法，命名必须以test_开头，这样才会被当成测试用例</p><p>写好测试用例之后，在终端输入 python -m unittest 即可</p><p><code>常见测试方法</code></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230814225849045.png" alt="image-20230814225849045"></p><p>本质上，assertTrue可以代替这些所有方法，不过推荐使用更针对的方法，因为在测试未通过时，更针对性的方法会给出更详细的失败原因，如下：</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230814230031656.png" alt="image-20230814230031656"></p><h3 id="测试实例"><a href="#测试实例" class="headerlink" title="测试实例"></a>测试实例</h3><p><code>shopping_list.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ShoppingList</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;初始化购物清单，Shopping_List是字典类型，包含商品名和对应价格</span></span><br><span class="line"><span class="string">    例子：&#123;&quot;牙刷&quot;: 5, &quot;沐浴露&quot;: 15, &quot;电池&quot;: 7&#125;&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, shopping_list</span>):</span><br><span class="line">        self.shopping_list = shopping_list</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;&quot;&quot;返回购物清单上有多少项商品&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_item_count</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(self.shopping_list)</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;&quot;&quot;返回购物清单商品价格总额数字&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_total_price</span>(<span class="params">self</span>):</span><br><span class="line">        total_price = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> price <span class="keyword">in</span> self.shopping_list.values():</span><br><span class="line">            total_price += price</span><br><span class="line">        <span class="keyword">return</span> total_price</span><br></pre></td></tr></table></figure><p><code>test_shopping_list.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">from</span> shopping_list <span class="keyword">import</span>  ShoppingList</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestShoppingList</span>(unittest.TestCase):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setUp</span>(<span class="params">self</span>):</span><br><span class="line">        self.shopping_list = ShoppingList(&#123;<span class="string">&quot;牙刷&quot;</span>: <span class="number">5</span>, <span class="string">&quot;沐浴露&quot;</span>: <span class="number">15</span>, <span class="string">&quot;电池&quot;</span>: <span class="number">7</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_get_item_count</span>(<span class="params">self</span>):</span><br><span class="line">        self.assertEqual(self.shopping_list.get_item_count(), <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_get_total_price</span>(<span class="params">self</span>):</span><br><span class="line">        self.assertEqual(self.shopping_list.get_total_price(), <span class="number">27</span>)</span><br></pre></td></tr></table></figure><p><code>终端输入：python -m unittest</code></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230814233408246.png" alt="image-20230814233408246"></p><p>两个点表示通过两个测试案例</p><p>接下来将test_shopping_list.py中的27改成7，再次运行</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230814233536687.png" alt="image-20230814233536687"></p><p><code>.F</code>表示第二个测试案例没通过，同时也显示了错误位置和原因</p>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基础算法</title>
      <link href="/AcWing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"/>
      <url>/AcWing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="基础算法"><a href="#基础算法" class="headerlink" title="基础算法"></a>基础算法</h1><p>[toc]</p><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><p>又称为：分区交换排序</p><p>平均时间复杂度：O（nlogn）</p><p>最坏时间复杂度：O（n<sup>2</sup>）</p><p>核心思想：<code>分治</code></p><ol><li><p>选择分界点，可以是：a[l]，a[r]， a[(l + r + 1)&#x2F;2]，等等</p></li><li><p>划分区间：将整个数组划分为小于等于分界点的区间和大于等于分界点的区间</p><ul><li><p>暴力做法</p><p>可以另开两个数组a和b，分别存小于分界点的数和大于等于分界点的数，最后覆盖原数组</p></li><li><p>优化做法</p><p>双指针 i 和 j，从两头往中间走</p></li></ul></li><li><p>分别递归左边和右边</p></li></ol><h3 id="template"><a href="#template" class="headerlink" title="template"></a>template</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">quick_sort</span><span class="params">(<span class="type">int</span> q[], <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//递归的终止情况</span></span><br><span class="line">    <span class="keyword">if</span> (l &gt;= r) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//第一步：分成子问题</span></span><br><span class="line">    <span class="type">int</span> i = l - <span class="number">1</span>, j = r + <span class="number">1</span>, x = q[l + r &gt;&gt; <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">        <span class="keyword">do</span> i ++; <span class="keyword">while</span> (q[i] &lt; x);</span><br><span class="line">        <span class="keyword">do</span> j --; <span class="keyword">while</span> (q[j] &gt; x);</span><br><span class="line">        <span class="keyword">if</span> (i &lt; j) <span class="built_in">swap</span>(q[i], q[j]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//第二步：递归处理子问题</span></span><br><span class="line">    <span class="built_in">quick_sort</span>(q, l, j), <span class="built_in">quick_sort</span>(q, j + <span class="number">1</span>, r);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//第三步：子问题合并.快排这一步不需要操作，但归并排序的核心在这一步骤</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>边界情况分析</strong><br>快排属于<em><strong>分治算法</strong></em>，最怕的就是 n分成0和n，或 n分成n和0,这会造成无限划分</p><ul><li>若以 j 为划分时，x不能选 q[r]</li><li>若以 i 为划分时，x不能选 q[l]</li></ul><h3 id="快速排序-1"><a href="#快速排序-1" class="headerlink" title="快速排序"></a>快速排序</h3><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230810000727134.png" alt="image-20230810000727134"></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">==输入样例==</span><br><span class="line">5</span><br><span class="line">3 1 2 4 5</span><br><span class="line">==输出样例==</span><br><span class="line">1 2 3 4 5</span><br></pre></td></tr></table></figure><h4 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Quick_sort</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (l &gt;= r) <span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> mid = a[(l + r + <span class="number">1</span>)/<span class="number">2</span>];</span><br><span class="line">    <span class="type">int</span> i = l - <span class="number">1</span>, j = r + <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">        <span class="keyword">do</span> ++ i; <span class="keyword">while</span> (a[i] &lt; mid);</span><br><span class="line">        <span class="keyword">do</span> -- j; <span class="keyword">while</span> (a[j] &gt; mid);</span><br><span class="line">        <span class="keyword">if</span>(i &lt; j) <span class="built_in">swap</span>(a[i], a[j]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">Quick_sort</span>(a, l, i - <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">Quick_sort</span>(a, i, r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++ i) &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">Quick_sort</span>(a, <span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++ i) &#123;</span><br><span class="line">        cout &lt;&lt; a[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125; cout &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第k个数"><a href="#第k个数" class="headerlink" title="第k个数"></a>第k个数</h3><h4 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230810001105139.png" alt="image-20230810001105139"></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">==输入样例==</span><br><span class="line">5 3</span><br><span class="line">2 4 1 5 3</span><br><span class="line">==输出样例==</span><br><span class="line">3</span><br></pre></td></tr></table></figure><h4 id="完整代码-1"><a href="#完整代码-1" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Quick_sort</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span> a[l];</span><br><span class="line">    <span class="type">int</span> mid = a[l];</span><br><span class="line">    <span class="type">int</span> i = l - <span class="number">1</span>, j = r + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">        <span class="keyword">do</span> ++ i; <span class="keyword">while</span> (a[i] &lt; mid);</span><br><span class="line">        <span class="keyword">do</span> -- j; <span class="keyword">while</span> (a[j] &gt; mid);</span><br><span class="line">        <span class="keyword">if</span> (i &lt; j) <span class="built_in">swap</span>(a[i], a[j]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> sl = j - l + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (k &lt;= sl) <span class="keyword">return</span> <span class="built_in">Quick_sort</span>(l, j, k);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">Quick_sort</span>(j + <span class="number">1</span>, r, k - sl);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    <span class="type">int</span> n, k;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++ i) &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; <span class="built_in">Quick_sort</span>(<span class="number">0</span>, n - <span class="number">1</span>, k) &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><p>核心思想：<em><strong>分治</strong></em></p><ol><li>确定分界点：mid &#x3D; (l+r) &gt;&gt; 1</li><li>递归排序 left 和 right</li><li>归并，合二为一（关键在这）</li></ol><p>时间复杂度：O（nlogn）</p><h3 id="template-1"><a href="#template-1" class="headerlink" title="template"></a>template</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge_sort</span><span class="params">(<span class="type">int</span> q[], <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//递归的终止情况</span></span><br><span class="line">    <span class="keyword">if</span> (l &gt;= r) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//第一步：分成子问题</span></span><br><span class="line">    <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//第二步：递归处理子问题</span></span><br><span class="line">    <span class="built_in">merge_sort</span>(q, l, mid), <span class="built_in">merge_sort</span>(q, mid + <span class="number">1</span>, r);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//第三步：合并子问题</span></span><br><span class="line">    <span class="type">int</span> k = <span class="number">0</span>, i = l, j = mid + <span class="number">1</span>, tmp[r - l + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= r)</span><br><span class="line">        <span class="keyword">if</span>(q[i] &lt;= q[j]) tmp[k ++] = q[i ++];</span><br><span class="line">        <span class="keyword">else</span> tmp[k ++] = q[j ++];</span><br><span class="line">        </span><br><span class="line">    <span class="comment">//可能存在的剩下的一个小数组的尾部直接添加到 tmp 数组中</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid) tmp[k ++] = q[i ++];</span><br><span class="line">    <span class="keyword">while</span> (j &lt;= r) tmp[k ++] = q[j ++];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//tmp 数组覆盖原数组</span></span><br><span class="line">    <span class="keyword">for</span> (k = <span class="number">0</span>, i = l; i &lt;= r; k ++, i ++) q[i] = tmp[k];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="归并排序-1"><a href="#归并排序-1" class="headerlink" title="归并排序"></a>归并排序</h3><h4 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230810001915692.png" alt="image-20230810001915692"></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">==输入样例==</span><br><span class="line">5</span><br><span class="line">3 1 2 4 5</span><br><span class="line">==输出样例==</span><br><span class="line">1 2 3 4 5</span><br></pre></td></tr></table></figure><h4 id="完整代码-2"><a href="#完整代码-2" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> q[N], tmp[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge_sort</span><span class="params">(<span class="type">int</span> q[], <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt;= r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">merge_sort</span>(q, l, mid);</span><br><span class="line">    <span class="built_in">merge_sort</span>(q, mid + <span class="number">1</span>, r);</span><br><span class="line">    <span class="type">int</span> k = <span class="number">0</span>, i = l, j = mid + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= r) &#123;</span><br><span class="line">        <span class="keyword">if</span> (q[i] &lt;= q[j]) tmp[k ++] = q[i ++];</span><br><span class="line">        <span class="keyword">else</span> tmp[k ++] = q[j ++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid) tmp[k ++] = q[i ++];</span><br><span class="line">    <span class="keyword">while</span> (j &lt;= r) tmp[k ++] = q[j ++];</span><br><span class="line">    <span class="keyword">for</span> (i = l, j = <span class="number">0</span>; i &lt;= r; ++ i, ++ j) q[i] = tmp[j];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++ i) &#123;</span><br><span class="line">        cin &gt;&gt; q[i];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">merge_sort</span>(q, <span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++ i) &#123;</span><br><span class="line">        cout &lt;&lt; q[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125; cout &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="逆序对的数量"><a href="#逆序对的数量" class="headerlink" title="逆序对的数量"></a>逆序对的数量</h3><h4 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230810002317731.png" alt="image-20230810002317731"></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">==输入样例==</span><br><span class="line">6</span><br><span class="line">2 3 4 5 6 1</span><br><span class="line">==输出样例==</span><br><span class="line">5</span><br></pre></td></tr></table></figure><h4 id="图解"><a href="#图解" class="headerlink" title="图解"></a>图解</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/%E9%80%86%E5%BA%8F%E5%AF%B9%E6%80%9D%E8%B7%AF.png" alt="逆序对思路"></p><h4 id="完整代码-3"><a href="#完整代码-3" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> q[N], tmp[N];</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">merge_sort</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt;= r) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    ll res = <span class="built_in">merge_sort</span>(l, mid) + <span class="built_in">merge_sort</span>(mid + <span class="number">1</span>, r);</span><br><span class="line">    <span class="type">int</span> k = <span class="number">0</span>, i = l, j = mid + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= r) &#123;</span><br><span class="line">        <span class="keyword">if</span> (q[i] &lt;= q[j]) tmp[k ++] = q[i ++];</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            tmp[k ++] = q[j ++];</span><br><span class="line">            res += mid - i + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid) tmp[k ++] = q[i ++];</span><br><span class="line">    <span class="keyword">while</span> (j &lt;= r) tmp[k ++] = q[j ++];</span><br><span class="line">    <span class="keyword">for</span> (i = l, j = <span class="number">0</span>; i &lt;= r; ++ i, ++ j) &#123;</span><br><span class="line">        q[i] = tmp[j];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++ i) &#123;</span><br><span class="line">        cin &gt;&gt; q[i];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; <span class="built_in">merge_sort</span>(<span class="number">0</span>, n - <span class="number">1</span>) &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二分"><a href="#二分" class="headerlink" title="二分"></a>二分</h2><h3 id="整数二分"><a href="#整数二分" class="headerlink" title="整数二分"></a>整数二分</h3><p>本质：<code>不是单调性，是边界</code></p><p>将整个区间一分为二，一半满足一半不满足某个条件，利用二分去寻找这个边界</p><p><strong>有单调性一定可以二分，二分不一定要单调性</strong></p><p>ps：每次选择答案所在的区间进行下一步处理</p><h3 id="浮点数二分"><a href="#浮点数二分" class="headerlink" title="浮点数二分"></a>浮点数二分</h3><p>不需考虑边界问题，直接令 <strong>r &#x3D; mid</strong> 或者 <strong>l &#x3D; mid</strong> 即可</p><p>循环结束条件，一般取比题目要求精度多两位</p><h3 id="template-2"><a href="#template-2" class="headerlink" title="template"></a>template</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//区间[l, r]被划分成[l, mid]和[mid+1, r]时使用：</span></span><br><span class="line"><span class="comment">//查找左边界 SearchLeft 简写SL</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">SL</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">        <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">check</span>(mid)) r = mid; </span><br><span class="line">        <span class="keyword">else</span> l = mid + <span class="number">1</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//区间[l, r]被划分成[l, mid-1]和[mid, r]时使用：</span></span><br><span class="line"><span class="comment">//查找右边界 SearchRight 简写SR</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">SR</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r) &#123;                   </span><br><span class="line">        <span class="type">int</span> mid = l + r + <span class="number">1</span> &gt;&gt; <span class="number">1</span>; <span class="comment">//需要+1 防止死循环</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">check</span>(mid)) l = mid;</span><br><span class="line">        <span class="keyword">else</span> r = mid - <span class="number">1</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//二分终止条件：l=r</span></span><br></pre></td></tr></table></figure><h3 id="二分查找库函数"><a href="#二分查找库函数" class="headerlink" title="二分查找库函数"></a>二分查找库函数</h3><p>在库<code>&lt;algorithm&gt;</code>中，</p><p>以 nums &#x3D; {1，2，4，4，5，8，10，20}为例。要求原数组元素呈现不减的趋势</p><h4 id="binary-search"><a href="#binary-search" class="headerlink" title="binary_search()"></a>binary_search()</h4><p>用于查找一个具体的数值是否存在，存在则返回 true，否则返回 false</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cout &lt;&lt; <span class="built_in">binary_search</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>(), <span class="number">2</span>) &lt;&lt; endl;<span class="comment">//true</span></span><br><span class="line">cout &lt;&lt; <span class="built_in">binary_search</span>(nums.<span class="built_in">begin</span>(), num.<span class="built_in">end</span>(), <span class="number">200</span>) &lt;&lt; endl;<span class="comment">//false</span></span><br></pre></td></tr></table></figure><p><code>binary_search()</code>用于查找特定元素是否存在，返回值为布尔类型。</p><h4 id="lower-bound"><a href="#lower-bound" class="headerlink" title="lower_bound()"></a>lower_bound()</h4><p>返回值为第一个不小于目标值的位置</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> it1 = <span class="built_in">lower_bound</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>(), <span class="number">4</span>) - nums.<span class="built_in">begin</span>();<span class="comment">//大于等于目标值的第一个位置</span></span><br><span class="line"><span class="keyword">auto</span> iter1 = <span class="built_in">lower_bound</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>(), <span class="number">4</span>);<span class="comment">//大于等于目标值的第一个位置</span></span><br><span class="line">cout &lt;&lt; it1 &lt;&lt; endl;<span class="comment">//2,第一个大于等于4的元素的下标,即第一个4的下标,为2</span></span><br><span class="line">cout &lt;&lt; *iter1 &lt;&lt; endl;<span class="comment">//4,第一个大于等于4的元素,为4</span></span><br></pre></td></tr></table></figure><p><code>lower_bound()</code> 用于查找第一个大于等于目标值的元素的位置，返回值为位置，是一个迭代器。</p><h4 id="upper-bound"><a href="#upper-bound" class="headerlink" title="upper_bound()"></a>upper_bound()</h4><p>返回值为第一个严格大于的目标值的元素的位置</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> it2 = <span class="built_in">upper_bound</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>(), <span class="number">4</span>) - nums.<span class="built_in">begin</span>();<span class="comment">//大于目标值的第一个位置</span></span><br><span class="line"><span class="keyword">auto</span> iter2 = <span class="built_in">upper_bound</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>(), <span class="number">4</span>);<span class="comment">//大于目标值的第一个位置</span></span><br><span class="line">cout &lt;&lt; it2 &lt;&lt; endl;<span class="comment">//4,第一个严格大于4的元素的下标,即5的下标,为4</span></span><br><span class="line">cout &lt;&lt; *iter2 &lt;&lt; endl;<span class="comment">//5,第一个严格大于4的元素,为5</span></span><br></pre></td></tr></table></figure><p><code>upper_bound()</code> 用于查找第一个严格大于目标值的元素的位置，返回值为位置，是一个迭代器。</p><h3 id="数的范围"><a href="#数的范围" class="headerlink" title="数的范围"></a>数的范围</h3><h4 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230810002927756.png" alt="image-20230810002927756"></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">==输入样例==</span><br><span class="line">6 3</span><br><span class="line">1 2 2 3 3 4</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">==输出样例==</span><br><span class="line">3 4</span><br><span class="line">5 5</span><br><span class="line">-1 -1</span><br></pre></td></tr></table></figure><h4 id="完整代码-4"><a href="#完整代码-4" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> q[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++ i) &#123;</span><br><span class="line">        cin &gt;&gt; q[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (m --) &#123;</span><br><span class="line">        <span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line">        cin &gt;&gt; x;</span><br><span class="line">        <span class="type">int</span> l = <span class="number">0</span>, r = n - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">            <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (q[mid] &gt;= x) r = mid;</span><br><span class="line">            <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (q[l] != x) cout &lt;&lt; <span class="string">&quot;-1 -1&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            cout &lt;&lt; l &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">            l = <span class="number">0</span>, r = n - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">                <span class="type">int</span> mid = (l + r + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (q[mid] &lt;= x) l = mid;</span><br><span class="line">                <span class="keyword">else</span> r = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            cout &lt;&lt; l &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数的三次方根"><a href="#数的三次方根" class="headerlink" title="数的三次方根"></a>数的三次方根</h3><h4 id="题目描述-5"><a href="#题目描述-5" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230810010951788.png" alt="image-20230810010951788"></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">==输入样例==</span><br><span class="line">1000.00</span><br><span class="line">==输出样例==</span><br><span class="line">10.000000</span><br></pre></td></tr></table></figure><h4 id="完整代码-5"><a href="#完整代码-5" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">double</span> x;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;x);</span><br><span class="line">    <span class="type">double</span> l = <span class="number">-10000</span>, r = <span class="number">10000</span>;</span><br><span class="line">    <span class="keyword">while</span> (r - l &gt; <span class="number">1</span>e - <span class="number">8</span>) &#123;</span><br><span class="line">        <span class="type">double</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (mid*mid*mid &gt; x) r = mid;</span><br><span class="line">        <span class="keyword">else</span> l = mid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.6lf\n&quot;</span>, l);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="高精度"><a href="#高精度" class="headerlink" title="高精度"></a>高精度</h2><h3 id="高精度加法"><a href="#高精度加法" class="headerlink" title="高精度加法"></a>高精度加法</h3><h4 id="题目描述-6"><a href="#题目描述-6" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230810011555188.png" alt="image-20230810011555188"></p><h4 id="完整代码-6"><a href="#完整代码-6" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">Vector_add</span><span class="params">(vector&lt;<span class="type">int</span>&gt; a, vector&lt;<span class="type">int</span>&gt; b)</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; c;</span><br><span class="line">    <span class="type">int</span> carry = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; a.<span class="built_in">size</span>() || i &lt; b.<span class="built_in">size</span>(); ++ i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; a.<span class="built_in">size</span>()) carry += a[i];</span><br><span class="line">        <span class="keyword">if</span> (i &lt; b.<span class="built_in">size</span>()) carry += b[i];</span><br><span class="line">        c.<span class="built_in">push_back</span>(carry % <span class="number">10</span>);</span><br><span class="line">        carry /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (carry) c.<span class="built_in">push_back</span>(carry);</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    string a, b;</span><br><span class="line">    cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; A, B;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = a.<span class="built_in">length</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; -- i) A.<span class="built_in">push_back</span>(a[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = b.<span class="built_in">length</span>() - <span class="number">1</span>; j &gt;= <span class="number">0</span>; -- j) B.<span class="built_in">push_back</span>(b[j] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    <span class="keyword">auto</span> C = <span class="built_in">Vector_add</span>(A,B);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = C.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; -- i) cout &lt;&lt; C[i];</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="高精度减法"><a href="#高精度减法" class="headerlink" title="高精度减法"></a>高精度减法</h3><h4 id="题目描述-7"><a href="#题目描述-7" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230810011915113.png" alt="image-20230810011915113"></p><h4 id="完整代码-7"><a href="#完整代码-7" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(vector&lt;<span class="type">int</span>&gt; A, vector&lt;<span class="type">int</span>&gt; B)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (A.<span class="built_in">size</span>() != B.<span class="built_in">size</span>()) <span class="keyword">return</span> A.<span class="built_in">size</span>() &gt; B.<span class="built_in">size</span>();  <span class="comment">//直接ruturn了就不用else</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = A.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; -- i)</span><br><span class="line">        <span class="keyword">if</span>(A[i] != B[i])</span><br><span class="line">            <span class="keyword">return</span> A[i] &gt; B[i];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vector &lt;<span class="type">int</span>&gt; <span class="built_in">Vector_sub</span>(vector&lt;<span class="type">int</span>&gt; A, vector&lt;<span class="type">int</span>&gt; B) &#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; C;</span><br><span class="line">    <span class="type">int</span> t = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; A.<span class="built_in">size</span>(); ++ i) &#123;</span><br><span class="line">        t = A[i] - t;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; B.<span class="built_in">size</span>()) t -= B[i];</span><br><span class="line">        C.<span class="built_in">push_back</span>((t + <span class="number">10</span>) % <span class="number">10</span> ); <span class="comment">// 合二为1</span></span><br><span class="line">        <span class="keyword">if</span> (t &lt; <span class="number">0</span>)  t = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> t = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (C.<span class="built_in">size</span>() &gt; <span class="number">1</span> &amp;&amp; C.<span class="built_in">back</span>() == <span class="number">0</span>) C.<span class="built_in">pop_back</span>();  <span class="comment">//去掉前导0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    string a, b;</span><br><span class="line">    cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; A, B;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = a.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; -- i) A.<span class="built_in">push_back</span>(a[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = b.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; -- i) B.<span class="built_in">push_back</span>(b[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">cmp</span>(A, B)) &#123;</span><br><span class="line">        <span class="keyword">auto</span> C = <span class="built_in">Vector_sub</span>(A, B);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = C.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; -- i) cout &lt;&lt; C[i];</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">auto</span> C = <span class="built_in">Vector_sub</span>(B, A);</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;-&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = C.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; -- i) cout &lt;&lt; C[i];</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="高精度乘法"><a href="#高精度乘法" class="headerlink" title="高精度乘法"></a>高精度乘法</h3><h4 id="题目描述-8"><a href="#题目描述-8" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230810012437221.png" alt="image-20230810012437221"></p><h4 id="完整代码-8"><a href="#完整代码-8" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">Vector_mul</span><span class="params">(vector&lt;<span class="type">int</span>&gt; A, <span class="type">int</span> B)</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; C;</span><br><span class="line">    <span class="type">int</span> carry = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; A.<span class="built_in">size</span>(); ++ i) &#123;</span><br><span class="line">        carry += A[i] * B;</span><br><span class="line">        C.<span class="built_in">push_back</span>(carry % <span class="number">10</span>);</span><br><span class="line">        carry /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (carry) C.<span class="built_in">push_back</span>(carry);</span><br><span class="line">    <span class="comment">//消除前置0</span></span><br><span class="line">    <span class="keyword">while</span> (C.<span class="built_in">size</span>() &gt; <span class="number">1</span> &amp;&amp; C.<span class="built_in">back</span>() == <span class="number">0</span>) C.<span class="built_in">pop_back</span>();</span><br><span class="line">    <span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    string a;   cin &gt;&gt; a;</span><br><span class="line">    <span class="type">int</span> b;  cin &gt;&gt; b;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; A;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = a.<span class="built_in">length</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; -- i) A.<span class="built_in">push_back</span>(a[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    <span class="keyword">auto</span> c = <span class="built_in">Vector_mul</span>(A, b);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = c.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; -- i) cout &lt;&lt; c[i];</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="高精度除法"><a href="#高精度除法" class="headerlink" title="高精度除法"></a>高精度除法</h3><h4 id="题目描述-9"><a href="#题目描述-9" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230810012726490.png" alt="image-20230810012726490"></p><h4 id="完整代码-9"><a href="#完整代码-9" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">Vector_div</span><span class="params">(vector&lt;<span class="type">int</span>&gt; A, <span class="type">int</span> B, <span class="type">int</span>&amp; c)</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; C;</span><br><span class="line">    <span class="type">int</span> t = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = A.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; -- i) &#123;</span><br><span class="line">        t = t*<span class="number">10</span> + A[i];</span><br><span class="line">        C.<span class="built_in">push_back</span>(t / B);</span><br><span class="line">        t %= B;</span><br><span class="line">    &#125;</span><br><span class="line">    c = t;</span><br><span class="line">    <span class="built_in">reverse</span>(C.<span class="built_in">begin</span>(), C.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">while</span> (C.<span class="built_in">size</span>() &gt; <span class="number">1</span> &amp;&amp; C.<span class="built_in">back</span>() == <span class="number">0</span>) C.<span class="built_in">pop_back</span>();</span><br><span class="line">    <span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    string a;   cin &gt;&gt; a;</span><br><span class="line">    <span class="type">int</span> b;  cin &gt;&gt; b;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; A;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = a.<span class="built_in">length</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; -- i) A.<span class="built_in">push_back</span>(a[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    <span class="type">int</span> r = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">auto</span> C = <span class="built_in">Vector_div</span>(A, b, r);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = C.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; -- i) </span><br><span class="line">        cout &lt;&lt; C[i];</span><br><span class="line">    cout &lt;&lt; endl &lt;&lt; r &lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="前缀和与差分"><a href="#前缀和与差分" class="headerlink" title="前缀和与差分"></a>前缀和与差分</h2><h3 id="前缀和"><a href="#前缀和" class="headerlink" title="前缀和"></a>前缀和</h3><p><em><strong>一维前缀和</strong></em></p><p>给定一个原数组：a<sub>1</sub> a<sub>2</sub> a<sub>3</sub> …… a<sub>4</sub></p><p>前缀和：S<sub>i</sub> &#x3D; a<sub>1</sub> + a<sub>2</sub> + a<sub>3</sub> + …… + a<sub>i</sub></p><ol><li>如何求S<sub>i</sub> ：递推，S<sub>i</sub> &#x3D; S<sub>i-1</sub> + a<sub>i</sub> ，S<sub>0</sub> &#x3D; 0(便于求解边界)</li><li>作用：<strong>快速</strong>求出数组一段区间的和，[l,r]：S<sub>r</sub> - S<sub>l-1</sub></li></ol><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240114223531320.png" alt="image-20240114223531320"></p><h4 id="题目描述-10"><a href="#题目描述-10" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230810013317122.png" alt="image-20230810013317122"></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">==输入样例==</span><br><span class="line">5 3</span><br><span class="line">2 1 3 6 4</span><br><span class="line">1 2</span><br><span class="line">1 3</span><br><span class="line">2 4</span><br><span class="line">==输出样例==</span><br><span class="line">3</span><br><span class="line">6</span><br><span class="line">10</span><br></pre></td></tr></table></figure><h4 id="完整代码-10"><a href="#完整代码-10" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> q[N], S[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) &#123;</span><br><span class="line">        cin &gt;&gt; q[i];</span><br><span class="line">    &#125;</span><br><span class="line">    S[<span class="number">0</span>] = <span class="number">0</span>;<span class="comment">//实际上全局变量会自动赋值为0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) &#123;</span><br><span class="line">        S[i] = S[i - <span class="number">1</span>] + q[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( m -- ) &#123;</span><br><span class="line">        <span class="type">int</span> l, r;</span><br><span class="line">        cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line">        cout &lt;&lt; S[r] - S[l - <span class="number">1</span>] &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="子矩阵的和"><a href="#子矩阵的和" class="headerlink" title="子矩阵的和"></a>子矩阵的和</h3><p><em><strong>二维前缀和</strong></em></p><p>S<sub>i,j</sub> 的含义：Σa<sub>i,j</sub> (i∈[1,i]，j∈[1,j])  即左上角矩形内元素之和</p><p>Ask：S<sub>i,j</sub> 如何计算？</p><p>Ans：S<sub>i,j</sub> &#x3D; S<sub>i-1,j</sub> + S<sub>i,j-1</sub> - S<sub>i-1,j-1</sub> + a<sub>i,j</sub> </p><p>Ask：(x<sub>1</sub> ，y<sub>1</sub>)，(x<sub>2</sub> ，y<sub>2</sub>) 这一子矩阵中所有数的和如何计算？</p><p>Ans：S<sub>x<sub>2</sub>,y<sub>2</sub></sub> - S<sub>x<sub>1</sub>-1,y<sub>2</sub></sub> - S<sub>x<sub>2</sub>,y<sub>1</sub>-1</sub> + S<sub>x<sub>1</sub>-1,y<sub>1</sub>-1</sub> </p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240114224648460.png" alt="image-20240114224648460"></p><h4 id="题目描述-11"><a href="#题目描述-11" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230810013805032.png" alt="image-20230810013805032"></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">==输入样例==</span><br><span class="line">3 4 3</span><br><span class="line">1 7 2 4</span><br><span class="line">3 6 2 8</span><br><span class="line">2 1 2 3</span><br><span class="line">1 1 2 2</span><br><span class="line">2 1 3 4</span><br><span class="line">1 3 3 4</span><br><span class="line">==输出样例==</span><br><span class="line">17</span><br><span class="line">27</span><br><span class="line">21</span><br></pre></td></tr></table></figure><h4 id="图解-1"><a href="#图解-1" class="headerlink" title="图解"></a>图解</h4><p><code>求S[i][j]</code></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/%E6%B1%82S%5Bi%5D%5Bj%5D.png" alt="求S[i][j]"></p><p><code>求子矩阵的和</code></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/%E6%B1%82%E5%AD%90%E7%9F%A9%E9%98%B5%E7%9A%84%E5%92%8C.png" alt="求子矩阵的和"></p><h4 id="完整代码-11"><a href="#完整代码-11" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e3</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, q;</span><br><span class="line"><span class="type">int</span> a[N][N], s[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; q;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; ++ j)</span><br><span class="line">            cin &gt;&gt; a[i][j];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span> ;j &lt;= m; ++ j)</span><br><span class="line">            s[i][j] = s[i - <span class="number">1</span>][j] + s[i][j - <span class="number">1</span>] - s[i - <span class="number">1</span>][j - <span class="number">1</span>] + a[i][j];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> ( q -- ) &#123;</span><br><span class="line">        <span class="type">int</span> x1, y1, x2, y2;</span><br><span class="line">        cin &gt;&gt; x1 &gt;&gt; y1 &gt;&gt; x2 &gt;&gt; y2;</span><br><span class="line">        cout &lt;&lt; s[x2][y2] - s[x1 - <span class="number">1</span>][y2] - s[x2][y1 - <span class="number">1</span>] + s[x1 - <span class="number">1</span>][y1 - <span class="number">1</span>] &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="差分"><a href="#差分" class="headerlink" title="差分"></a>差分</h3><p>与前缀和互为逆运算</p><p>已知：a<sub>1</sub> a<sub>2</sub> …… a<sub>n</sub> 为前缀和数组，构造一个数组b，使得：b<sub>1</sub> &#x3D; a<sub>1</sub> ，b<sub>2</sub> &#x3D; a<sub>2</sub> - a<sub>1</sub> …… b<sub>n</sub> &#x3D; a<sub>n</sub> - a<sub>n-1</sub> </p><p>则称b数组为a数组的差分。</p><p>a<sub>n</sub> &#x3D; b<sub>1</sub> + b<sub>2</sub> + …… + b<sub>n</sub>   O(n)：b -&gt; a</p><p>用处：给定一个区间 [l，r]，使得 a<sub>i</sub> (i ∈ [l，r])，都有：a<sub>i</sub> &#x3D; a<sub>i</sub> + C</p><p>如果直接遍历，时间复杂度为O(n)，</p><p>对其差分数组处理的话，时间复杂度为O(1)：只需要在b数组中修改两个数：b<sub>l</sub> &#x3D; b<sub>l</sub> + C，b<sub>r+1</sub> &#x3D; b<sub>r+1</sub> - C</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240114230300820.png" alt="image-20240114230300820"></p><h4 id="差分数组构造"><a href="#差分数组构造" class="headerlink" title="差分数组构造"></a>差分数组构造</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> c)</span> </span>&#123;</span><br><span class="line">    b[l] += c;</span><br><span class="line">    b[r + <span class="number">1</span>] -= c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="题目描述-12"><a href="#题目描述-12" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230810014728174.png" alt="image-20230810014728174"></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">==输入样例==</span><br><span class="line">6 3</span><br><span class="line">1 2 2 1 2 1</span><br><span class="line">1 3 1</span><br><span class="line">3 5 1</span><br><span class="line">1 6 1</span><br><span class="line">==输出样例==</span><br><span class="line">3 4 5 3 4 2</span><br></pre></td></tr></table></figure><h4 id="完整代码-12"><a href="#完整代码-12" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> a[N], b[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> a)</span> </span>&#123;</span><br><span class="line">    b[l] += a;</span><br><span class="line">    b[r + <span class="number">1</span>] -= a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) cin &gt;&gt; a[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) <span class="built_in">insert</span>(i, i, a[i]);<span class="comment">//Attention</span></span><br><span class="line">    <span class="keyword">while</span> ( m -- ) &#123;</span><br><span class="line">        <span class="type">int</span> l, r, c;</span><br><span class="line">        cin &gt;&gt; l &gt;&gt; r &gt;&gt; c;</span><br><span class="line">        <span class="built_in">insert</span>(l, r, c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) a[i] = a[i - <span class="number">1</span>] + b[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) cout &lt;&lt; a[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="差分矩阵"><a href="#差分矩阵" class="headerlink" title="差分矩阵"></a>差分矩阵</h3><h4 id="题目描述-13"><a href="#题目描述-13" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230810015156781.png" alt="image-20230810015156781"></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">==输入样例==</span><br><span class="line">3 4 3</span><br><span class="line">1 2 2 1</span><br><span class="line">3 2 2 1</span><br><span class="line">1 1 1 1</span><br><span class="line">1 1 2 2 1</span><br><span class="line">1 3 2 3 2</span><br><span class="line">3 1 3 4 1</span><br><span class="line">==输出样例==</span><br><span class="line">2 3 4 1</span><br><span class="line">4 3 4 1</span><br><span class="line">2 2 2 2</span><br></pre></td></tr></table></figure><h4 id="图解-2"><a href="#图解-2" class="headerlink" title="图解"></a>图解</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240114231237777.png" alt="image-20240114231237777"></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240114231103349.png" alt="image-20240114231103349"></p><h4 id="完整代码-13"><a href="#完整代码-13" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e3</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, q;</span><br><span class="line"><span class="type">int</span> a[N][N], b[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> x1, <span class="type">int</span> y1, <span class="type">int</span> x2, <span class="type">int</span> y2, <span class="type">int</span> c)</span> </span>&#123;</span><br><span class="line">    b[x1][y1] += c;</span><br><span class="line">    b[x2 + <span class="number">1</span>][y1] -= c;</span><br><span class="line">    b[x1][y2 + <span class="number">1</span>] -= c;</span><br><span class="line">    b[x2 + <span class="number">1</span>][y2 + <span class="number">1</span>] += c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; q;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; ++ j)</span><br><span class="line">            cin &gt;&gt; a[i][j];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; ++ j)</span><br><span class="line">            <span class="built_in">insert</span>(i, j, i, j, a[i][j]);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> ( q -- ) &#123;</span><br><span class="line">        <span class="type">int</span> x1, y1, x2, y2, c;</span><br><span class="line">        cin &gt;&gt; x1 &gt;&gt; y1 &gt;&gt; x2 &gt;&gt; y2 &gt;&gt; c;</span><br><span class="line">        <span class="built_in">insert</span>(x1, y1, x2, y2, c);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; ++ j)</span><br><span class="line">            a[i][j] = b[i][j] + a[i - <span class="number">1</span>][j] + a[i][j - <span class="number">1</span>] - a[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">            </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; ++ j)</span><br><span class="line">            cout &lt;&lt; a[i][j] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="双指针算法"><a href="#双指针算法" class="headerlink" title="双指针算法"></a>双指针算法</h2><h3 id="template-3"><a href="#template-3" class="headerlink" title="template"></a>template</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; n; ++ i) &#123;</span><br><span class="line"><span class="keyword">while</span> (j &lt; i &amp;&amp; <span class="built_in">check</span>(i,j)) ++ j;</span><br><span class="line"><span class="comment">//每道题目具体逻辑</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="function"><a href="#function" class="headerlink" title="function"></a>function</h3><p>可以将 O(n<sup>2</sup>) 优化到 O(n)</p><p>可先暴力枚举，观察 i 和 j 是否存在单调关系，然后利用单调关系进行优化</p><h3 id="最长连续不重复子序列"><a href="#最长连续不重复子序列" class="headerlink" title="最长连续不重复子序列"></a>最长连续不重复子序列</h3><h4 id="题目描述-14"><a href="#题目描述-14" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230810020121576.png" alt="image-20230810020121576"></p><h4 id="图解-3"><a href="#图解-3" class="headerlink" title="图解"></a>图解</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20240115235452280.png" alt="image-20240115235452280"></p><h4 id="完整代码-14"><a href="#完整代码-14" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="type">int</span> s[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++ i) cin &gt;&gt; a[i];</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; n; ++ i) &#123;<span class="comment">//枚举终点</span></span><br><span class="line">        ++ s[a[i]];</span><br><span class="line">        <span class="keyword">while</span> (s[a[i]] &gt; <span class="number">1</span>) &#123;<span class="comment">//终点往右边移动之后出现重复了,说明重复的数一定是终点的数</span></span><br><span class="line">            -- s[a[j]];</span><br><span class="line">            ++ j;<span class="comment">//单调性:j只会往后移</span></span><br><span class="line">        &#125;</span><br><span class="line">        res = <span class="built_in">max</span>(i - j + <span class="number">1</span>, res);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数组元素的目标和"><a href="#数组元素的目标和" class="headerlink" title="数组元素的目标和"></a>数组元素的目标和</h3><h4 id="题目描述-15"><a href="#题目描述-15" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230810020423947.png" alt="image-20230810020423947"></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">==输入样例==</span><br><span class="line">4 5 6</span><br><span class="line">1 2 4 7</span><br><span class="line">3 4 6 8 9</span><br><span class="line">==输出样例==</span><br><span class="line">1 1</span><br></pre></td></tr></table></figure><h4 id="完整代码-15"><a href="#完整代码-15" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, x;</span><br><span class="line"><span class="type">int</span> a[N], b[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; x;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++ i) cin &gt;&gt; a[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; ++ i) cin &gt;&gt; b[i];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, j = m - <span class="number">1</span>; i &lt; n; ++ i) &#123;</span><br><span class="line">        <span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; a[i] + b[j] &gt; x) &#123;</span><br><span class="line">            -- j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (j &gt;= <span class="number">0</span> &amp;&amp; a[i] + b[j] == x) cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; j &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="判断子序列"><a href="#判断子序列" class="headerlink" title="判断子序列"></a>判断子序列</h3><h4 id="题目描述-16"><a href="#题目描述-16" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230810020732677.png" alt="image-20230810020732677"></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">==输入样例==</span><br><span class="line">3 5</span><br><span class="line">1 3 5</span><br><span class="line">1 2 3 4 5</span><br><span class="line">==输出样例==</span><br><span class="line">Yes</span><br></pre></td></tr></table></figure><h4 id="完整代码-16"><a href="#完整代码-16" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//写法一</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> a[N], b[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++ i) cin &gt;&gt; a[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; ++ j) cin &gt;&gt; b[j];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; n; ++ i) &#123;</span><br><span class="line">        <span class="keyword">while</span> (j &lt; m &amp;&amp; b[j] != a[i]) ++ j;</span><br><span class="line">        <span class="keyword">if</span> (j == m) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;No&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ++ j;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Yes&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//写法二</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> a[N], b[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++ i) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; ++ i) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;b[i]);</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; n &amp;&amp; j &lt; m) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] == b[j]) ++ i;</span><br><span class="line">        ++ j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (i == n) <span class="built_in">puts</span>(<span class="string">&quot;Yes&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">&quot;No&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h2><p>若求n的二进制表示的第k位是0还是1，（最低位为第0位）</p><ol><li>先把第k位移到最后一位：n &gt;&gt; k</li><li>将n与上1：n &amp; 1</li></ol><p>综上：n &gt;&gt; k &amp; 1</p><h3 id="lowbit（x）函数"><a href="#lowbit（x）函数" class="headerlink" title="lowbit（x）函数"></a>lowbit（x）函数</h3><h4 id="function-1"><a href="#function-1" class="headerlink" title="function"></a>function</h4><p>返回 x 的最后一位1；</p><p>x &#x3D; (1010)<sub>2</sub> ，则 lowbit(x) &#x3D; (10)<sub>2</sub> </p><h4 id="实现逻辑"><a href="#实现逻辑" class="headerlink" title="实现逻辑"></a>实现逻辑</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;<span class="comment">//源码和补码做与运算</span></span><br><span class="line">    <span class="keyword">return</span> x &amp; (-x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h4><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">x <span class="built_in">&amp;</span> (-x) = x <span class="built_in">&amp;</span> (~x + 1)</span><br><span class="line"></span><br><span class="line">x = 1010……100000</span><br><span class="line"></span><br><span class="line">~x = 0101……011111</span><br><span class="line"></span><br><span class="line">~x+1 = 0101……100000</span><br><span class="line"></span><br><span class="line">x <span class="built_in">&amp;</span> (~x + 1) = 0000……100000</span><br></pre></td></tr></table></figure><h3 id="二进制中1的个数"><a href="#二进制中1的个数" class="headerlink" title="二进制中1的个数"></a>二进制中1的个数</h3><h4 id="题目描述-17"><a href="#题目描述-17" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230810021729256.png" alt="image-20230810021729256"></p><h4 id="完整代码-17"><a href="#完整代码-17" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &amp; (-x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">while</span> ( n -- ) &#123;</span><br><span class="line">        <span class="type">int</span> x;</span><br><span class="line">        cin &gt;&gt; x;</span><br><span class="line">        <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (x) &#123;</span><br><span class="line">            x -= <span class="built_in">lowbit</span>(x);</span><br><span class="line">            ++ cnt;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; cnt &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="离散化"><a href="#离散化" class="headerlink" title="离散化"></a>离散化</h2><p>离散化的<strong>本质</strong>：<code>映射</code>，将间隔很大的点，映射到相邻的数组元素中，以减少对空间的需求，也减少计算量。</p><p>离散化：把无限空间中有限的个体映射到有限的空间中去，以此提高算法的时空效率。通俗的说，离散化是在不改变数据相对大小的条件下，对数据进行相应的缩小。</p><h3 id="适用范围"><a href="#适用范围" class="headerlink" title="适用范围"></a>适用范围</h3><p>数组中元素值域很大，但个数不是很多。</p><p>比如将a[] &#x3D; [1,3,100,2000,500000]映射到 [0,1,2,3,4]，这个过程就叫离散化（将值Value映射到下标Index）</p><h3 id="区间和"><a href="#区间和" class="headerlink" title="区间和"></a>区间和</h3><h4 id="题目描述-18"><a href="#题目描述-18" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230810022234189.png" alt="image-20230810022234189"></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">==输入样例==</span><br><span class="line">3 3</span><br><span class="line">1 2</span><br><span class="line">3 6</span><br><span class="line">7 5</span><br><span class="line">1 3</span><br><span class="line">4 6</span><br><span class="line">7 8</span><br><span class="line">==输出样例==</span><br><span class="line">8</span><br><span class="line">0</span><br><span class="line">5</span><br></pre></td></tr></table></figure><h4 id="完整代码-18"><a href="#完整代码-18" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">3e5</span> + <span class="number">10</span>;<span class="comment">//n次插入和m次查询相关数据量的上界(n+2m)</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> a[N];<span class="comment">//存储坐标插入的值</span></span><br><span class="line"><span class="type">int</span> s[N];<span class="comment">//存储数组a的前缀和</span></span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; alls;<span class="comment">//存储（所有与插入和查询有关的）坐标</span></span><br><span class="line">vector&lt;PII&gt; adds, asks;<span class="comment">//存储插入和询问操作的数据</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;<span class="comment">//返回的是输入的坐标的离散化下标</span></span><br><span class="line">    <span class="type">int</span> l = <span class="number">0</span>, r = alls.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">        <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (alls[mid] &gt;= x) r = mid;</span><br><span class="line">        <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l + <span class="number">1</span>;<span class="comment">//下标从1开始,用于前缀和</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//读入数据</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++ i) &#123;</span><br><span class="line">        <span class="type">int</span> x, c;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;c);</span><br><span class="line">        adds.<span class="built_in">push_back</span>(&#123;x, c&#125;);</span><br><span class="line">        alls.<span class="built_in">push_back</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; ++ i) &#123;</span><br><span class="line">        <span class="type">int</span> l, r;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;l, &amp;r);</span><br><span class="line">        asks.<span class="built_in">push_back</span>(&#123;l, r&#125;);</span><br><span class="line">        alls.<span class="built_in">push_back</span>(l);</span><br><span class="line">        alls.<span class="built_in">push_back</span>(r);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//去重</span></span><br><span class="line">    <span class="built_in">sort</span>(alls.<span class="built_in">begin</span>(), alls.<span class="built_in">end</span>());</span><br><span class="line">    alls.<span class="built_in">erase</span>(<span class="built_in">unique</span>(alls.<span class="built_in">begin</span>(), alls.<span class="built_in">end</span>()), alls.<span class="built_in">end</span>());</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//处理插入</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> item : adds) &#123;</span><br><span class="line">        a[<span class="built_in">find</span>(item.first)] += item.second;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//求前缀和</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= alls.<span class="built_in">size</span>(); ++ i) s[i] = s[i - <span class="number">1</span>] + a[i];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//处理询问</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> item : asks) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, s[<span class="built_in">find</span>(item.second)] - s[<span class="built_in">find</span>(item.first) - <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="图解-4"><a href="#图解-4" class="headerlink" title="图解"></a>图解</h3><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/%E5%8C%BA%E9%97%B4%E5%92%8C.png" alt="区间和"></p><h3 id="重点理解find（）"><a href="#重点理解find（）" class="headerlink" title="重点理解find（）"></a>重点理解find（）</h3><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/%E9%87%8D%E7%82%B9%E7%90%86%E8%A7%A3find().png" alt="重点理解find()"></p><h2 id="区间合并"><a href="#区间合并" class="headerlink" title="区间合并"></a>区间合并</h2><h3 id="题目描述-19"><a href="#题目描述-19" class="headerlink" title="题目描述"></a>题目描述</h3><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230810023014183.png" alt="image-20230810023014183"></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">==输入样例==</span><br><span class="line">5</span><br><span class="line">1 2</span><br><span class="line">2 4</span><br><span class="line">5 6</span><br><span class="line">7 8</span><br><span class="line">7 9</span><br><span class="line">==输出样例==</span><br><span class="line">3</span><br></pre></td></tr></table></figure><h3 id="template-4"><a href="#template-4" class="headerlink" title="template"></a>template</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将所有存在交集的区间合并</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(vector&lt;PII&gt; &amp;segs)</span> </span>&#123;</span><br><span class="line">    vector&lt;PII&gt; ans;</span><br><span class="line">    <span class="comment">//先按区间左端点排序</span></span><br><span class="line">    <span class="built_in">sort</span>(segs.<span class="built_in">begin</span>(), segs.<span class="built_in">end</span>());</span><br><span class="line">    <span class="comment">//初始化当前管维护区间</span></span><br><span class="line">    <span class="type">int</span> st = <span class="number">-2e9</span>, ed = <span class="number">-2e9</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> seg : segs) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ed &lt; seg.first) &#123;<span class="comment">//当前维护区间与新区间没有重叠</span></span><br><span class="line">            <span class="keyword">if</span> (ed != <span class="number">-2e9</span>) ans.<span class="built_in">push_back</span>(&#123;st, ed&#125;);<span class="comment">//避免将初始化的区间加入</span></span><br><span class="line">            st = seg.first, ed = seg.second;</span><br><span class="line">        &#125; <span class="keyword">else</span> ed = <span class="built_in">max</span>(ed, seg.second);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//最后一个区间（同时防止一开始就没有区间）</span></span><br><span class="line">    <span class="keyword">if</span> (st != <span class="number">-2e9</span>) ans.<span class="built_in">push_back</span>(&#123;st, ed&#125;);</span><br><span class="line">    </span><br><span class="line">    segs = ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="完整代码-19"><a href="#完整代码-19" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; PII;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">vector&lt;PII&gt; segs;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(vector&lt;PII&gt; &amp;segs)</span> </span>&#123;</span><br><span class="line">    vector&lt;PII&gt; ret;</span><br><span class="line">    <span class="built_in">sort</span>(segs.<span class="built_in">begin</span>(), segs.<span class="built_in">end</span>());<span class="comment">//按左端点排序</span></span><br><span class="line">    <span class="type">int</span> st = <span class="number">-2e9</span>, ed = <span class="number">-2e9</span>;<span class="comment">//区间开头与结尾</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> item : segs) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ed &lt; item.first) &#123;<span class="comment">//两区间无法合并</span></span><br><span class="line">            <span class="keyword">if</span> (st != <span class="number">-2e9</span>) ret.<span class="built_in">push_back</span>(&#123;st, ed&#125;);<span class="comment">//区间1放入ret数组</span></span><br><span class="line">            st = item.first, ed = item.second;<span class="comment">//开始维护区间2</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ed = <span class="built_in">max</span>(ed, item.second);<span class="comment">//区间合并</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (st != <span class="number">-2e9</span>) ret.<span class="built_in">push_back</span>(&#123;st, ed&#125;);<span class="comment">//最后一个区间（同时防止一开始就没有区间）</span></span><br><span class="line">    segs = ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">while</span> (n -- ) &#123;</span><br><span class="line">        <span class="type">int</span> l, r;</span><br><span class="line">        cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line">        segs.<span class="built_in">push_back</span>(&#123;l, r&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">merge</span>(segs);</span><br><span class="line">    cout &lt;&lt; segs.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> AcWing </category>
          
          <category> 算法基础 </category>
          
          <category> 基础算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法基础课 </tag>
            
            <tag> 基础算法 </tag>
            
            <tag> 快速排序 </tag>
            
            <tag> 归并排序 </tag>
            
            <tag> 二分 </tag>
            
            <tag> 高精度 </tag>
            
            <tag> 前缀和 </tag>
            
            <tag> 差分 </tag>
            
            <tag> 双指针 </tag>
            
            <tag> 位运算 </tag>
            
            <tag> 离散化 </tag>
            
            <tag> 区间合并 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ios::sync_with_stdio</title>
      <link href="/AcWing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/Addition/about%20iossync_with_stdio(false)/"/>
      <url>/AcWing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/Addition/about%20iossync_with_stdio(false)/</url>
      
        <content type="html"><![CDATA[<h1 id="about-ios-sync-with-stdio-false"><a href="#about-ios-sync-with-stdio-false" class="headerlink" title="about ios::sync_with_stdio(false)"></a>about ios::sync_with_stdio(false)</h1><p>优点：提高 cin &gt;&gt; 的读取速度</p><p>缺点：是不能再使用 scanf() </p><p>输入规模 ≥ 一百万，建议使用 scanf() ——yxc</p><p>iostream默认是与stdio关联在一起的，以使两者同步，因此消耗了iostream不少性能。C++中的std :: cin和std :: cout为了兼容C，保证在代码中同时出现std :: cin和scanf或std :: cout和printf时输出不发生混乱，所以C++用一个流缓冲区来同步C的标准流。通过std :: ios_base :: sync_with_stdio函数设置为false后可以解除这种同步，让std :: cin和std :: cout不再经过缓冲区，iostream的性能就会提高了很多倍。因此，当解除同步之后，注意不要与scanf和printf混用以免出现问题。</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/%E6%80%A7%E8%83%BD%E6%AF%94%E8%BE%83.png" alt="性能比较"></p><p>第一条测试：加上了以下代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br></pre></td></tr></table></figure><p>第二条测试：加上了以下代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br></pre></td></tr></table></figure><p>还可以加上：cout.tie(0);</p>]]></content>
      
      
      <categories>
          
          <category> AcWing </category>
          
          <category> 算法基础 </category>
          
          <category> Addition </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>C++ STL</title>
      <link href="/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C/STL/C++%20STL/"/>
      <url>/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/C/STL/C++%20STL/</url>
      
        <content type="html"><![CDATA[<h1 id="C-STL"><a href="#C-STL" class="headerlink" title="C++ STL"></a>C++ STL</h1><p>[toc]</p><h2 id="bitset"><a href="#bitset" class="headerlink" title="bitset"></a>bitset</h2><h3 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bitset&gt;</span></span></span><br></pre></td></tr></table></figure><p>bitset类似数组，并且每一个元素只能是<strong>０或１</strong>，每个元素只用１bit空间</p><h3 id="初始化定义"><a href="#初始化定义" class="headerlink" title="初始化定义"></a>初始化定义</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">bitset&lt;4&gt; bitset1;　　  <span class="comment">//无参构造，长度为４，默认每一位为０</span></span><br><span class="line"><span class="function">bitset&lt;9&gt; <span class="title">bitset2</span><span class="params">(<span class="number">12</span>)</span></span>;　<span class="comment">//长度为9，二进制保存，前面用０补充</span></span><br><span class="line"></span><br><span class="line">string s = <span class="string">&quot;100101&quot;</span>;</span><br><span class="line"><span class="function">bitset&lt;10&gt; <span class="title">bitset3</span><span class="params">(s)</span></span>;　　<span class="comment">//长度为10，前面用０补充</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> s2[] = <span class="string">&quot;10101&quot;</span>;</span><br><span class="line"><span class="function">bitset&lt;13&gt; <span class="title">bitset4</span><span class="params">(s2)</span></span>;　　<span class="comment">//长度为13，前面用０补充</span></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; bitset1 &lt;&lt; endl;　　<span class="comment">//0000</span></span><br><span class="line">cout &lt;&lt; bitset2 &lt;&lt; endl;　　<span class="comment">//000001100</span></span><br><span class="line">cout &lt;&lt; bitset3 &lt;&lt; endl;　　<span class="comment">//0000100101</span></span><br><span class="line">cout &lt;&lt; bitset4 &lt;&lt; endl;　<span class="comment">//0000000010101</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><p>bitset可以进行位操作</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">bitset&lt;4&gt; <span class="title">foo</span> <span class="params">(string(<span class="string">&quot;1001&quot;</span>))</span></span>;</span><br><span class="line"><span class="function">bitset&lt;4&gt; <span class="title">bar</span> <span class="params">(string(<span class="string">&quot;0011&quot;</span>))</span></span>;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; (foo^=bar) &lt;&lt; endl;<span class="comment">// 1010 (foo对bar按位异或后赋值给foo)</span></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; (foo&amp;=bar) &lt;&lt; endl;<span class="comment">// 0001 (按位与后赋值给foo)</span></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; (foo|=bar) &lt;&lt; endl;<span class="comment">// 1011 (按位或后赋值给foo)</span></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; (foo&lt;&lt;=<span class="number">2</span>) &lt;&lt; endl;<span class="comment">// 0100 (左移2位，低位补0，有自身赋值)</span></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; (foo&gt;&gt;=<span class="number">1</span>) &lt;&lt; endl;<span class="comment">// 0100 (右移1位，高位补0，有自身赋值)</span></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; (~bar) &lt;&lt; endl;<span class="comment">// 1100 (按位取反)</span></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; (bar&lt;&lt;<span class="number">1</span>) &lt;&lt; endl;<span class="comment">// 0110 (左移，不赋值)</span></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; (bar&gt;&gt;<span class="number">1</span>) &lt;&lt; endl;<span class="comment">// 0001 (右移，不赋值)</span></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; (foo==bar) &lt;&lt; endl;<span class="comment">// false (1001==0011为false)</span></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; (foo!=bar) &lt;&lt; endl;<span class="comment">// true  (1001!=0011为true)</span></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; (foo&amp;bar) &lt;&lt; endl;<span class="comment">// 0001 (按位与，不赋值)</span></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; (foo|bar) &lt;&lt; endl;<span class="comment">// 1011 (按位或，不赋值)</span></span><br><span class="line"></span><br><span class="line">cout &lt;&lt; (foo^bar) &lt;&lt; endl;<span class="comment">// 1010 (按位异或，不赋值)</span></span><br></pre></td></tr></table></figure><h3 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//可以通过 [ ] 访问元素(类似数组)，注意最低位下标为0，如下：</span></span><br><span class="line"><span class="function">bitset&lt;4&gt; <span class="title">foo</span> <span class="params">(<span class="string">&quot;1011&quot;</span>)</span></span>; </span><br><span class="line"></span><br><span class="line">cout &lt;&lt; foo[<span class="number">0</span>] &lt;&lt; endl;　　<span class="comment">//1</span></span><br><span class="line">cout &lt;&lt; foo[<span class="number">1</span>] &lt;&lt; endl;　　<span class="comment">//0</span></span><br><span class="line">cout &lt;&lt; foo[<span class="number">2</span>] &lt;&lt; endl;　　<span class="comment">//1</span></span><br></pre></td></tr></table></figure><h3 id="方法函数"><a href="#方法函数" class="headerlink" title="方法函数"></a>方法函数</h3><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/bitset.png" alt="bitset"></p><h2 id="deque"><a href="#deque" class="headerlink" title="deque"></a>deque</h2><h3 id="头文件-1"><a href="#头文件-1" class="headerlink" title="头文件"></a>头文件</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;deque&gt;</span></span></span><br></pre></td></tr></table></figure><p>一种具有两端插入和删除操作的数据结构。它可以在队列的两端进行元素的插入和删除操作，因此可以用作栈和队列。</p><p>在双端队列中，元素可以从任何一端插入，也可以从任何一端删除。</p><h3 id="方法函数-1"><a href="#方法函数-1" class="headerlink" title="方法函数"></a>方法函数</h3><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/deque.png" alt="deque"></p><h3 id="attention"><a href="#attention" class="headerlink" title="attention"></a>attention</h3><p><em><strong>deque可以排序</strong></em></p><p>&#x2F;&#x2F;从小到大</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sort</span>(d.<span class="built_in">begin</span>(),d.<span class="built_in">end</span>())</span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F;从大到小排序</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sort</span>(q.<span class="built_in">begin</span>(), q.<span class="built_in">end</span>(), <span class="built_in">greater</span>&lt;<span class="type">int</span>&gt;());<span class="comment">//deque里面的类型需要是int型</span></span><br><span class="line"><span class="built_in">sort</span>(q.<span class="built_in">begin</span>(), q.<span class="built_in">end</span>(), <span class="built_in">greater</span>());<span class="comment">//高版本C++才可以用</span></span><br></pre></td></tr></table></figure><h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><h3 id="头文件-2"><a href="#头文件-2" class="headerlink" title="头文件"></a>头文件</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="初始化定义-1"><a href="#初始化定义-1" class="headerlink" title="初始化定义"></a>初始化定义</h3><p>map&lt;Type,Type&gt; mp;</p><p>map特性：map会按照键的顺序从小到大自动排序</p><h3 id="difference-between-map-and-unordered-map"><a href="#difference-between-map-and-unordered-map" class="headerlink" title="difference between map and unordered_map"></a>difference between map and unordered_map</h3><h4 id="map-1"><a href="#map-1" class="headerlink" title="map"></a>map</h4><h5 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h5><p>内部用红黑树实现，内部元素具有有序性，查询删除等操作时间复杂度均为O(logN)</p><h5 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h5><p>占用空间，红黑树里每个结点需要保存父子节点和红黑性质等信息，空间占用较大</p><h4 id="unordered-map"><a href="#unordered-map" class="headerlink" title="unordered_map"></a>unordered_map</h4><h5 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h5><p>内部用哈希表实现，查找速度非常快（适用于大量的查询操作）</p><h5 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h5><p>建立哈希表比较耗时</p><h3 id="函数方法"><a href="#函数方法" class="headerlink" title="函数方法"></a>函数方法</h3><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/map.png" alt="map"></p><p>注意：</p><p>查找元素是否存在时，可以使用<br> 1️⃣<code>mp.find()</code> 2️⃣ <code>mp.count()</code> 3️⃣ <code>mp[key]</code><br> 但是第三种情况，如果不存在对应的<code>key</code>时，会自动创建一个键值对（产生一个额外的键值对空间)<br> 所以为了不增加额外的空间负担，最好使用前两种方法</p><h4 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">map&lt;string,string&gt; mp;</span><br></pre></td></tr></table></figure><ol><li><p>查找元素的第三种情况，即自动创建一个不存在的键值对</p></li><li><p>插入元素构造键值对（总共三种形式）</p><ol><li><pre><code class="cpp">mp.insert(make_pair(&quot;banana&quot;,&quot;香蕉&quot;));<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">2. ``` cpp</span><br><span class="line">   mp.insert(pair&lt;string,string&gt;(&quot;pineapple&quot;,&quot;菠萝&quot;));</span><br></pre></td></tr></table></figure></code></pre></li><li><pre><code class="cpp">mp.insert(&#123;&quot;pear&quot;,&quot;梨子&quot;&#125;);<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">      </span><br><span class="line"></span><br><span class="line">#### 访问元素</span><br><span class="line"></span><br><span class="line">1. 下标访问（大部分情况用于访问一个元素）ps：一般先判断是否存在</span><br><span class="line"></span><br><span class="line">   ```cpp</span><br><span class="line">   if(mp.count(&quot;apple&quot;)) &#123;</span><br><span class="line">   cout&lt;&lt;mp[&quot;apple&quot;]&lt;&lt;endl;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></code></pre></li></ol></li><li><p>遍历访问（四种形式）</p><ol><li><p>迭代器访问</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">map&lt;string,string&gt;::iterator it;</span><br><span class="line"><span class="keyword">for</span>(it=mp.<span class="built_in">begin</span>();it!=mp.<span class="built_in">end</span>();++it) &#123;</span><br><span class="line">cout&lt;&lt;it-&gt;first&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;it-&gt;second&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>智能指针访问</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> i:mp) &#123;</span><br><span class="line">cout&lt;&lt;i.first&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;i.second&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>对指定单个元素访问</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">map&lt;string,string&gt;::iterator it1 = mp.<span class="built_in">find</span>(<span class="string">&quot;pear&quot;</span>);</span><br><span class="line">cout&lt;&lt;it1-&gt;first&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;it1-&gt;second&lt;&lt;endl;</span><br></pre></td></tr></table></figure></li><li><p>C++17特性才有</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span>[x,y] : mp) &#123;</span><br><span class="line">cout&lt;&lt;x&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;y&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol><h3 id="其他map"><a href="#其他map" class="headerlink" title="其他map"></a>其他map</h3><p>multimap：键可以重复，即一个键对应多</p><h2 id="pair"><a href="#pair" class="headerlink" title="pair"></a>pair</h2><h3 id="头文件-3"><a href="#头文件-3" class="headerlink" title="头文件"></a>头文件</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;utility&gt;</span></span></span><br></pre></td></tr></table></figure><p>pair只含有两个元素，可以看作是只有两个元素的结构体。</p><p>支持比较运算，按字典序，以first为第一关键字，second为第二关键字。</p><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><ul><li>代替二元结构体</li><li>作为map键值对进行插入（代码如下）</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">map&lt;string,<span class="type">int</span>&gt;mp;</span><br><span class="line">mp.<span class="built_in">insert</span>(<span class="built_in">pair</span>&lt;string,<span class="type">int</span>&gt;(<span class="string">&quot;xingmaqi&quot;</span>,<span class="number">1</span>));</span><br></pre></td></tr></table></figure><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">pair&lt;string,<span class="type">int</span>&gt; <span class="title">p</span><span class="params">(<span class="string">&quot;wangyaqi&quot;</span>,<span class="number">1</span>)</span></span>;<span class="comment">//带初始值的</span></span><br><span class="line">pair&lt;string,<span class="type">int</span>&gt; p;<span class="comment">//不带初始值的</span></span><br></pre></td></tr></table></figure><h3 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p = &#123;<span class="string">&quot;wang&quot;</span>,<span class="number">18</span>&#125;;</span><br></pre></td></tr></table></figure><h3 id="访问-1"><a href="#访问-1" class="headerlink" title="访问"></a>访问</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;p[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//和结构体类似，first代表第一个元素，second代表第二个元素</span></span><br><span class="line">cout &lt;&lt; p[i].first &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; p[i].second;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="priority-queue"><a href="#priority-queue" class="headerlink" title="priority_queue"></a>priority_queue</h2><h3 id="头文件-4"><a href="#头文件-4" class="headerlink" title="头文件"></a>头文件</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br></pre></td></tr></table></figure><p>默认是大根堆</p><p>优先队列是在正常队列的基础上加了优先级，保证每次的队首元素都是优先级最大的。</p><p>每次操作队列中的元素都是按优先级排序的</p><h3 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h3><p>priority_queue<Type> pq</p><h3 id="方法函数-2"><a href="#方法函数-2" class="headerlink" title="方法函数"></a>方法函数</h3><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/priority_queue.png" alt="priority_queue"></p><h3 id="设置优先级"><a href="#设置优先级" class="headerlink" title="设置优先级"></a>设置优先级</h3><h4 id="基本数据类型的优先级设置"><a href="#基本数据类型的优先级设置" class="headerlink" title="基本数据类型的优先级设置"></a>基本数据类型的优先级设置</h4><p>priority_queue&lt;int, vector&lt;int&gt;, less&lt;int&gt; &gt; pq;<br>&#x2F;&#x2F;最后两个&gt;之间要有空格</p><p>第二个参数：<br>vector&lt; int &gt; 是用来承载底层数据结构堆的容器，若优先队列中存放的是double型数据，就要填vector&lt; double &gt;<br>总之存的是什么类型的数据，就相应的填写对应类型。</p><p>第三个参数：<br>less&lt; int &gt; 表示数字大的优先级大，堆顶为最大的数字（大根堆）<br>greater&lt; int &gt;表示数字小的优先级大，堆顶为最小的数字（小根堆）<br>int代表的是数据类型，也要填对应的类型</p><h4 id="结构体（或自定义）优先级设置"><a href="#结构体（或自定义）优先级设置" class="headerlink" title="结构体（或自定义）优先级设置"></a>结构体（或自定义）优先级设置</h4><p>优先级设置可以定义在结构体内进行小于号重载，也可以定义在结构体外</p><p>&#x2F;&#x2F;要排序的结构体（存储在优先队列里面的）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x,y;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="Version-1"><a href="#Version-1" class="headerlink" title="Version 1"></a>Version 1</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义的比较结构体</span></span><br><span class="line"><span class="comment">//注意：cmp是个结构体 </span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">cmp</span></span><br><span class="line">&#123;<span class="comment">//自定义堆的排序规则 </span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">const</span> node&amp; a,<span class="type">const</span> node&amp; b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.x&gt;b.x;<span class="comment">//从堆底到堆顶 降序排序 </span></span><br><span class="line">&#125;<span class="comment">//如果要升序改变不等号方向就好</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化定义， </span></span><br><span class="line">priority_queue&lt;node,vector&lt;node&gt;,cmp &gt; pq; </span><br></pre></td></tr></table></figure><h5 id="Version-2"><a href="#Version-2" class="headerlink" title="Version 2"></a>Version 2</h5><p>因为是在node里面自定义的规则，所以是node里面的值自动排了，并不需要cmp结构体了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x,y;</span><br><span class="line"><span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;(node a,node b)</span><br><span class="line">&#123;<span class="comment">//为两个结构体参数，结构体调用一定要写上friend</span></span><br><span class="line"><span class="keyword">return</span> a.x&gt;b.x;<span class="comment">//按x从小到大排 </span></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> &lt; (<span class="type">const</span> node&amp; a) <span class="type">const</span></span><br><span class="line">    &#123;<span class="comment">//直接传入一个参数，不必要写friend</span></span><br><span class="line">        <span class="keyword">return</span> x &gt; a.x;<span class="comment">//优先级大的为x小的值，升序排列</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//优先队列的定义</span></span><br><span class="line"></span><br><span class="line">priority_queue&lt;node&gt; pq4;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong> 优先对列自定义排序规则和sort()函数定义cmp函数很相似，但是最后返回的情况是相反的。即相同的符号，最后定义的排列顺序是完全相反的。<br>所以只需要记住sort的排序规则和优先队列的排序规则是相反的就可以了。</p><h4 id="存储特殊类型的优先级"><a href="#存储特殊类型的优先级" class="headerlink" title="存储特殊类型的优先级"></a>存储特殊类型的优先级</h4><p>存储pair类型：</p><p>默认先对pair的first进行降序排序，然后再对second降序排序</p><h2 id="queue"><a href="#queue" class="headerlink" title="queue"></a>queue</h2><h3 id="头文件-5"><a href="#头文件-5" class="headerlink" title="头文件"></a>头文件</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br></pre></td></tr></table></figure><p>一种先进先出的数据结构</p><h3 id="声明-1"><a href="#声明-1" class="headerlink" title="声明"></a>声明</h3><p>queue<Type> q</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/queue.png" alt="queue"></p><h3 id="队列模拟"><a href="#队列模拟" class="headerlink" title="队列模拟"></a>队列模拟</h3><p>使用q[]数组模拟队列<br> <code>hh</code>表示队首元素的下标，初始值为<code>0</code><br> <code>tt</code>表示队尾元素的下标，初始值为<code>-1</code>，表示刚开始队列为空</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> q[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> hh = <span class="number">0</span>,tt = <span class="number">-1</span>;</span><br><span class="line"><span class="comment">//入队 </span></span><br><span class="line">q[++tt] = <span class="number">1</span>;</span><br><span class="line">q[++tt] = <span class="number">2</span>; </span><br><span class="line"><span class="comment">//出队 </span></span><br><span class="line"><span class="keyword">while</span>(hh&lt;=tt)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> t = q[hh++];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,t);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125; </span><br></pre></td></tr></table></figure><h2 id="set"><a href="#set" class="headerlink" title="set"></a>set</h2><h3 id="头文件-6"><a href="#头文件-6" class="headerlink" title="头文件"></a>头文件</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;set&gt;</span></span></span><br></pre></td></tr></table></figure><p>set容器中的元素不会重复，当插入集合中已有的元素时，并不会插入进去，而且set容器里的元素自动从小到大排序。</p><p>即：set里面的元素<strong>不重复</strong> 且 <strong>有序</strong></p><h3 id="初始化定义-2"><a href="#初始化定义-2" class="headerlink" title="初始化定义"></a>初始化定义</h3><p>set<Type> se;</p><h3 id="函数方法-1"><a href="#函数方法-1" class="headerlink" title="函数方法"></a>函数方法</h3><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/set.png" alt="set"></p><h3 id="访问-2"><a href="#访问-2" class="headerlink" title="访问"></a>访问</h3><h4 id="遍历访问"><a href="#遍历访问" class="headerlink" title="遍历访问"></a>遍历访问</h4><ol><li><p>迭代器访问</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(set&lt;<span class="type">int</span>&gt;::iterator it=se.<span class="built_in">begin</span>();it!=se.<span class="built_in">end</span>();++it) &#123;</span><br><span class="line">cout&lt;&lt;*it&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;cout&lt;&lt;endl;</span><br></pre></td></tr></table></figure></li><li><p>智能指针访问</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> it:se) &#123;</span><br><span class="line">cout&lt;&lt;it&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;cout&lt;&lt;endl;</span><br></pre></td></tr></table></figure></li></ol><h4 id="访问最后一个元素"><a href="#访问最后一个元素" class="headerlink" title="访问最后一个元素"></a>访问最后一个元素</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1th</span></span><br><span class="line">cout&lt;&lt;*se.<span class="built_in">rbegin</span>()&lt;&lt;endl;</span><br><span class="line"><span class="comment">//2th</span></span><br><span class="line">set&lt;<span class="type">int</span>&gt;::iterator w=se.<span class="built_in">end</span>();</span><br><span class="line">--w;</span><br><span class="line">cout&lt;&lt;*w&lt;&lt;endl;</span><br><span class="line"><span class="comment">//3th</span></span><br><span class="line">cout&lt;&lt;*(--se.<span class="built_in">end</span>())&lt;&lt;endl;</span><br></pre></td></tr></table></figure><h3 id="其他set"><a href="#其他set" class="headerlink" title="其他set"></a>其他set</h3><p>multiset:元素可以重复，且元素有序<br>unordered_set ：元素无序且只能出现一次<br>unordered_multiset ： 元素无序可以出现多次</p><h2 id="stack"><a href="#stack" class="headerlink" title="stack"></a>stack</h2><h3 id="头文件-7"><a href="#头文件-7" class="headerlink" title="头文件"></a>头文件</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br></pre></td></tr></table></figure><p>数据结构的一种，是STL中实现的一个先进后出，后进先出的容器</p><h3 id="声明-2"><a href="#声明-2" class="headerlink" title="声明"></a>声明</h3><p>stack<Type> sta;</p><h3 id="方法函数-3"><a href="#方法函数-3" class="headerlink" title="方法函数"></a>方法函数</h3><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/stack.png" alt="stack"></p><h3 id="attention-1"><a href="#attention-1" class="headerlink" title="attention"></a>attention</h3><h3 id="栈遍历"><a href="#栈遍历" class="headerlink" title="栈遍历"></a>栈遍历</h3><p>栈只能对栈顶元素进行操作，如果想要进行遍历，只能将栈中元素一个个取出来存在数组中</p><h3 id="模拟栈"><a href="#模拟栈" class="headerlink" title="模拟栈"></a>模拟栈</h3><p>可以通过一个数组对栈进行模拟，一个存放下标的变量top模拟指向栈顶的指针。</p><p>特点: 比stack更快，如果能模拟就模拟，会减少时间。</p><p>如果想要在栈中存放不同的数据类型，可以考虑使用vector数组进行模拟栈。</p><h2 id="string"><a href="#string" class="headerlink" title="string"></a>string</h2><h3 id="头文件-8"><a href="#头文件-8" class="headerlink" title="头文件"></a>头文件</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">/*初始化及定义</span></span><br><span class="line"><span class="comment">string str1;   //生成空字符串</span></span><br><span class="line"><span class="comment">string str2(&quot;123456789&quot;);//生成&quot;123456789&quot;复制品</span></span><br><span class="line"><span class="comment">string str3(&quot;12345&quot;,0,3);//结果&quot;123&quot;,从0位置开始，长度为3</span></span><br><span class="line"><span class="comment">string str4(&quot;123456&quot;,5);//结果&quot;12345&quot;，长度为5</span></span><br><span class="line"><span class="comment">string str5(5,&#x27;2&#x27;);    //结果&quot;22222&quot;，构造五个字符&#x27;2&#x27;连接而成的字符串</span></span><br><span class="line"><span class="comment">string str6(str2,2);//结果&quot;3456789&quot;,截取第三个元素到最后</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/*访问单个元素</span></span><br><span class="line"><span class="comment">当成数组用下标即可</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">string s = <span class="string">&quot;ChatGPT&quot;</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s.<span class="built_in">size</span>();i++) &#123;</span><br><span class="line">cout&lt;&lt;s[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;cout&lt;&lt;endl;</span><br><span class="line">    <span class="comment">//string数组使用</span></span><br><span class="line">    string ss[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">ss[i] = <span class="string">&quot;loading...  &quot;</span> ;</span><br><span class="line">cout &lt;&lt; ss[i] &lt;&lt; i &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="comment">/*string特性</span></span><br><span class="line"><span class="comment">支持&#x27;+&#x27;运算符</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">s += <span class="string">&quot; excellent!&quot;</span>;</span><br><span class="line">cout&lt;&lt;s&lt;&lt;endl;</span><br><span class="line"><span class="comment">/*读入详解</span></span><br><span class="line"><span class="comment">string s;</span></span><br><span class="line"><span class="comment">1th.读入字符串，遇空格、回车结束，cin&gt;&gt;s</span></span><br><span class="line"><span class="comment">2th.读入一行字符串(包括空格)，遇回车结束getline(cin,s)</span></span><br><span class="line"><span class="comment">ps:getline(cin,s)会获取前一个输入的换行符</span></span><br><span class="line"><span class="comment">需要在前面添加读取换行符的语句，如getchar()或cin.get()</span></span><br><span class="line"><span class="comment">ps:cin&gt;&gt;与cin.getline()混用</span></span><br><span class="line"><span class="comment">cin输入完后，回车，cin遇到回车结束输入，但回车还在输入流中，cin并不会消除，导致getline()读取回车，输入结束，需要在cin后面加上cin.ignore()主动删除输入流中的换行符</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line">string t;</span><br><span class="line"><span class="comment">//cin.get();</span></span><br><span class="line"><span class="comment">//getchar();</span></span><br><span class="line">cin.<span class="built_in">ignore</span>();</span><br><span class="line"><span class="built_in">getline</span>(cin,t);</span><br><span class="line">cout&lt;&lt;n&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;t&lt;&lt;endl;</span><br><span class="line"><span class="comment">/*string 与 (C-string)区别</span></span><br><span class="line"><span class="comment">string 结尾没有\0字符</span></span><br><span class="line"><span class="comment">const char* 结尾以\0结尾</span></span><br><span class="line"><span class="comment">c_str()实现string到char数组的转换(c_str()返回字符串所在字符数组的起始地址)</span></span><br><span class="line"><span class="comment">strcpy和.data()也可实现</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">s += &quot;\0&quot;;</span></span><br><span class="line"><span class="comment">const char* q=s.c_str();</span></span><br><span class="line"><span class="comment">cout&lt;&lt;q[9]&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">char</span> q[s.<span class="built_in">length</span>()+<span class="number">1</span>];          </span><br><span class="line"><span class="built_in">strcpy</span>(q,s.<span class="built_in">data</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数方法-2"><a href="#函数方法-2" class="headerlink" title="函数方法"></a>函数方法</h3><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/string(1).png" alt="string(1)"></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/string(2)png.png" alt="string(2)png"></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/string(3).png" alt="string(3)"></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/string(4).png" alt="string(4)"></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/string(5).png" alt="string(5)"></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/string(6).png" alt="string(6)"></p><h3 id="大小写转换"><a href="#大小写转换" class="headerlink" title="大小写转换"></a>大小写转换</h3><h4 id="Method-1"><a href="#Method-1" class="headerlink" title="Method 1"></a>Method 1</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">string s1 = <span class="string">&quot;WELCOME,THIS IS MY HOUSE!&quot;</span>;</span><br><span class="line">s1[<span class="number">3</span>] = <span class="built_in">tolower</span>(s1[<span class="number">3</span>]);</span><br><span class="line">cout&lt;&lt;s1&lt;&lt;endl;</span><br><span class="line">string s2 = <span class="string">&quot;ChatGPT-Lee&quot;</span>;</span><br><span class="line">s2[<span class="number">1</span>] = <span class="built_in">toupper</span>(s2[<span class="number">1</span>]);</span><br><span class="line">cout&lt;&lt;s2&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Method-2"><a href="#Method-2" class="headerlink" title="Method 2"></a>Method 2</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//transform函数需要包含头文件&lt;algorithm&gt;</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">前两个参数是是原容器的两个迭代器(咱们要进行移植的也就是两个迭代器之间的元素)</span></span><br><span class="line"><span class="comment">第三个参数是目标容器的初始迭代器(注意这与简单的push_back不同，在这目标容器要自己声明容量)</span></span><br><span class="line"><span class="comment">第四个参数是个函数名，在这个函数中有一些操作，实际上就是将原容器中的元素取出来，进行函数中</span></span><br><span class="line"><span class="comment">的操作之后，在放回到目标容器中。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">s = <span class="string">&quot;I am Critical Factor!&quot;</span>;</span><br><span class="line"><span class="built_in">transform</span>(s.<span class="built_in">begin</span>(),s.<span class="built_in">end</span>(),s.<span class="built_in">begin</span>(),::tolower);<span class="comment">//转换小写</span></span><br><span class="line">cout&lt;&lt;s&lt;&lt;endl;</span><br><span class="line"><span class="built_in">transform</span>(s.<span class="built_in">begin</span>(),s.<span class="built_in">end</span>(),s.<span class="built_in">begin</span>(),::toupper);<span class="comment">//转换大写</span></span><br><span class="line">cout&lt;&lt;s&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sort</span>(s.<span class="built_in">begin</span>(),s.<span class="built_in">end</span>());  <span class="comment">//按ASCII码排序</span></span><br></pre></td></tr></table></figure><h2 id="tuple"><a href="#tuple" class="headerlink" title="tuple"></a>tuple</h2><h3 id="头文件-9"><a href="#头文件-9" class="headerlink" title="头文件"></a>头文件</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;tuple&gt;</span></span></span><br></pre></td></tr></table></figure><p>tuple模板是pair的<strong>泛化</strong>，可以封装<strong>不同类型任意数量</strong>的对象。</p><p>可以把tuple理解为pair的扩展，tuple可以声明二元组，也可以声明三元组。</p><p>tuple可以等价为<strong>结构体</strong>使用</p><h3 id="声明即初始化"><a href="#声明即初始化" class="headerlink" title="声明即初始化"></a>声明即初始化</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明一个空的tuple三元组</span></span><br><span class="line">tuple&lt;<span class="type">int</span>, <span class="type">int</span>, string&gt; t1;</span><br><span class="line"><span class="comment">//赋值</span></span><br><span class="line">t1 = <span class="built_in">make_tuple</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="string">&quot;hahaha&quot;</span>);</span><br><span class="line"><span class="comment">//创建的同时初始化</span></span><br><span class="line"><span class="function">tuple&lt;<span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>&gt; <span class="title">t2</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span></span>;</span><br><span class="line"><span class="comment">//可以使用pair对象构造tuple对象，但tuple对象必须是两个元素</span></span><br><span class="line"><span class="keyword">auto</span> p = <span class="built_in">make_pair</span>(<span class="string">&quot;wang&quot;</span>, <span class="number">1</span>);</span><br><span class="line">tuple&lt;string, <span class="type">int</span>&gt; t3 &#123;p&#125;; <span class="comment">//将pair对象赋给tuple对象</span></span><br></pre></td></tr></table></figure><h3 id="元素操作"><a href="#元素操作" class="headerlink" title="元素操作"></a>元素操作</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取tuple对象t的第一个元素</span></span><br><span class="line"><span class="type">int</span> first = <span class="built_in">get</span>&lt;<span class="number">0</span>&gt;(t);</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改tuple对象t的第一个元素</span></span><br><span class="line"><span class="built_in">get</span>&lt;<span class="number">0</span>&gt;(t) = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h3 id="函数用法"><a href="#函数用法" class="headerlink" title="函数用法"></a>函数用法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取元素个数</span></span><br><span class="line"><span class="function">tuple&lt;<span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>&gt; <span class="title">t</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span></span>;</span><br><span class="line">cout &lt;&lt; tuple_size&lt;<span class="keyword">decltype</span>(t)&gt;::value &lt;&lt; <span class="string">&quot;\n&quot;</span>; <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//获取对应元素的值</span></span><br><span class="line"><span class="function">tuple&lt;<span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>&gt; <span class="title">t</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span></span>;</span><br><span class="line">cout &lt;&lt; <span class="built_in">get</span>&lt;<span class="number">0</span>&gt;(t) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>; <span class="comment">// 1</span></span><br><span class="line">cout &lt;&lt; <span class="built_in">get</span>&lt;<span class="number">1</span>&gt;(t) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>; <span class="comment">// 2</span></span><br><span class="line">cout &lt;&lt; <span class="built_in">get</span>&lt;<span class="number">2</span>&gt;(t) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>; <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//通过tie解包 获取元素值</span></span><br><span class="line"><span class="type">int</span> one, three;</span><br><span class="line">string two; </span><br><span class="line"><span class="function">tuple&lt;<span class="type">int</span>, string, <span class="type">int</span>&gt; <span class="title">t</span><span class="params">(<span class="number">1</span>, <span class="string">&quot;hahaha&quot;</span>, <span class="number">3</span>)</span></span>;</span><br><span class="line"><span class="built_in">tie</span>(one, two, three) = t;</span><br><span class="line">cout &lt;&lt; one &lt;&lt; two &lt;&lt; three &lt;&lt; <span class="string">&quot;\n&quot;</span>; <span class="comment">// 1hahaha3</span></span><br></pre></td></tr></table></figure><h2 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h2><h3 id="头文件-10"><a href="#头文件-10" class="headerlink" title="头文件"></a>头文件</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br></pre></td></tr></table></figure><p>vector 为可变长数组（动态数组）</p><h3 id="初始化-1"><a href="#初始化-1" class="headerlink" title="初始化"></a>初始化</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; num; <span class="comment">//动态长度数组</span></span><br><span class="line"></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">v</span><span class="params">(<span class="number">5</span>)</span></span>;<span class="comment">//指定长度数组，和普通数组一样</span></span><br></pre></td></tr></table></figure><h4 id="拷贝初始化"><a href="#拷贝初始化" class="headerlink" title="拷贝初始化"></a>拷贝初始化</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n+<span class="number">1</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">b</span><span class="params">(a)</span></span>;</span><br></pre></td></tr></table></figure><p>两个数组必须类型相同，a和b的长度都为n+1，所有值为0的数组</p><h4 id="二维初始化"><a href="#二维初始化" class="headerlink" title="二维初始化"></a>二维初始化</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; num <span class="comment">//行列均动态变化的二维数组</span></span><br><span class="line"></span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">a</span>(n+<span class="number">1</span>,<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(m + <span class="number">1</span>,<span class="number">0</span>));<span class="comment">//行列长度均固定，n+1行，每行m+1列，初始值均为0</span></span><br></pre></td></tr></table></figure><h3 id="元素访问"><a href="#元素访问" class="headerlink" title="元素访问"></a>元素访问</h3><ol><li><p>单个访问，可像一般数组一样通过下标访问</p></li><li><p>遍历：</p><ol><li><pre><code class="cpp">    for(int i=0;i&lt;num.size();++i) &#123;//size()返回实际数据个数（unsigned类型）     cout&lt;&lt;num[i]&lt;&lt;&quot; &quot;;       &#125;cout&lt;&lt;endl;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">2. 迭代器访问：</span><br><span class="line"></span><br><span class="line">   ```cpp</span><br><span class="line">   vector&lt;int&gt;::iterator it;</span><br></pre></td></tr></table></figure>1. ```cpp   vector&lt;int&gt;::iterator it1 = num.begin();       for(int i=0;i&lt;num.size();++i) &#123;           cout&lt;&lt;*(it1+i)&lt;&lt;&quot; &quot;;       &#125;cout&lt;&lt;endl;   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">2. ```cpp</span><br><span class="line">   vector&lt;int&gt;::iterator it2;</span><br><span class="line">   for(it2=num.begin();it2 != num.end();it2++) &#123;</span><br><span class="line">   cout&lt;&lt;*it2&lt;&lt;&quot; &quot;;</span><br><span class="line">   &#125;cout&lt;&lt;endl;</span><br></pre></td></tr></table></figure></code></pre></li></ol></li><li><p>智能指针访问：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> it:num) &#123;</span><br><span class="line">cout&lt;&lt;it&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;cout&lt;&lt;endl;</span><br></pre></td></tr></table></figure></li></ol><h3 id="排序-1"><a href="#排序-1" class="headerlink" title="排序"></a>排序</h3>   <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sort</span>(c.<span class="built_in">begin</span>(),c.<span class="built_in">end</span>());</span><br></pre></td></tr></table></figure><h3 id="方法函数-4"><a href="#方法函数-4" class="headerlink" title="方法函数"></a>方法函数</h3><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/vector.png" alt="vector"></p><h3 id="attention-2"><a href="#attention-2" class="headerlink" title="attention"></a>attention</h3><p>vector数组能够直接用 ‘&#x3D;’ 比较大小.(支持比较运算，按字典序)</p><h2 id="STL常用函数"><a href="#STL常用函数" class="headerlink" title="STL常用函数"></a>STL常用函数</h2><h3 id="accumulate-beg-end-init"><a href="#accumulate-beg-end-init" class="headerlink" title="accumulate(beg,end,init)"></a>accumulate(beg,end,init)</h3><p>时间复杂度：O（N）</p><p>作用：对一个序列的元素求和</p><p>beg为序列的初始地址，end为序列的尾地址，init 为对序列元素求和的<strong>初始值</strong></p><p>返回值类型：与init</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[]=&#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对[0,2]区间求和，初始值为0，结果为0+1+3+5=9</span></span><br><span class="line"><span class="type">int</span> res1 = <span class="built_in">accumulate</span>(a,a+<span class="number">3</span>,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//对[0,3]区间求和，初始值为5，结果为5+1+3+5+9=23</span></span><br><span class="line"><span class="type">int</span> res2 = <span class="built_in">accumulate</span>(a,a+<span class="number">4</span>,<span class="number">5</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="atoi-const-char"><a href="#atoi-const-char" class="headerlink" title="atoi(const char*)"></a>atoi(const char*)</h3><p>作用：将字符串转换为int类型</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">string s1 = <span class="string">&quot;1234&quot;</span>;</span><br><span class="line"><span class="type">int</span> a = <span class="built_in">atoi</span>(s1.<span class="built_in">c_str</span>());</span><br><span class="line">cout &lt;&lt; a &lt;&lt; <span class="string">&quot;\n&quot;</span>; <span class="comment">// 1234</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> s2[] = <span class="string">&quot;1234&quot;</span>;</span><br><span class="line"><span class="type">int</span> a = <span class="built_in">atoi</span>(s2);</span><br><span class="line">cout &lt;&lt; a &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br></pre></td></tr></table></figure><p><code>atoi</code>不做范围检查，如果超出上界，输出上界，超出下界，输出下界。</p><p>int范围：-2147483648~2147483647</p><h3 id="stoi-const-string"><a href="#stoi-const-string" class="headerlink" title="stoi(const string*)"></a>stoi(const string*)</h3><p>作用：将对应string类型字符串转换为数字</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">string s = <span class="string">&quot;1234&quot;</span>;</span><br><span class="line"><span class="type">int</span> a = <span class="built_in">stoi</span>(s);</span><br><span class="line">cout &lt;&lt; a &lt;&lt; <span class="string">&quot;\n&quot;</span>; <span class="comment">// 1234</span></span><br></pre></td></tr></table></figure><p><code>stoi</code>会做范围检查，默认必须在<code>int</code>范围内，如果超出范围，会出现RE（Runtime Error）错误。</p><h3 id="to-string"><a href="#to-string" class="headerlink" title="to_string()"></a>to_string()</h3><p>作用：将数字转化为字符串,支持小数（double）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">12345678</span>;</span><br><span class="line">cout&lt;&lt;<span class="built_in">to_string</span>(a)&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="is-sorted-beg-end"><a href="#is-sorted-beg-end" class="headerlink" title="is_sorted(beg,end)"></a>is_sorted(beg,end)</h3><p>时间复杂度：O（N）</p><p>作用：判断序列是否有序(升序)，返回bool值</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果序列有序，输出YES</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">is_sorted</span>(a,a+n))</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;YES\n&quot;</span>;</span><br></pre></td></tr></table></figure><h3 id="lower-bound-和-upper-bound"><a href="#lower-bound-和-upper-bound" class="headerlink" title="lower_bound() 和 upper_bound()"></a>lower_bound() 和 upper_bound()</h3><p>时间复杂度：O（logN）</p><p>作用：二分查找</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在a数组中查找第一个大于等于x的元素，返回该元素的地址</span></span><br><span class="line"><span class="built_in">lower_bound</span>(a,a+n,x);</span><br><span class="line"><span class="comment">//在a数组中查找第一个大于x的元素，返回该元素的地址</span></span><br><span class="line"><span class="built_in">upper_bound</span>(a,a+n,x);</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果未找到，返回尾地址的下一个位置的地址</span></span><br></pre></td></tr></table></figure><h3 id="max-element-和-min-element"><a href="#max-element-和-min-element" class="headerlink" title="max_element() 和 min_element()"></a>max_element() 和 min_element()</h3><p>时间复杂度：O（N）</p><p>作用：找最大值最小值</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数都是返回地址，需要加*取值</span></span><br><span class="line"><span class="type">int</span> mx = *<span class="built_in">max_element</span>(a,a+n);</span><br><span class="line"><span class="type">int</span> mn = *<span class="built_in">min_element</span>(a,a+n);</span><br></pre></td></tr></table></figure><h3 id="max-和-min"><a href="#max-和-min" class="headerlink" title="max() 和 min()"></a>max() 和 min()</h3><p>时间复杂度：O（1）</p><p>作用：找多个元素的最大值和最小值</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//找a，b的最大值和最小值</span></span><br><span class="line">mx = <span class="built_in">max</span>(a,b);</span><br><span class="line">mn = <span class="built_in">min</span>(a,b);</span><br><span class="line"></span><br><span class="line"><span class="comment">//找到a,b,c,d的最大值和最小值</span></span><br><span class="line">mx = <span class="built_in">max</span>(&#123;a,b,c,d&#125;);</span><br><span class="line">mn = <span class="built_in">min</span>(&#123;a,b,c,d&#125;);</span><br></pre></td></tr></table></figure><h3 id="reverse-beg-end"><a href="#reverse-beg-end" class="headerlink" title="reverse(beg,end)"></a>reverse(beg,end)</h3><p>时间复杂度：O（N）</p><p>作用：对序列进行翻转</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">string s = <span class="string">&quot;abcde&quot;</span>;</span><br><span class="line"><span class="built_in">reverse</span>(s.<span class="built_in">begin</span>(),s.<span class="built_in">end</span>());<span class="comment">//对s进行翻转</span></span><br><span class="line">cout&lt;&lt;s&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;<span class="comment">//edcba</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//对a数组进行翻转</span></span><br><span class="line"><span class="type">int</span> a[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line"><span class="built_in">reverse</span>(a,a+<span class="number">4</span>);</span><br><span class="line">cout&lt;&lt;a[<span class="number">0</span>]&lt;&lt;a[<span class="number">1</span>]&lt;&lt;a[<span class="number">2</span>]&lt;&lt;a[<span class="number">3</span>];<span class="comment">//4321</span></span><br></pre></td></tr></table></figure><h3 id="sort-和-stable-sort"><a href="#sort-和-stable-sort" class="headerlink" title="sort() 和 stable_sort()"></a>sort() 和 stable_sort()</h3><p>时间复杂度：O（NlogN）</p><p>作用：对一个序列进行排序</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//原型：</span></span><br><span class="line"><span class="built_in">sort</span>(beg,end);</span><br><span class="line"><span class="built_in">sort</span>(beg,end,cmp);</span><br><span class="line"></span><br><span class="line"><span class="comment">//对a数组的[1,n]位置进行从小到大排序</span></span><br><span class="line"><span class="built_in">sort</span>(a+<span class="number">1</span>,a+<span class="number">1</span>+n);</span><br><span class="line"></span><br><span class="line"><span class="comment">//对a数组的[0,n-1]位置从大到小排序</span></span><br><span class="line"><span class="built_in">sort</span>(a,a+n,<span class="built_in">greater</span>&lt;<span class="type">int</span>&gt;());</span><br><span class="line"><span class="comment">//对a数组的[0,n-1]位置从小到大排序</span></span><br><span class="line"><span class="built_in">sort</span>(a,a+n,<span class="built_in">less</span>&lt;<span class="type">int</span>&gt;());</span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义排序，定义比较函数</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(node a,node b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//按结构体里面的x值降序排列</span></span><br><span class="line">    <span class="keyword">return</span> a.x&gt;b.x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(node,node+n,cmp);</span><br></pre></td></tr></table></figure><blockquote><p>stable_sort()功能和sort()基本一样</p><p>区别在于stable_sort()能够保证相等元素的相对位置，排序时不会改变相等元素的相对位置</p></blockquote><h3 id="unique-beg-end"><a href="#unique-beg-end" class="headerlink" title="unique(beg,end)"></a>unique(beg,end)</h3><p>时间复杂度：O（N）</p><p>作用：消除重复元素，返回消除完重复元素的下一个位置的地址</p><blockquote><p>如：a[] &#x3D; {1,2,3,3,4 };</p><p>unique之后a数组为{1,2,3,4,3}前面为无重复元素的数组，后面则是重复元素移到后面，返回a[4]位置的地址（不重复元素的尾后地址）</p></blockquote><p>消除重复元素一般需要原序列是<strong>有序序列</strong></p><p><strong>运用：离散化</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line">    cin&gt;&gt;a[i];</span><br><span class="line">    b[i] = a[i];<span class="comment">//将a数组复制到b数组</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(b,b+n);<span class="comment">//对b数组排序</span></span><br><span class="line"><span class="built_in">unique</span>(b,b+n);<span class="comment">//消除b重复元素</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//因为b有序，查找到的下标就是对应的 相对大小（离散化后的值）</span></span><br><span class="line">    <span class="type">int</span> pos = <span class="built_in">lower_bound</span>(b,b+n,a[i])-b;<span class="comment">//在b数组中二分查找第一个大于等于a[i]的下标</span></span><br><span class="line">    a[i] = pos;<span class="comment">//赋值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="gcd-a-b"><a href="#gcd-a-b" class="headerlink" title="_gcd(a,b)"></a>_gcd(a,b)</h3><p>作用：求a和b的最大公约数</p><h3 id="lg-a"><a href="#lg-a" class="headerlink" title="_lg(a)"></a>_lg(a)</h3><p>作用：求一个数二进制下最高位位于第几位(从<strong>第0位</strong>开始)（或二进制数下有几位）</p>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
          <category> C++ </category>
          
          <category> STL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STL </tag>
            
            <tag> vector </tag>
            
            <tag> queue </tag>
            
            <tag> deque </tag>
            
            <tag> priority_queue </tag>
            
            <tag> stack </tag>
            
            <tag> string </tag>
            
            <tag> pair </tag>
            
            <tag> tuple </tag>
            
            <tag> set </tag>
            
            <tag> map </tag>
            
            <tag> bitset </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AcWing周赛</title>
      <link href="/AcWing/%E5%91%A8%E8%B5%9B/AcWing%E5%91%A8%E8%B5%9B/"/>
      <url>/AcWing/%E5%91%A8%E8%B5%9B/AcWing%E5%91%A8%E8%B5%9B/</url>
      
        <content type="html"><![CDATA[<h1 id="AcWing周赛"><a href="#AcWing周赛" class="headerlink" title="AcWing周赛"></a>AcWing周赛</h1><p>[TOC]</p><h2 id="双色球"><a href="#双色球" class="headerlink" title="双色球"></a>双色球</h2><h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><p><code>概率</code> <code>DP</code></p><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">约翰和贝茜玩抽球游戏。</span><br><span class="line">一个盒子中有 n个白球和 m个黑球。</span><br><span class="line">双方轮流行动，由约翰先行。</span><br><span class="line">每当轮到一方行动时，其从盒中随机抽出一个球，盒子中的每个球被抽出的概率相同。率先抽出白球的一方获胜。</span><br><span class="line">此外，由于贝茜的手比较笨拙，所以每当她抽出一个球后，盒子都会剧烈摇晃，</span><br><span class="line">随后就会有恰好一个球掉出盒子（如果盒中有球的话），盒子中的每个球掉出的概率相同。</span><br><span class="line">掉出的球无论是什么颜色，都予以作废。</span><br><span class="line">当盒子中没有球时，如果仍未分出胜负，则判定为贝茜获胜。</span><br><span class="line">请你计算，约翰获胜的概率。</span><br><span class="line"></span><br><span class="line">输入格式</span><br><span class="line">一行，两个整数 n,m。</span><br><span class="line">输出格式</span><br><span class="line">一个实数，表示约翰获胜的概率。</span><br><span class="line">输出结果与正确答案的绝对误差不超过 10?9，则视为正确。</span><br><span class="line">数据范围</span><br><span class="line">前 4个测试点满足 0≤n,m≤100。</span><br><span class="line">所有测试点满足 0≤n,m≤1000。</span><br><span class="line"></span><br><span class="line">输入样例1：</span><br><span class="line">1 3</span><br><span class="line">输出样例1：</span><br><span class="line">0.500000000</span><br><span class="line"></span><br><span class="line">输入样例2：</span><br><span class="line">5 5</span><br><span class="line">输出样例2：</span><br><span class="line">0.658730159</span><br></pre></td></tr></table></figure><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">double</span> dp[<span class="number">1010</span>][<span class="number">1010</span>] = &#123;<span class="number">0.0</span>&#125;;</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">john_win_probability</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> m)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        dp[i][<span class="number">0</span>] = <span class="number">1.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; ++j) &#123;</span><br><span class="line">        dp[<span class="number">0</span>][j] = <span class="number">0.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 动态规划计算概率</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; ++j) &#123;</span><br><span class="line">            <span class="type">double</span> total_balls = i + j;</span><br><span class="line">            dp[i][j] = (<span class="type">double</span>)i / total_balls; <span class="comment">//直接抽到白球的概率</span></span><br><span class="line">            <span class="keyword">if</span> (j &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="comment">//掉出来的球是白球的情况</span></span><br><span class="line">dp[i][j] += (<span class="type">double</span>)j / total_balls * ((<span class="type">double</span>)(j - <span class="number">1</span>) / (total_balls - <span class="number">1</span>)) * (<span class="type">double</span>)i / (total_balls - <span class="number">2</span>) * dp[i<span class="number">-1</span>][j - <span class="number">2</span>];<span class="comment">//贝茜抽到两个黑球的概率</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (j &gt;= <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="comment">//掉出来的球是黑球的情况</span></span><br><span class="line">dp[i][j] += (<span class="type">double</span>)j / total_balls * ((<span class="type">double</span>)(j - <span class="number">1</span>) / (total_balls - <span class="number">1</span>)) * (<span class="type">double</span>)(j<span class="number">-2</span>) / (total_balls - <span class="number">2</span>) * dp[i][j<span class="number">-3</span>];</span><br><span class="line">&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dp[n][m];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.9lf\n&quot;</span>, <span class="built_in">john_win_probability</span>(n, m));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="奶牛排队"><a href="#奶牛排队" class="headerlink" title="奶牛排队"></a>奶牛排队</h2><h3 id="标签-1"><a href="#标签-1" class="headerlink" title="标签"></a>标签</h3><p><code>链表</code> <code>哈希表</code> <code>思维题</code></p><h3 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h3><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">约翰的农场有 n 头奶牛，每一头奶牛都有一个正整数编号。不同奶牛的编号不同。</span><br><span class="line">现在，这 n 头牛按某种顺序排成一队，每头牛都拿出一张纸条写下了其前方相邻牛的编号以及其后方相邻牛的编号。</span><br><span class="line">注意：</span><br><span class="line">这些奶牛并没有记下自己的编号。</span><br><span class="line">位于队首的奶牛前方没有牛，所以它在前方相邻牛处写下的是数字 0。</span><br><span class="line">位于队尾的奶牛后方没有牛，所有它在后方相邻牛处写下的是数字 0。</span><br><span class="line">将所有奶牛写下的纸条收集起来并打乱顺序后交给你。</span><br><span class="line">你的任务是根据这些纸条信息，推导出完整的奶牛队列。</span><br><span class="line"></span><br><span class="line">输入格式</span><br><span class="line">第一行包含整数 n，表示奶牛数量。</span><br><span class="line">接下来 n行，每行包含两个整数 ai,bi，表示其中一头奶牛写下的其前方相邻牛的编号以及其后方相邻牛的编号。</span><br><span class="line">注意，ai 或 bi 可能为 0，这表示该奶牛没有前方相邻牛或后方相邻牛。</span><br><span class="line"></span><br><span class="line">输出格式</span><br><span class="line">输出共一行，n 个整数，按照从前到后的顺序输出队列中每头奶牛的编号。</span><br><span class="line"></span><br><span class="line">数据范围</span><br><span class="line">前 5 个测试点满足 2≤n≤5。</span><br><span class="line">所有测试点满足 2≤n≤2×10<span class="built_in">^</span>5，0≤ai,bi≤10<span class="built_in">^</span>6。</span><br><span class="line"></span><br><span class="line">输入样例</span><br><span class="line">4</span><br><span class="line">92 31</span><br><span class="line">0 7</span><br><span class="line">31 0</span><br><span class="line">7 141</span><br><span class="line"></span><br><span class="line">输出样例</span><br><span class="line">92 7 31 141</span><br></pre></td></tr></table></figure><h3 id="完整代码-1"><a href="#完整代码-1" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>, M = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> a[N], b[N], mp[M], cnt[M];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="type">int</span> val, idx;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        cin &gt;&gt; a[i] &gt;&gt; b[i];</span><br><span class="line">        ++cnt[a[i]],    --cnt[b[i]];</span><br><span class="line">        mp[a[i]] = i;</span><br><span class="line">        <span class="keyword">if</span>(!a[i]) idx = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; M; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(cnt[i] == <span class="number">1</span>) val = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        cout &lt;&lt; val &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        <span class="type">int</span> nval = b[idx];</span><br><span class="line">        <span class="type">int</span> nidx = mp[val];</span><br><span class="line">        val = nval, idx = nidx;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="奶牛用餐"><a href="#奶牛用餐" class="headerlink" title="奶牛用餐"></a>奶牛用餐</h2><h3 id="标签-2"><a href="#标签-2" class="headerlink" title="标签"></a>标签</h3><p><code>堆</code> <code>优先队列</code></p><h3 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h3><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">约翰的农场有 n 头奶牛，编号 1∼n。每天奶牛们都要去食堂用餐。</span><br><span class="line">食堂一共有k个座位，也就是说同一时间最多可以容纳k头奶牛同时用餐。</span><br><span class="line">已知，第i头奶牛到达食堂的具体时刻为 si，用餐所需花费的时间为 ti。</span><br><span class="line">保证 s1&lt;s2&lt;…&lt;sn。</span><br><span class="line">为了让奶牛们有序用餐，约翰制定了如下规则：</span><br><span class="line">    每头奶牛都必须由约翰安排座位用餐。</span><br><span class="line">    每头奶牛从到达食堂的那一刻起，即刻进入待安排状态。</span><br><span class="line">    任意时刻，只要存在空座位以及待安排奶牛，约翰就会即刻安排奶牛就座用餐。</span><br><span class="line">    如果某一时刻，空座位的数量少于待安排奶牛的数量，则优先安排编号更小的奶牛就座用餐。</span><br><span class="line">    每头奶牛用餐完毕的那一时刻都会被约翰立即轰走，即刻空出座位。</span><br><span class="line">除了用餐花费时间以外，其它花费时间忽略不计。</span><br><span class="line">请你计算并输出，每头奶牛用餐完毕的具体时刻。</span><br><span class="line"></span><br><span class="line">输入格式</span><br><span class="line">第一行包含两个整数 n,k。</span><br><span class="line">接下来 n 行，其中第 i 行包含两个整数 si,ti。</span><br><span class="line">注意，输入保证 s1&lt;s2&lt;…&lt;sn</span><br><span class="line"></span><br><span class="line">输出格式</span><br><span class="line">共 n 行，每行输出一个整数，其中第 i 行的整数表示第 i 头奶牛用餐完毕的具体时刻。</span><br><span class="line"></span><br><span class="line">数据范围</span><br><span class="line">前 3 个测试点满足 1≤n≤10。</span><br><span class="line">所有测试点满足 1≤n,k≤5×10<span class="built_in">^</span>5，1≤si,ti≤10<span class="built_in">^</span>9。</span><br><span class="line"></span><br><span class="line">输入样例1：</span><br><span class="line">3 2</span><br><span class="line">1 5</span><br><span class="line">2 5</span><br><span class="line">3 5</span><br><span class="line"></span><br><span class="line">输出样例1：</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">11</span><br><span class="line"></span><br><span class="line">输入样例2：</span><br><span class="line">6 1</span><br><span class="line">1 1000000000</span><br><span class="line">2 1000000000</span><br><span class="line">3 1000000000</span><br><span class="line">4 1000000000</span><br><span class="line">5 1000000000</span><br><span class="line">6 3</span><br><span class="line"></span><br><span class="line">输出样例2：</span><br><span class="line">1000000001</span><br><span class="line">2000000001</span><br><span class="line">3000000001</span><br><span class="line">4000000001</span><br><span class="line">5000000001</span><br><span class="line">5000000004</span><br></pre></td></tr></table></figure><h3 id="完整代码-2"><a href="#完整代码-2" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">5e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line">priority_queue&lt;LL, vector&lt;LL&gt;, greater&lt;LL&gt;&gt; heap;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; ++i) heap.<span class="built_in">push</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">while</span>(n -- ) &#123;</span><br><span class="line">        <span class="type">int</span> start, time;</span><br><span class="line">        cin &gt;&gt; start &gt;&gt; time;</span><br><span class="line">        <span class="keyword">auto</span> tmp = heap.<span class="built_in">top</span>();</span><br><span class="line">        heap.<span class="built_in">pop</span>();</span><br><span class="line">        LL end = <span class="built_in">max</span>((LL)start, tmp) + time;</span><br><span class="line">        heap.<span class="built_in">push</span>(end);</span><br><span class="line">        cout &lt;&lt; end &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="易变数"><a href="#易变数" class="headerlink" title="易变数"></a>易变数</h2><h3 id="标签-3"><a href="#标签-3" class="headerlink" title="标签"></a>标签</h3><p><code>数位DP</code></p><h3 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">我们定义以下正整数变形操作。</span><br><span class="line">对于一个正整数 x,如果其二进制表示恰好包含 y 个 1,那么经过一次变形操作后, x 将变为 y.</span><br><span class="line">例如,对于正整数 13,其二进制表示为 1101,其中恰好包含 3 个 1,所以 13 经过一次变形操作后会变为 3.</span><br><span class="line">如果一个正整数通过上述变形操作变为 1 所需要的最少操作次数恰好为 k,那么就称这个数是一个易变数。</span><br><span class="line">给定一个正整数 n 的不含前导 0 的二进制表示,请你计算 [1,n] 范围内的易变数的数量。</span><br><span class="line">由于结果可能很大，你只需要输出对 10^9 + 7 取模后的结果。</span><br><span class="line"></span><br><span class="line">输入格式</span><br><span class="line">第一行包含正整数 n 的不含前导 0 的二进制表示。</span><br><span class="line">第二行包含非负整数 k.</span><br><span class="line"></span><br><span class="line">输出格式</span><br><span class="line">一个整数,表示 [1,n] 范围内的易变数的数量对 10^9 + 7 取模后的结果。</span><br><span class="line"></span><br><span class="line">数据范围</span><br><span class="line">前 5 个测试点满足 1 ≤ n &lt; 2^10.</span><br><span class="line">所有测试点满足 1 ≤ n &lt; 2^1000,0 ≤ k ≤ 1000.</span><br><span class="line"></span><br><span class="line">输入样例1：</span><br><span class="line">110</span><br><span class="line">2</span><br><span class="line"></span><br><span class="line">输出样例1：</span><br><span class="line">3</span><br><span class="line"></span><br><span class="line">输入样例2：</span><br><span class="line">111111011</span><br><span class="line">2</span><br><span class="line"></span><br><span class="line">输出样例2：</span><br><span class="line">169</span><br></pre></td></tr></table></figure><h3 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h3><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20231011203918186.png" alt="image-20231011203918186"></p><h3 id="完整代码-3"><a href="#完整代码-3" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数位DP</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>, MOD = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">char</span> str[N];</span><br><span class="line"><span class="type">int</span> g[N], f[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s%d&quot;</span>, str, &amp;m);</span><br><span class="line">    n = <span class="built_in">strlen</span>(str);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (m == <span class="number">0</span>) <span class="built_in">puts</span>(<span class="string">&quot;1&quot;</span>);<span class="comment">//特判,比如:1与10、100、1000等等操作次数不一样</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (m == <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, n - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= <span class="number">1000</span>; ++ i ) &#123;<span class="comment">//预处理 [2,1000],因为操作一次之后最大不超过1000</span></span><br><span class="line">            <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = i; j; j &gt;&gt;= <span class="number">1</span>)</span><br><span class="line">                cnt += j &amp; <span class="number">1</span>;</span><br><span class="line">            g[i] = g[cnt] + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i ) f[<span class="number">0</span>][i] = g[i] == m - <span class="number">1</span>;<span class="comment">//判断是否可以在m次内完成</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++ i )</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= n; ++ j ) &#123;</span><br><span class="line">                f[i][j] = f[i - <span class="number">1</span>][j];</span><br><span class="line">                <span class="keyword">if</span> (j + <span class="number">1</span> &lt;= n)</span><br><span class="line">                    f[i][j] = (f[i][j] + f[i - <span class="number">1</span>][j + <span class="number">1</span>]) % MOD;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>, t = <span class="number">0</span>;<span class="comment">//t用于下面求出当前位置i前面有几个1</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++ i ) <span class="comment">//数位dp,开始求分支，求答案</span></span><br><span class="line">            <span class="keyword">if</span> (str[i] == <span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">                res = (res + f[n - i - <span class="number">1</span>][t]) % MOD;</span><br><span class="line">                <span class="comment">//当前位置：i,从i + 1 ~ n - 1位一共有 n - i - 1个数,前面t个1</span></span><br><span class="line">                ++ t ;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (g[t] == m - <span class="number">1</span>)<span class="comment">//特判右边边界上的最后一个数，它操作之后会变成t</span></span><br><span class="line">            res = (res + <span class="number">1</span>) % MOD;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, res);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h2><h3 id="标签-4"><a href="#标签-4" class="headerlink" title="标签"></a>标签</h3><p><code>思维题</code> <code>分类讨论</code></p><h3 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">给定一个长度为 n 的整数序列 a1,a2,…,an 这恰好是一个 1∼n 的排列。</span><br><span class="line">在一个序列中，如果一个元素满足位于它前面的所有元素均严格小于它，那么就称该元素是一个有价值元素。</span><br><span class="line">特别规定，位于序列首位的元素视为有价值元素。</span><br><span class="line">现在，请你删除给定序列中的一个元素，使得新序列中有价值元素的数量尽可能多。</span><br><span class="line">如果可以删除的元素不唯一，则优先删除其中最小的元素。</span><br><span class="line">输入格式</span><br><span class="line">第一行包含整数 n</span><br><span class="line">第二行包含 n 个整数 a1,a2,…,an</span><br><span class="line">输出格式</span><br><span class="line">一个整数，表示要删除的元素的值。</span><br><span class="line">数据范围</span><br><span class="line">前 3 个测试点满足 1 ≤ n ≤ 5</span><br><span class="line">所有测试点满足 1 ≤ n ≤ 10^5, 1 ≤ ai ≤ n,保证 a1∼an 是一个 1∼n 的排列。</span><br><span class="line"></span><br><span class="line">输入样例1：</span><br><span class="line">1</span><br><span class="line">1</span><br><span class="line">输出样例1：</span><br><span class="line">1</span><br><span class="line"></span><br><span class="line">输入样例2：</span><br><span class="line">5</span><br><span class="line">5 1 2 3 4</span><br><span class="line">输出样例2：</span><br><span class="line">5</span><br></pre></td></tr></table></figure><h3 id="完整代码-4"><a href="#完整代码-4" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//f[i]表示删去值为i的元素后，有价值的数增加的个数</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> f[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="type">int</span> d1 = <span class="number">0</span>, d2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++ i )&#123;</span><br><span class="line">        <span class="type">int</span> x;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (x &gt; d1) f[x] -- ;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (x &gt; d2) f[d1] ++ ;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (x &gt; d1) d2 = d1, d1 = x;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (x &gt; d2) d2 = x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> res = <span class="number">1</span>;<span class="comment">//a[0]一定是有价值的数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; ++ i )</span><br><span class="line">        <span class="keyword">if</span> (f[i] &gt; f[res])</span><br><span class="line">            res = i;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, res);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="拓展字符串"><a href="#拓展字符串" class="headerlink" title="拓展字符串"></a>拓展字符串</h2><h3 id="标签-5"><a href="#标签-5" class="headerlink" title="标签"></a>标签</h3><p><code>递归</code></p><h3 id="题目描述-5"><a href="#题目描述-5" class="headerlink" title="题目描述"></a>题目描述</h3><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20231125200816438.png" alt="image-20231125200816438"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">输入样例1：</span><br><span class="line">3</span><br><span class="line">1 1</span><br><span class="line">1 2</span><br><span class="line">1 1000000000000000000</span><br><span class="line">输出样例1：</span><br><span class="line">DK.</span><br><span class="line"></span><br><span class="line">输入样例2：</span><br><span class="line">5</span><br><span class="line">0 69</span><br><span class="line">1 194</span><br><span class="line">1 139</span><br><span class="line">0 47</span><br><span class="line">1 66</span><br><span class="line">输出样例2：</span><br><span class="line">EFGHI</span><br></pre></td></tr></table></figure><h3 id="完整代码-5"><a href="#完整代码-5" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="构造矩阵"><a href="#构造矩阵" class="headerlink" title="构造矩阵"></a>构造矩阵</h2><h3 id="标签-6"><a href="#标签-6" class="headerlink" title="标签"></a>标签</h3><p><code>组合计数</code> <code>快速幂</code> <code>欧拉函数</code> <code>费马小定理</code></p><h3 id="题目描述-6"><a href="#题目描述-6" class="headerlink" title="题目描述"></a>题目描述</h3><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20231125200942700.png" alt="image-20231125200942700"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">输入样例1：</span><br><span class="line">1 1 -1</span><br><span class="line">输出样例1：</span><br><span class="line">1</span><br><span class="line"></span><br><span class="line">输入样例2：</span><br><span class="line">1 3 1</span><br><span class="line">输出样例2：</span><br><span class="line">1</span><br><span class="line"></span><br><span class="line">输入样例3：</span><br><span class="line">3 3 -1</span><br><span class="line">输出样例3：</span><br><span class="line">16</span><br></pre></td></tr></table></figure><h3 id="完整代码-6"><a href="#完整代码-6" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="三元组"><a href="#三元组" class="headerlink" title="三元组"></a>三元组</h2><h3 id="标签-7"><a href="#标签-7" class="headerlink" title="标签"></a>标签</h3><p><code>枚举</code> <code>前缀和</code></p><h3 id="题目描述-7"><a href="#题目描述-7" class="headerlink" title="题目描述"></a>题目描述</h3><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20231125201055878.png" alt="image-20231125201055878"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">输入样例1：</span><br><span class="line">3</span><br><span class="line">-1 2 3</span><br><span class="line">输出样例1：</span><br><span class="line">0 1 3</span><br><span class="line"></span><br><span class="line">输入样例2：</span><br><span class="line">4</span><br><span class="line">0 0 -1 0</span><br><span class="line">输出样例2：</span><br><span class="line">0 0 0</span><br><span class="line"></span><br><span class="line">输入样例3：</span><br><span class="line">1</span><br><span class="line">10000</span><br><span class="line">输出样例3：</span><br><span class="line">1 1 1</span><br></pre></td></tr></table></figure><h3 id="完整代码-7"><a href="#完整代码-7" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="制作地图"><a href="#制作地图" class="headerlink" title="制作地图"></a>制作地图</h2><h3 id="标签-8"><a href="#标签-8" class="headerlink" title="标签"></a>标签</h3><h3 id="题目描述-8"><a href="#题目描述-8" class="headerlink" title="题目描述"></a>题目描述</h3><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20231125201239952.png" alt="image-20231125201239952"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">输入样例1：</span><br><span class="line">?01???</span><br><span class="line">输出样例1：</span><br><span class="line">4</span><br><span class="line"></span><br><span class="line">输入样例2：</span><br><span class="line">?</span><br><span class="line">输出样例2：</span><br><span class="line">2</span><br><span class="line"></span><br><span class="line">输入样例3：</span><br><span class="line">**12</span><br><span class="line">输出样例3：</span><br><span class="line">0</span><br><span class="line"></span><br><span class="line">输入样例4：</span><br><span class="line">1</span><br><span class="line">输出样例4：</span><br><span class="line">0</span><br></pre></td></tr></table></figure><h3 id="完整代码-8"><a href="#完整代码-8" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> AcWing </category>
          
          <category> 周赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
            <tag> 优先队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搜索与图论</title>
      <link href="/AcWing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/"/>
      <url>/AcWing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%9B%BE%E8%AE%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="搜索与图论"><a href="#搜索与图论" class="headerlink" title="搜索与图论"></a>搜索与图论</h1><p>[toc]</p><h2 id="DFS"><a href="#DFS" class="headerlink" title="DFS"></a>DFS</h2><h3 id="排列数字"><a href="#排列数字" class="headerlink" title="排列数字"></a>排列数字</h3><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">给定一个整数 n，将数字 1∼n 排成一排，将会有很多种排列方法。</span><br><span class="line">现在，请你按照字典序将所有的排列方法输出。</span><br><span class="line"></span><br><span class="line">输入格式</span><br><span class="line">共一行，包含一个整数 n。</span><br><span class="line"></span><br><span class="line">输出格式</span><br><span class="line">按字典序输出所有排列方案，每个方案占一行。</span><br><span class="line"></span><br><span class="line">数据范围</span><br><span class="line">1 ≤ n ≤ 7</span><br><span class="line"></span><br><span class="line">输入样例：</span><br><span class="line">3</span><br><span class="line"></span><br><span class="line">输出样例：</span><br><span class="line">1 2 3</span><br><span class="line">1 3 2</span><br><span class="line">2 1 3</span><br><span class="line">2 3 1</span><br><span class="line">3 1 2</span><br><span class="line">3 2 1</span><br></pre></td></tr></table></figure><h4 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E9%81%8D%E5%8E%86.png" alt="深度优先遍历"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> path[N];</span><br><span class="line"><span class="type">bool</span> occupied[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(u == n) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) cout&lt;&lt;path[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!occupied[i]) &#123;</span><br><span class="line">            occupied[i] = <span class="literal">true</span>;</span><br><span class="line">            path[u] = i;</span><br><span class="line">            <span class="built_in">dfs</span>(u+<span class="number">1</span>);</span><br><span class="line">            occupied[i] = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="n-皇后问题"><a href="#n-皇后问题" class="headerlink" title="n-皇后问题"></a>n-皇后问题</h3><h4 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h4><p>n−皇后问题是指将 n 个皇后放在 n×n 的国际象棋棋盘上，使得皇后不能相互攻击到，即任意两个皇后都不能处于同一行、同一列或同一斜线上。</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/8-queens.png" alt="8-queens"></p><p>现在给定整数 n，请你输出所有的满足条件的棋子摆法。</p><p>&#x3D;&#x3D;输入格式：&#x3D;&#x3D;</p><p>​共一行，包含整数 <em>n</em>。</p><p>&#x3D;&#x3D;输出格式：&#x3D;&#x3D;</p><p>​每个解决方案占 n 行，每行输出一个长度为 n 的字符串，用来表示完整的棋盘状态。</p><p>​其中 <code>.</code> 表示某一个位置的方格状态为空，<code>Q</code> 表示某一个位置的方格上摆着皇后。</p><p>​每个方案输出完成后，输出一个空行。</p><p>​<strong>注意：行末不能有多余空格。</strong></p><p>​输出方案的顺序任意，只要不重复且没有遗漏即可。</p><p>&#x3D;&#x3D;数据范围：&#x3D;&#x3D;</p><p>​1 ≤ <em>n</em> ≤ 9</p><p>&#x3D;&#x3D;输入样例：&#x3D;&#x3D;</p><p>4</p><p>&#x3D;&#x3D;输出样例：&#x3D;&#x3D;</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.Q..</span><br><span class="line">...Q</span><br><span class="line">Q...</span><br><span class="line">..Q.</span><br><span class="line"></span><br><span class="line">..Q.</span><br><span class="line">Q...</span><br><span class="line">...Q</span><br><span class="line">.Q..</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="完整代码-1"><a href="#完整代码-1" class="headerlink" title="完整代码"></a>完整代码</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/n-hh.png" alt="n-hh"></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/%E5%9B%BE%E8%A7%A3.jpg" alt="图解"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//解法一(按全排列的思路,含剪枝)</span></span><br><span class="line"><span class="comment">//时间复杂度：O(n * n!)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">char</span> g[N][N];</span><br><span class="line"><span class="type">bool</span> col[N], dg[N], udg[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(u == n) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) <span class="built_in">puts</span>(g[i]);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!col[i] &amp;&amp; !dg[i - u + n] &amp;&amp; !udg[i + u]) &#123;</span><br><span class="line">            g[u][i] = <span class="string">&#x27;Q&#x27;</span>;</span><br><span class="line">            col[i] = dg[i - u + n] = udg[i + u] = <span class="literal">true</span>;</span><br><span class="line">            <span class="built_in">dfs</span>(u + <span class="number">1</span>);</span><br><span class="line">            col[i] = dg[i - u + n] = udg[i + u] = <span class="literal">false</span>;</span><br><span class="line">            g[u][i] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; ++j) </span><br><span class="line">            g[i][j] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//解法二(更原始，更接近原本模拟)</span></span><br><span class="line"><span class="comment">//比解法一慢</span></span><br><span class="line"><span class="comment">//时间复杂度：O(2^(n^2))</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">char</span> g[N][N];</span><br><span class="line"><span class="type">bool</span> row[N], col[N], dg[N], udg[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(y == n) y = <span class="number">0</span>, ++x;</span><br><span class="line">    <span class="keyword">if</span>(x == n) &#123;</span><br><span class="line">        <span class="keyword">if</span>(s == n) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) <span class="built_in">puts</span>(g[i]);</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//不放皇后</span></span><br><span class="line">    <span class="built_in">dfs</span>(x, y + <span class="number">1</span>, s);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//放皇后</span></span><br><span class="line">    <span class="keyword">if</span>(!row[x] &amp;&amp; !col[y] &amp;&amp; !dg[x + y] &amp;&amp; !udg[y - x + n]) &#123;</span><br><span class="line">        g[x][y] = <span class="string">&#x27;Q&#x27;</span>;</span><br><span class="line">        row[x] = col[y] = dg[x + y] = udg[y - x + n] = <span class="literal">true</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(x, y + <span class="number">1</span>, s + <span class="number">1</span>);</span><br><span class="line">        row[x] = col[y] = dg[x + y] = udg[y - x + n] = <span class="literal">false</span>;</span><br><span class="line">        g[x][y] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; ++j)</span><br><span class="line">            g[i][j] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="BFS"><a href="#BFS" class="headerlink" title="BFS"></a>BFS</h2><h3 id="走迷宫"><a href="#走迷宫" class="headerlink" title="走迷宫"></a>走迷宫</h3><h4 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h4><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">给定一个 n×m 的二维整数数组，用来表示一个迷宫，数组中只包含 0 或 1，其中 0 表示可以走的路，1表示不可通过的墙壁。</span><br><span class="line">最初，有一个人位于左上角 (1,1) 处，已知该人每次可以向上、下、左、右任意一个方向移动一个位置。</span><br><span class="line">请问，该人从左上角移动至右下角 (n,m) 处，至少需要移动多少次。</span><br><span class="line">数据保证 (1,1) 处和 (n,m) 处的数字为 0，且一定至少存在一条通路。</span><br><span class="line"></span><br><span class="line">输入格式</span><br><span class="line">第一行包含两个整数 n 和 m。</span><br><span class="line">接下来 n 行，每行包含 m 个整数（0 或 1），表示完整的二维数组迷宫。</span><br><span class="line"></span><br><span class="line">输出格式</span><br><span class="line">输出一个整数，表示从左上角移动至右下角的最少移动次数。</span><br><span class="line"></span><br><span class="line">数据范围</span><br><span class="line">1 ≤ n,m ≤ 100</span><br><span class="line"></span><br><span class="line">输入样例：</span><br><span class="line">5 5</span><br><span class="line">0 1 0 0 0</span><br><span class="line">0 1 0 1 0</span><br><span class="line">0 0 0 0 0</span><br><span class="line">0 1 1 1 0</span><br><span class="line">0 0 0 1 0</span><br><span class="line"></span><br><span class="line">输出样例：</span><br><span class="line">8</span><br></pre></td></tr></table></figure><h4 id="完整代码-2"><a href="#完整代码-2" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">110</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> puzzle[N][N];</span><br><span class="line"><span class="type">int</span> dis[N][N];</span><br><span class="line"></span><br><span class="line"><span class="comment">//右，下，左，上</span></span><br><span class="line"><span class="type">int</span> dir[<span class="number">4</span>][<span class="number">2</span>] = &#123;&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bfs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dis, <span class="number">-1</span>, <span class="keyword">sizeof</span> dis);</span><br><span class="line">    dis[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    queue&lt;PII&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(<span class="number">1</span>,<span class="number">1</span>));</span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        PII tmp = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">        <span class="type">int</span> dx = tmp.first + dir[i][<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> dy = tmp.second + dir[i][<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span>(dx &gt; <span class="number">0</span> &amp;&amp; dx &lt;= n &amp;&amp; dy &gt; <span class="number">0</span> &amp;&amp; dy &lt;= m &amp;&amp; !puzzle[dx][dy] &amp;&amp; dis[dx][dy] == <span class="number">-1</span>) &#123;</span><br><span class="line">            q.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(dx,dy));</span><br><span class="line">            dis[dx][dy] = dis[tmp.first][tmp.second] + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dis[n][m];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; ++j)</span><br><span class="line">            cin &gt;&gt; puzzle[i][j];</span><br><span class="line">    cout&lt;&lt;<span class="built_in">bfs</span>()&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/%E8%B5%B0%E8%BF%B7%E5%AE%AB.png" alt="走迷宫"></p><h3 id="八数码"><a href="#八数码" class="headerlink" title="八数码"></a>八数码</h3><h4 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h4><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">在一个 3×3 的网格中，1∼8 这 8 个数字和一个 x 恰好不重不漏地分布在这 3×3 的网格中。</span><br><span class="line">例如：</span><br><span class="line">1 2 3</span><br><span class="line">x 4 6</span><br><span class="line">7 5 8</span><br><span class="line">在游戏过程中，可以把 x 与其上、下、左、右四个方向之一的数字交换（如果存在）。</span><br><span class="line">我们的目的是通过交换，使得网格变为如下排列（称为正确排列）：</span><br><span class="line">1 2 3</span><br><span class="line">4 5 6</span><br><span class="line">7 8 x</span><br><span class="line">例如，示例中图形就可以通过让 x 先后与右、下、右三个方向的数字交换成功得到正确排列。</span><br><span class="line">交换过程如下：</span><br><span class="line">1 2 3   1 2 3   1 2 3   1 2 3</span><br><span class="line">x 4 6   4 x 6   4 5 6   4 5 6</span><br><span class="line">7 5 8   7 5 8   7 x 8   7 8 x</span><br><span class="line">现在，给你一个初始网格，请你求出得到正确排列至少需要进行多少次交换。</span><br><span class="line"></span><br><span class="line">输入格式</span><br><span class="line"></span><br><span class="line">输入占一行，将 3×3 的初始网格描绘出来。</span><br><span class="line">例如，如果初始网格如下所示：</span><br><span class="line">1 2 3 </span><br><span class="line">x 4 6 </span><br><span class="line">7 5 8 </span><br><span class="line">则输入为：1 2 3 x 4 6 7 5 8</span><br><span class="line"></span><br><span class="line">输出格式</span><br><span class="line">输出占一行，包含一个整数，表示最少交换次数。</span><br><span class="line">如果不存在解决方案，则输出 −1。</span><br><span class="line"></span><br><span class="line">输入样例</span><br><span class="line">2 3 4 1 5 x 7 6 8</span><br><span class="line"></span><br><span class="line">输出样例</span><br><span class="line">19</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="完整代码-3"><a href="#完整代码-3" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> string done = <span class="string">&quot;12345678x&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//上，右，下，左</span></span><br><span class="line"><span class="type">int</span> dir[<span class="number">4</span>][<span class="number">2</span>] = &#123;&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bfs</span><span class="params">(string start)</span> </span>&#123;</span><br><span class="line">    queue&lt;string&gt; q;</span><br><span class="line">    unordered_map&lt;string, <span class="type">int</span>&gt; dist;</span><br><span class="line">    q.<span class="built_in">push</span>(start);</span><br><span class="line">    dist[start] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="keyword">auto</span> tmp = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span>(tmp == done) <span class="keyword">return</span> dist[tmp];</span><br><span class="line">        <span class="type">int</span> pos = tmp.<span class="built_in">find</span>(<span class="string">&#x27;x&#x27;</span>);</span><br><span class="line">        <span class="type">int</span> d = dist[tmp];</span><br><span class="line">        <span class="type">int</span> x = pos / <span class="number">3</span>;</span><br><span class="line">        <span class="type">int</span> y = pos % <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">            <span class="type">int</span> dx = x + dir[i][<span class="number">0</span>];</span><br><span class="line">            <span class="type">int</span> dy = y + dir[i][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span>(dx &gt;= <span class="number">0</span> &amp;&amp; dx &lt; <span class="number">3</span> &amp;&amp; dy &gt;= <span class="number">0</span> &amp;&amp; dy &lt; <span class="number">3</span>) &#123;</span><br><span class="line">                <span class="built_in">swap</span>(tmp[<span class="number">3</span> * dx + dy],tmp[pos]);</span><br><span class="line">                <span class="keyword">if</span>(!dist.<span class="built_in">count</span>(tmp)) &#123;</span><br><span class="line">                    dist[tmp] = d + <span class="number">1</span>;</span><br><span class="line">                    q.<span class="built_in">push</span>(tmp);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">swap</span>(tmp[<span class="number">3</span> * dx + dy],tmp[pos]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    string start;</span><br><span class="line">    <span class="type">char</span> op[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; ++i) &#123;</span><br><span class="line">        cin &gt;&gt; op;</span><br><span class="line">        start += *op;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;<span class="built_in">bfs</span>(start)&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/%E7%9F%A9%E9%98%B5%E8%BD%AC%E6%8D%A2.JPG" alt="矩阵转换"></p><h2 id="树与图的深度优先遍历"><a href="#树与图的深度优先遍历" class="headerlink" title="树与图的深度优先遍历"></a>树与图的深度优先遍历</h2><h3 id="树的重心"><a href="#树的重心" class="headerlink" title="树的重心"></a>树的重心</h3><h4 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h4><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">给定一颗树，树中包含 n 个结点（编号 1∼n）和 n−1条无向边。</span><br><span class="line"></span><br><span class="line">请你找到树的重心，并输出将重心删除后，剩余各个连通块中点数的最大值。</span><br><span class="line"></span><br><span class="line">重心定义：重心是指树中的一个结点，如果将这个点删除后，剩余各个连通块中点数的最大值最小，那么这个节点被称为树的重心。</span><br><span class="line"></span><br><span class="line">==输入格式==</span><br><span class="line"></span><br><span class="line">​第一行包含整数 n，表示树的结点数。</span><br><span class="line"></span><br><span class="line">​接下来 n−1行，每行包含两个整数 a 和 b，表示点 a 和点 b之间存在一条边。</span><br><span class="line"></span><br><span class="line">==输出格式==</span><br><span class="line"></span><br><span class="line">​输出一个整数 m，表示将重心删除后，剩余各个连通块中点数的最大值。</span><br><span class="line"></span><br><span class="line">==数据范围==</span><br><span class="line"></span><br><span class="line">​1 ≤ n ≤ 10&lt;sup&gt;5&lt;/sup&gt; </span><br><span class="line"></span><br><span class="line">==输入样例==</span><br><span class="line"></span><br><span class="line">​9</span><br><span class="line"></span><br><span class="line">​1 2</span><br><span class="line"></span><br><span class="line">​1 7</span><br><span class="line"></span><br><span class="line">​1 4</span><br><span class="line"></span><br><span class="line">​2 8</span><br><span class="line"></span><br><span class="line">​2 5</span><br><span class="line"></span><br><span class="line">​4 3</span><br><span class="line"></span><br><span class="line">​3 9</span><br><span class="line"></span><br><span class="line">​4 6</span><br><span class="line"></span><br><span class="line">==输出样例==</span><br><span class="line"></span><br><span class="line">​4</span><br></pre></td></tr></table></figure><h4 id="完整代码-4"><a href="#完整代码-4" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//以有向图的格式存储无向图，所以每个节点至多对应2n-2条边</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, M = <span class="number">2</span> * N;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> h[N], e[M], ne[M], idx;<span class="comment">//邻接表存储树，有n个节点，所以需要n个队列头节点</span></span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> ans = N;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">    e[idx] = b;</span><br><span class="line">    ne[idx] = h[a];</span><br><span class="line">    h[a] = idx++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//以u为根的子树中点的数量</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">    st[u] = <span class="literal">true</span>;<span class="comment">//标记一下，被搜过</span></span><br><span class="line">    <span class="comment">//sum存储以u为根的树 的节点数, 包括u，故从1开始</span></span><br><span class="line">    <span class="comment">//res存储删掉某个节点之后，最大的连通子图节点数</span></span><br><span class="line">    <span class="type">int</span> sum = <span class="number">1</span>, res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = h[u]; i != <span class="number">-1</span>; i = ne[i]) &#123;</span><br><span class="line">        <span class="type">int</span> j = e[i];</span><br><span class="line">        <span class="keyword">if</span>(!st[j]) &#123;<span class="comment">//没被搜过</span></span><br><span class="line">            <span class="type">int</span> s = <span class="built_in">dfs</span>(j);</span><br><span class="line">            res = <span class="built_in">max</span>(res,s);</span><br><span class="line">            sum += s;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    res = <span class="built_in">max</span>(res,n-sum);</span><br><span class="line">    ans = <span class="built_in">min</span>(ans,res);</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    <span class="comment">//初始化h数组 -1表示尾节点</span></span><br><span class="line">    <span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="keyword">sizeof</span> h);</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">        <span class="type">int</span> a, b;</span><br><span class="line">        cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">        <span class="comment">//无向图</span></span><br><span class="line">        <span class="built_in">add</span>(a,b), <span class="built_in">add</span>(b,a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>);<span class="comment">//可以任意选定一个节点开始 u&lt;=n</span></span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="树与图的广度优先遍历"><a href="#树与图的广度优先遍历" class="headerlink" title="树与图的广度优先遍历"></a>树与图的广度优先遍历</h2><h3 id="图中点的层次"><a href="#图中点的层次" class="headerlink" title="图中点的层次"></a>图中点的层次</h3><h4 id="题目描述-5"><a href="#题目描述-5" class="headerlink" title="题目描述"></a>题目描述</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">给定一个 n 个点 m条边的有向图，图中可能存在重边和自环。</span><br><span class="line"></span><br><span class="line">所有边的长度都是 <span class="number">1</span>，点的编号为 <span class="number">1</span>∼n。</span><br><span class="line"></span><br><span class="line">请你求出 <span class="number">1</span>号点到 n 号点的最短距离，如果从 <span class="number">1</span> 号点无法走到 n 号点，输出 −<span class="number">1</span>。</span><br><span class="line"></span><br><span class="line">==输入格式==</span><br><span class="line"></span><br><span class="line">​第一行包含两个整数 n和 m。</span><br><span class="line"></span><br><span class="line">​接下来 m行，每行包含两个整数 a 和 b，表示存在一条从 a 走到 b 的长度为 <span class="number">1</span>的边。</span><br><span class="line"></span><br><span class="line">==输出格式==</span><br><span class="line"></span><br><span class="line">​输出一个整数，表示 <span class="number">1</span>号点到 n号点的最短距离。</span><br><span class="line"></span><br><span class="line">==数据范围==</span><br><span class="line"></span><br><span class="line">​<span class="number">1</span> ≤ n, m ≤ <span class="number">10</span>^<span class="number">5</span></span><br><span class="line"></span><br><span class="line">==输入样例==</span><br><span class="line"></span><br><span class="line">​<span class="number">4</span> <span class="number">5</span></span><br><span class="line"></span><br><span class="line">​<span class="number">1</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line">​<span class="number">2</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line">​<span class="number">3</span> <span class="number">4</span></span><br><span class="line"></span><br><span class="line">​<span class="number">1</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line">​<span class="number">1</span> <span class="number">4</span></span><br><span class="line"></span><br><span class="line">==输出样例==</span><br><span class="line"></span><br><span class="line">​<span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="完整代码-5"><a href="#完整代码-5" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, M = <span class="number">2</span> * N;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> h[N], e[M], ne[M], idx;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> dist[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">    e[idx] = b;</span><br><span class="line">    ne[idx] = h[a];</span><br><span class="line">    h[a] = idx++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bfs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">memeset</span>(dist, <span class="number">-1</span>, <span class="keyword">sizeof</span> dist);</span><br><span class="line">    dist[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="type">int</span> tmp = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = h[tmp]; i != <span class="number">-1</span>; i = ne[i]) &#123;</span><br><span class="line">            <span class="type">int</span> j = e[i];</span><br><span class="line">            <span class="keyword">if</span>(dist[j] == <span class="number">-1</span>) &#123;</span><br><span class="line">                dist[j] = dist[tmp] + <span class="number">1</span>;</span><br><span class="line">                q.<span class="built_in">push</span>(j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dist[n];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="keyword">sizeof</span> h);</span><br><span class="line">    <span class="keyword">while</span>(m--) &#123;</span><br><span class="line">        <span class="type">int</span> a, b;</span><br><span class="line">        cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">        <span class="built_in">add</span>(a,b);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">bfs</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="拓扑排序"><a href="#拓扑排序" class="headerlink" title="拓扑排序"></a>拓扑排序</h2><h3 id="有向图的拓扑序列"><a href="#有向图的拓扑序列" class="headerlink" title="有向图的拓扑序列"></a>有向图的拓扑序列</h3><h4 id="题目描述-6"><a href="#题目描述-6" class="headerlink" title="题目描述"></a>题目描述</h4><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">给定一个 n个点 m 条边的有向图，点的编号是 1 到 n，图中可能存在重边和自环。</span><br><span class="line"></span><br><span class="line">请输出任意一个该有向图的拓扑序列，如果拓扑序列不存在，则输出 −1。</span><br><span class="line"></span><br><span class="line">若一个由图中所有点构成的序列 A 满足：对于图中的每条边 (x,y)，x 在 A 中都出现在 y 之前，则称 A</span><br><span class="line"></span><br><span class="line">是该图的一个拓扑序列。</span><br><span class="line"></span><br><span class="line">==输入格式==</span><br><span class="line"></span><br><span class="line">​第一行包含两个整数 n 和 m。</span><br><span class="line"></span><br><span class="line">​接下来 m 行，每行包含两个整数 x 和 y，表示存在一条从点 x 到点 y 的有向边 (x,y)。</span><br><span class="line"></span><br><span class="line">==输出格式==</span><br><span class="line"></span><br><span class="line">​共一行，如果存在拓扑序列，则输出任意一个合法的拓扑序列即可。</span><br><span class="line"></span><br><span class="line">​否则输出 −1。</span><br><span class="line"></span><br><span class="line">==数据范围==</span><br><span class="line"></span><br><span class="line">​1 ≤ n, m ≤ 10<span class="built_in">^</span>5 </span><br><span class="line"></span><br><span class="line">==输入样例==</span><br><span class="line"></span><br><span class="line">​3 3</span><br><span class="line"></span><br><span class="line">​1 2</span><br><span class="line"></span><br><span class="line">​2 3</span><br><span class="line"></span><br><span class="line">​1 3</span><br><span class="line"></span><br><span class="line">==输出样例==</span><br><span class="line"></span><br><span class="line">​1 2 3</span><br></pre></td></tr></table></figure><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><p>首先记录各个点的入度</p><p>然后将入度为 0 的点放入队列</p><p>将队列里的点依次出队列，然后找出所有出队列这个点发出的边，删除边，同事边的另一侧的点的入度 -1。</p><p>如果所有点都进过队列，则可以拓扑排序，输出所有顶点。否则输出-1，代表不可以进行拓扑排序。</p><h4 id="完整代码-6"><a href="#完整代码-6" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> h[N], e[N], ne[N], idx;</span><br><span class="line"><span class="type">int</span> d_in[N];<span class="comment">//每个点的入度</span></span><br><span class="line"><span class="type">int</span> ans[N], pos = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">    e[idx] = b;</span><br><span class="line">    ne[idx] = h[a];</span><br><span class="line">    h[a] = idx++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">topsort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!d_in[i]) q.<span class="built_in">push</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        ans[pos++] = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = h[ans[pos<span class="number">-1</span>]]; i != <span class="number">-1</span>; i = ne[i]) &#123;</span><br><span class="line">            <span class="type">int</span> j = e[i];</span><br><span class="line">            --d_in[j];</span><br><span class="line">            <span class="keyword">if</span>(!d_in[j]) q.<span class="built_in">push</span>(j);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n == pos - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="keyword">sizeof</span> h);</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line">        <span class="type">int</span> a, b;</span><br><span class="line">        cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">        <span class="built_in">add</span>(a,b);</span><br><span class="line">        ++d_in[b];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">topsort</span>()) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; pos; ++i) cout &lt;&lt; ans[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;-1&quot;</span>;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Dijkstra"><a href="#Dijkstra" class="headerlink" title="Dijkstra"></a>Dijkstra</h2><p>稠密图用邻接矩阵来存，稀疏图用邻接表来存。</p><h3 id="图解"><a href="#图解" class="headerlink" title="图解"></a>图解</h3><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/pro1.png" alt="pro1"></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/pro2.png" alt="pro2"></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/pro3.png" alt="pro3"></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/pro4.png" alt="pro4"></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/pro5.png" alt="pro5"></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/pro6.png" alt="pro6"></p><h3 id="Dijkstra求最短路-I"><a href="#Dijkstra求最短路-I" class="headerlink" title="Dijkstra求最短路 I"></a>Dijkstra求最短路 I</h3><h4 id="题目描述-7"><a href="#题目描述-7" class="headerlink" title="题目描述"></a>题目描述</h4><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">给定一个 n 个点 m 条边的有向图，图中可能存在重边和自环，所有边权均为正值。</span><br><span class="line"></span><br><span class="line">请你求出 1号点到 n 号点的最短距离，如果无法从 1 号点走到 n 号点，则输出 −1。</span><br><span class="line"></span><br><span class="line">==输入格式==</span><br><span class="line"></span><br><span class="line">​第一行包含整数 n 和 m。</span><br><span class="line"></span><br><span class="line">​接下来 m 行每行包含三个整数 x, y, z，表示存在一条从点 x 到点 y 的有向边，边长为 z。</span><br><span class="line"></span><br><span class="line">==输出格式==</span><br><span class="line"></span><br><span class="line">​输出一个整数，表示 1号点到 n 号点的最短距离。</span><br><span class="line"></span><br><span class="line">​如果路径不存在，则输出 −1。</span><br><span class="line"></span><br><span class="line">==数据范围==</span><br><span class="line"></span><br><span class="line">​1 ≤ n ≤ 500, 1 ≤ m ≤ 10<span class="built_in">^</span>5,</span><br><span class="line">​图中涉及边长均不超过10000。</span><br><span class="line"></span><br><span class="line">==输入样例==</span><br><span class="line"></span><br><span class="line">3 3</span><br><span class="line">1 2 2</span><br><span class="line">2 3 1</span><br><span class="line">1 3 4</span><br><span class="line"></span><br><span class="line">==输出样例==</span><br><span class="line"></span><br><span class="line">3</span><br></pre></td></tr></table></figure><h4 id="完整代码-7"><a href="#完整代码-7" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//时间复杂度：O(n^2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">500</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;<span class="comment">//节点数和边数</span></span><br><span class="line"><span class="type">int</span> g[N][N];<span class="comment">//邻接矩阵</span></span><br><span class="line"><span class="type">int</span> dist[N];<span class="comment">//保存源点到其余各个节点的距离</span></span><br><span class="line"><span class="type">bool</span> st[N];<span class="comment">//记录是否找到了源点到该节点的最短距离</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dijkstra</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dist, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> dist);</span><br><span class="line">    dist[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="type">int</span> t = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!st[j] &amp;&amp; (t == <span class="number">-1</span> || dist[t] &gt; dist[j])) </span><br><span class="line">                t = j;</span><br><span class="line">        &#125;</span><br><span class="line">        st[t] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">            dist[j] = <span class="built_in">min</span>(dist[j],dist[t]+g[t][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (dist[n] == <span class="number">0x3f3f3f3f</span>) ? <span class="number">-1</span> : dist[n];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">memset</span>(g, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> g);</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">while</span>(m--) &#123;</span><br><span class="line">        <span class="type">int</span> x, y, z;</span><br><span class="line">        cin &gt;&gt; x &gt;&gt; y &gt;&gt; z;</span><br><span class="line">        g[x][y] = <span class="built_in">min</span>(g[x][y],z);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">dijkstra</span>() &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="时间复杂度分析"><a href="#时间复杂度分析" class="headerlink" title="时间复杂度分析"></a>时间复杂度分析</h4><p>寻找路径最短的点：O( n<sup>2</sup> )</p><p>加入集合S：O( n )</p><p>更新距离：O( m )</p><p>所以总的时间复杂度为O( n<sup>2</sup> )</p><h3 id="Dijkstra求最短路-II-堆优化"><a href="#Dijkstra求最短路-II-堆优化" class="headerlink" title="Dijkstra求最短路 II(堆优化)"></a>Dijkstra求最短路 II(堆优化)</h3><h4 id="题目描述-8"><a href="#题目描述-8" class="headerlink" title="题目描述"></a>题目描述</h4><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">给定一个 n 个点 m 条边的有向图，图中可能存在重边和自环，所有边权均为非负值。</span><br><span class="line"></span><br><span class="line">请你求出 1号点到 n 号点的最短距离，如果无法从 1 号点走到 n 号点，则输出 −1。</span><br><span class="line"></span><br><span class="line">==输入格式==</span><br><span class="line"></span><br><span class="line">​第一行包含整数 n 和 m。</span><br><span class="line"></span><br><span class="line">​接下来 m 行每行包含三个整数 x,y,z，表示存在一条从点 x 到点 y 的有向边，边长为 z。</span><br><span class="line"></span><br><span class="line">==输出格式==</span><br><span class="line"></span><br><span class="line">​输出一个整数，表示 1号点到 n号点的最短距离。</span><br><span class="line"></span><br><span class="line">​如果路径不存在，则输出 −1。</span><br><span class="line"></span><br><span class="line">==数据范围==</span><br><span class="line"></span><br><span class="line">​1 ≤ n,m ≤1.5×10<span class="built_in">^</span>5,</span><br><span class="line">​图中涉及边长均不小于 0，且不超过 10000。</span><br><span class="line">​数据保证：如果最短路存在，则最短路的长度不超过 10<span class="built_in">^</span>9。</span><br><span class="line"></span><br><span class="line">==输入样例==</span><br><span class="line"></span><br><span class="line">3 3</span><br><span class="line"></span><br><span class="line">1 2 2</span><br><span class="line"></span><br><span class="line">2 3 1</span><br><span class="line"></span><br><span class="line">1 3 4</span><br><span class="line"></span><br><span class="line">==输出样例==</span><br><span class="line"></span><br><span class="line">​3</span><br></pre></td></tr></table></figure><h4 id="完整代码-8"><a href="#完整代码-8" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//时间复杂度：O(mlogn)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">5e4</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; PII;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;<span class="comment">//节点数和边数</span></span><br><span class="line"><span class="type">int</span> h[N], e[N], w[N], ne[N], idx;<span class="comment">//邻接表</span></span><br><span class="line"><span class="type">int</span> dist[N];<span class="comment">//保存源点到其余各个节点的距离</span></span><br><span class="line"><span class="type">bool</span> st[N];<span class="comment">//记录是否找到了源点到该节点的最短距离</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 有重边也不要紧，假设1-&gt;2有权重为2和3的边，再遍历到点1的时候2号点的距离会更新两次放入堆中</span></span><br><span class="line">    <span class="comment">// 这样堆中会有很多冗余的点，但是在弹出的时候还是会弹出最小值2+x（x为之前确定的最短路径），</span></span><br><span class="line">    <span class="comment">// 并标记st为true，所以下一次弹出3+x会continue不会向下执行。</span></span><br><span class="line">    e[idx] = b, w[idx] = c, ne[idx] = h[a], h[a] = idx++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dijkstra</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dist, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> dist);<span class="comment">//距离初始化为无穷大</span></span><br><span class="line">    dist[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    priority_queue&lt;PII, vector&lt;PII&gt;, greater&lt;PII&gt;&gt; heap;<span class="comment">//小根堆</span></span><br><span class="line">    heap.<span class="built_in">push</span>(&#123;<span class="number">0</span>,<span class="number">1</span>&#125;);<span class="comment">// 这个顺序不能倒，pair排序时是先根据first，再根据second，</span></span><br><span class="line">                     <span class="comment">// 这里显然要根据距离排序</span></span><br><span class="line">    <span class="keyword">while</span>(heap.<span class="built_in">size</span>()) &#123;</span><br><span class="line">        <span class="keyword">auto</span> t = heap.<span class="built_in">top</span>();</span><br><span class="line">        heap.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="type">int</span> ver = t.second, distance = t.first;</span><br><span class="line">        <span class="keyword">if</span>(st[ver]) <span class="keyword">continue</span>;<span class="comment">//如果距离已经确定，则跳过该点</span></span><br><span class="line">        st[ver] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = h[ver]; i != <span class="number">-1</span>; i = ne[i]) &#123;<span class="comment">//更新ver所指向的节点距离</span></span><br><span class="line">            <span class="type">int</span> j = e[i];</span><br><span class="line">            <span class="keyword">if</span>(dist[j] &gt; distance + w[i]) &#123;</span><br><span class="line">                dist[j] = distance + w[i];</span><br><span class="line">                heap.<span class="built_in">push</span>(&#123;dist[j],j&#125;);<span class="comment">//距离变小，则入堆</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (dist[n] == <span class="number">0x3f3f3f3f</span>) ? <span class="number">-1</span> : dist[n];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="keyword">sizeof</span> h);</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">while</span>(m--) &#123;</span><br><span class="line">        <span class="type">int</span> x, y, z;</span><br><span class="line">        cin &gt;&gt; x &gt;&gt; y &gt;&gt; z;</span><br><span class="line">        <span class="built_in">add</span>(x,y,z);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">dijkstra</span>() &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="时间复杂度分析-1"><a href="#时间复杂度分析-1" class="headerlink" title="时间复杂度分析"></a>时间复杂度分析</h4><p>寻找路径最短的点：O(n)</p><p>加入集合S：O(n)</p><p>更新距离：O(mlogn)</p><h2 id="bellman-ford"><a href="#bellman-ford" class="headerlink" title="bellman-ford"></a>bellman-ford</h2><p>bellman - ford算法擅长解决<strong>有边数限制的最短路问题</strong>。</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230817151559073.png" alt="image-20230817151559073"></p><p>Bellman - ford 算法是<strong>求含负权图的单源最短路径</strong>的一种算法，效率较低，代码难度较小。其原理为<em>连续进行松弛，在每次松弛时把每条边都更新一下，若在 n-1 次松弛后还能更新，则说明图中有负环，因此无法得出结果，否则就完成</em>。</p><p>(通俗的来讲就是：假设 1 号点到 n 号点是可达的，每一个点同时向指向的方向出发，更新相邻的点的最短距离，通过循环 n-1 次操作，若图中不存在负环，则 1 号点一定会到达 n 号点，若图中存在负环，则在 n-1 次松弛后一定还会更新)</p><p>具体步骤：</p><p>n次迭代，每次循环所有边</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for <span class="keyword">\ </span>n <span class="keyword">\ </span>次 <span class="keyword">\\</span></span><br><span class="line">for 所有边 <span class="keyword">\ </span>(a,b,w) <span class="keyword">\\</span></span><br><span class="line">dist[b] = min(dist[b], backup[a] + w)  <span class="keyword">\tag</span>&#123;松弛操作&#125;</span><br></pre></td></tr></table></figure><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230817151509847.png" alt="image-20230817151509847"></p><p>注意：backup[] 数组是上一次迭代后 dist[] 数组的备份，由于是每个点同时向外出发，因此需要对 dist[] 数组进行备份，若不进行备份会因此发生串联效应，影响到下一个点</p><p>n次之后，一定有：</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dist[b] <span class="keyword">\leq</span> dist[a] <span class="keyword">\;</span> + <span class="keyword">\;</span> w    (三角不等式)</span><br></pre></td></tr></table></figure><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/image-20230817151405909.png" alt="image-20230817151405909"></p><p>在下面代码中，是否能到达n号点的判断中需要进行 <strong>if(dist[n] &gt; INF&#x2F;2)</strong> 判断，而并非是 <strong>if(dist[n] &#x3D;&#x3D; INF)</strong> 判断，原因是INF是一个确定的值(<em><strong>0x3f3f3f3f</strong></em>)，并非真正的无穷大，会随着其他数值而受到影响，dist[n]大于某个与INF相同数量级的数即可</p><h3 id="有边数限制的最短路"><a href="#有边数限制的最短路" class="headerlink" title="有边数限制的最短路"></a>有边数限制的最短路</h3><h4 id="题目描述-9"><a href="#题目描述-9" class="headerlink" title="题目描述"></a>题目描述</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">给定一个 n 个点 m 条边的有向图，图中可能存在重边和自环， 边权可能为负数。</span><br><span class="line"></span><br><span class="line">请你求出从 <span class="number">1</span> 号点到 n 号点的最多经过 k 条边的最短距离，如果无法从 <span class="number">1</span> 号点走到 n 号点，输出 `impossible`。</span><br><span class="line"></span><br><span class="line">注意：图中可能 存在负权回路 。</span><br><span class="line"></span><br><span class="line">==输入格式==</span><br><span class="line"></span><br><span class="line">​第一行包含三个整数 n, m, k。</span><br><span class="line"></span><br><span class="line">​接下来 m行，每行包含三个整数 x, y, z，表示存在一条从点 x 到点 y 的有向边，边长为 z。</span><br><span class="line"></span><br><span class="line">​点的编号为 <span class="number">1</span>∼n。</span><br><span class="line"></span><br><span class="line">==输出格式==</span><br><span class="line"></span><br><span class="line">​输出一个整数，表示从 <span class="number">1</span>号点到 n 号点的最多经过 k 条边的最短距离。</span><br><span class="line"></span><br><span class="line">​如果不存在满足条件的路径，则输出 `impossible`。</span><br><span class="line"></span><br><span class="line">==数据范围==</span><br><span class="line"></span><br><span class="line">​<span class="number">1</span> ≤ n, k ≤ <span class="number">500</span>,</span><br><span class="line">​<span class="number">1</span> ≤ m ≤ <span class="number">10000</span>,</span><br><span class="line">​<span class="number">1</span> ≤ x, y ≤ n，</span><br><span class="line"> 任意边长的绝对值不超过 <span class="number">10000</span>。</span><br><span class="line"></span><br><span class="line">==输入样例==</span><br><span class="line"></span><br><span class="line"><span class="number">3</span> <span class="number">3</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">1</span></span><br><span class="line"><span class="number">2</span> <span class="number">3</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">3</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line">==输出样例==</span><br><span class="line"></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><h4 id="完整代码-9"><a href="#完整代码-9" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">510</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M = <span class="number">1e4</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, k;</span><br><span class="line"><span class="type">int</span> dist[N], backup[N];<span class="comment">//备份数组防止串联</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span>&#123;</span><br><span class="line">    <span class="type">int</span> a, b, w;</span><br><span class="line">&#125;Edges[M];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bellman_ford</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dist, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> dist);</span><br><span class="line">    dist[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; k; ++i) &#123;</span><br><span class="line">        <span class="built_in">memcpy</span>(backup, dist, <span class="keyword">sizeof</span> dist);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; ++j) &#123;</span><br><span class="line">            <span class="type">int</span> a = Edges[j].a, b = Edges[j].b, w = Edges[j].w;</span><br><span class="line">            dist[b] = <span class="built_in">min</span>(dist[b],backup[a]+w);</span><br><span class="line">            <span class="comment">//使用backup:避免给a更新后立马更新b, 这样b一次性最短路径就多了两条边出来</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(dist[n] &gt; <span class="number">0x3f3f3f3f</span> / <span class="number">2</span>) cout &lt;&lt; <span class="string">&quot;impossible&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">else</span> cout &lt;&lt; dist[n] &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line">        <span class="type">int</span> x, y, z;</span><br><span class="line">        cin &gt;&gt; x &gt;&gt; y &gt;&gt; z;</span><br><span class="line">        Edges[i] = &#123;x,y,z&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">bellman_ford</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="spfa"><a href="#spfa" class="headerlink" title="spfa"></a>spfa</h2><p>spfa：对bellman_ford算法的优化</p><p>Bellman_ford算法会遍历所有的边，但是有很多的边遍历了其实没有什么意义，我们只用遍历那些到源点距离变小的点所连接的边即可，只有当一个点的前驱结点更新了，该节点才会得到更新；因此考虑到这一点，我们将创建一个队列每一次加入距离被更新的结点。</p><ol><li><p>st数组的作用：<strong>判断当前的点是否已经加入到队列当中了</strong>；已经加入队列的结点就不需要反复的把该点加入到队列中了，就算此次还是会更新到源点的距离，那只用更新一下数值而不用加入到队列当中。<br>即便不使用st数组最终也没有什么关系，但是使用的好处在于可以提升效率。</p></li><li><p>SPFA算法看上去和Dijstra算法长得有一些像但是其中的意义还是相差甚远的。</p></li><li><p>Bellman_ford算法里最后return-1的判断条件写的是<em><strong>dist[n]&gt;0x3f3f3f3f&#x2F;2</strong></em>;而spfa算法写的是***dist[n]&#x3D;&#x3D;0x3f3f3f3f;<em><strong>其原因在于Bellman_ford算法会遍历所有的边，因此不管是不是和源点连通的边它都会得到更新；但是</strong>SPFA算法不一样，它相当于采用了BFS，因此遍历到的结点都是与源点连通的，因此如果你要求的n和源点不连通，它不会得到更新，还是保持的0x3f3f3f3f。</em>*</p></li><li><p>Bellman_ford算法可以存在负权回路，是因为其循环的次数是有限制的因此最终不会发生死循环；但是SPFA算法不可以，由于用了队列来存储，只要发生了更新就会不断的入队，因此假如有负权回路请你不要用SPFA否则会<strong>死循环</strong>。</p></li><li><p>由于SPFA算法是由Bellman_ford算法优化而来，在最坏的情况下时间复杂度和它一样即时间复杂度为 O(nm) ，假如题目时间允许可以直接用SPFA算法去解Dijkstra算法的题目。</p></li><li><p>求负环一般使用SPFA算法，方法是用一个cnt数组记录每个点到源点的边数，一个点被更新一次就+1，一旦有点的边数达到了n那就证明存在了负环。</p></li></ol><h3 id="spfa求最短路"><a href="#spfa求最短路" class="headerlink" title="spfa求最短路"></a>spfa求最短路</h3><h4 id="题目描述-10"><a href="#题目描述-10" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/spfa%E6%B1%82%E6%9C%80%E7%9F%AD%E8%B7%AF%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0.png" alt="spfa求最短路题目描述"></p><p>&#x3D;&#x3D;输入样例&#x3D;&#x3D;</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3 3</span><br><span class="line">1 2 5</span><br><span class="line">2 3 -3</span><br><span class="line">1 3 4</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;输出样例&#x3D;&#x3D;</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure><h4 id="完整代码-10"><a href="#完整代码-10" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> h[N], e[N], w[N], ne[N], idx;<span class="comment">//邻接表存储图</span></span><br><span class="line"><span class="type">int</span> dist[N];</span><br><span class="line"><span class="type">bool</span> st[N];<span class="comment">//标记顶点是不是在队列中</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c)</span> </span>&#123;</span><br><span class="line">    e[idx] = b, w[idx] = c, ne[idx] = h[a], h[a] = idx++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">spfa</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dist, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> dist);<span class="comment">//初始化距离为无穷大</span></span><br><span class="line">    dist[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>(<span class="number">1</span>);</span><br><span class="line">    st[<span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>()) &#123;<span class="comment">//不断进行松弛</span></span><br><span class="line">        <span class="type">int</span> t = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        st[t] = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = h[t]; i != <span class="number">-1</span>; i = ne[i]) &#123;</span><br><span class="line">            <span class="type">int</span> j = e[i];</span><br><span class="line">            <span class="keyword">if</span>(dist[j] &gt; dist[t] + w[i]) &#123;</span><br><span class="line">                dist[j] = dist[t] + w[i];</span><br><span class="line">                <span class="keyword">if</span>(!st[j]) &#123;</span><br><span class="line">                    q.<span class="built_in">push</span>(j);</span><br><span class="line">                    st[j] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(dist[n] == <span class="number">0x3f3f3f3f</span>) cout &lt;&lt; <span class="string">&quot;impossible&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">else</span> cout &lt;&lt; dist[n] &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="keyword">sizeof</span> h);<span class="comment">//初始化邻接表</span></span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line">        <span class="type">int</span> x, y, z;</span><br><span class="line">        cin &gt;&gt; x &gt;&gt; y &gt;&gt; z;</span><br><span class="line">        <span class="built_in">add</span>(x,y,z);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">spfa</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="图解-1"><a href="#图解-1" class="headerlink" title="图解"></a>图解</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/%E5%9B%BE%E8%A7%A31.png" alt="图解1"></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/%E5%9B%BE%E8%A7%A32.png" alt="图解2"></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/%E5%9B%BE%E8%A7%A33.png" alt="图解3"></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/%E5%9B%BE%E8%A7%A34.png" alt="图解4"></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/%E5%9B%BE%E8%A7%A35.png" alt="图解5"></p><h3 id="spfa判断负环"><a href="#spfa判断负环" class="headerlink" title="spfa判断负环"></a>spfa判断负环</h3><h4 id="题目描述-11"><a href="#题目描述-11" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/spfa%E5%88%A4%E6%96%AD%E8%B4%9F%E7%8E%AF.png" alt="spfa判断负环"></p><p>&#x3D;&#x3D;输入样例&#x3D;&#x3D;</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3 3</span><br><span class="line">1 2 -1</span><br><span class="line">2 3 4</span><br><span class="line">3 1 -4</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;输出样例&#x3D;&#x3D;</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Yes</span><br></pre></td></tr></table></figure><h4 id="完整代码-11"><a href="#完整代码-11" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e3</span> + <span class="number">10</span>, M = <span class="number">1e4</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> h[N], e[M], w[M], ne[M], idx;<span class="comment">//邻接表存储图</span></span><br><span class="line"><span class="type">int</span> dist[N];</span><br><span class="line"><span class="type">int</span> cnt[N];<span class="comment">//记录每个点到起点的边数,当cnt[i]&gt;=n表示出现了边数&gt;=结点数,必然有环,而且一定是负环！</span></span><br><span class="line"><span class="type">bool</span> st[N];<span class="comment">//标记顶点是不是在队列中</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c)</span> </span>&#123;</span><br><span class="line">    e[idx] = b, w[idx] = c, ne[idx] = h[a], h[a] = idx++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">spfa</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 这里不需要初始化dist数组为 正无穷/初始化的原因是,如果存在负环,那么dist不管初始化为多少,都会被更新</span></span><br><span class="line">    <span class="comment">//memset(dist, 0x3f, sizeof dist);//初始化距离为无穷大</span></span><br><span class="line">    <span class="comment">//dist[1] = 0;</span></span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    <span class="comment">//判断负环，只从一个点出发，有可能到达不了负环那里，需要一开始就把所有结点放入队列，且标记进入了队列降低效率</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        q.<span class="built_in">push</span>(i);</span><br><span class="line">        st[i] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>()) &#123;<span class="comment">//不断进行松弛</span></span><br><span class="line">        <span class="type">int</span> t = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        st[t] = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = h[t]; i != <span class="number">-1</span>; i = ne[i]) &#123;</span><br><span class="line">            <span class="type">int</span> j = e[i];</span><br><span class="line">            <span class="keyword">if</span>(dist[j] &gt; dist[t] + w[i]) &#123;</span><br><span class="line">                dist[j] = dist[t] + w[i];</span><br><span class="line">                cnt[j] = cnt[t] + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(cnt[j] &gt;= n) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">               <span class="comment">//若此时j没在队列中,则进队.已经在队列中了,上面已经更新了数值。重复加入队列降低效率</span></span><br><span class="line">                <span class="keyword">if</span>(!st[j]) &#123;</span><br><span class="line">                    q.<span class="built_in">push</span>(j);</span><br><span class="line">                    st[j] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="keyword">sizeof</span> h);<span class="comment">//初始化邻接表</span></span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line">        <span class="type">int</span> x, y, z;</span><br><span class="line">        cin &gt;&gt; x &gt;&gt; y &gt;&gt; z;</span><br><span class="line">        <span class="built_in">add</span>(x,y,z);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">spfa</span>()) cout &lt;&lt; <span class="string">&quot;Yes&quot;</span> &lt;&lt;endl;</span><br><span class="line">    <span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;No&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="图解-2"><a href="#图解-2" class="headerlink" title="图解"></a>图解</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/%E5%9B%BE%E8%A7%A3.jpg" alt="图解"></p><h2 id="Floyd"><a href="#Floyd" class="headerlink" title="Floyd"></a>Floyd</h2><p>时间复杂度：O(n)</p><h3 id="Floyd求最短路"><a href="#Floyd求最短路" class="headerlink" title="Floyd求最短路"></a>Floyd求最短路</h3><h4 id="题目描述-12"><a href="#题目描述-12" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/Floyd%E6%B1%82%E6%9C%80%E7%9F%AD%E8%B7%AF%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0.png" alt="Floyd求最短路题目描述"></p><p>&#x3D;&#x3D;输入样例&#x3D;&#x3D;</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span> <span class="number">3</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">1</span></span><br><span class="line"><span class="number">2</span> <span class="number">3</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">3</span> <span class="number">1</span></span><br><span class="line"><span class="number">2</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;输出样例&#x3D;&#x3D;</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">impossible</span><br><span class="line">1</span><br></pre></td></tr></table></figure><h4 id="完整代码-12"><a href="#完整代码-12" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e2</span> + <span class="number">10</span>, INF = <span class="number">1e9</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, Q;</span><br><span class="line"><span class="type">int</span> dist[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Floyd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">1</span>; k &lt;= n; ++k)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">                dist[i][j] = <span class="built_in">min</span>(dist[i][j],dist[i][k]+dist[k][j]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; Q;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span> ;i &lt;= n; ++i) </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">            <span class="keyword">if</span>(i == j) dist[i][j] = <span class="number">0</span>;<span class="comment">//自环为零</span></span><br><span class="line">            <span class="keyword">else</span> dist[i][j] = INF;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(m--) &#123;</span><br><span class="line">        <span class="type">int</span> x, y, z;</span><br><span class="line">        cin &gt;&gt; x &gt;&gt; y &gt;&gt; z;</span><br><span class="line">        dist[x][y] = <span class="built_in">min</span>(dist[x][y],z);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">Floyd</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(Q--) &#123;</span><br><span class="line">        <span class="type">int</span> x, y;</span><br><span class="line">        cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">        <span class="keyword">if</span>(dist[x][y] &gt; INF / <span class="number">2</span>) cout &lt;&lt; <span class="string">&quot;impossible&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">else</span> cout &lt;&lt; dist[x][y] &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h4><h5 id="解释一"><a href="#解释一" class="headerlink" title="解释一"></a>解释一</h5><p>从任意顶点 i 到任意顶点 j 的最短路径不外乎两种可能<br>① 直接从 i 到 j<br>② 从 i 经过若干个顶点到 j<br>    假设 dist(i，j) 为顶点 i 到顶点 j 的最短路径的距离<br>    对于每一个顶点 k，检查 <em><strong>dist(i，k) + dist(k，j)＜dist(i，j)</strong></em> 是否成立<br>    如果成立，证明从 i 到 k 再到 j 的路径比 i 直接到 j 的路径短，设置 <em><strong>dist(i，j) &#x3D; dist(i，k) + dist(k，j)</strong></em><br>    当我们遍历完所有结点 k，dist(i，j) 中记录的便是 i 到 j 的最短路径的距离</p><h5 id="解释二"><a href="#解释二" class="headerlink" title="解释二"></a>解释二</h5><p>动态规划的思想</p><p>假设节点序号是从1到n。<br>假设$f[0][i][j]$是一个n*n的矩阵，第i行第j列代表从i到j的权值，如果i到j有边，那么其值就为c<sub>i,j</sub>(边ij的权值)。 如果没有边，那么其值就为无穷大。 $f[k][i][j]$代表（k的取值范围是从1到n），在考虑了从1到k的节点作为中间经过的节点时，从i到j的最短路径的长度。<br>比如，$f[1][i][j]$就代表了，在考虑了1节点作为中间经过的节点时，从i到j的最短路径的长度。<br>分析可知，的$f[1][i][j]$值无非就是两种情况，而现在需要分析的路径也无非两种情况，i&#x3D;&gt;j，i&#x3D;&gt;1&#x3D;&gt;j：<br>【1】：$f[0][i][j]$：i&#x3D;&gt;j这种路径的长度，小于，i&#x3D;&gt;1&#x3D;&gt;j这种路径的长度<br>【2】$f[0][i][1]+f[0][1][j]$：i&#x3D;&gt;1&#x3D;&gt;j这种路径的长度，小于，i&#x3D;&gt;j这种路径的长度<br>形式化说明如下：<br>$f[k][i][j]$可以从两种情况转移而来：<br>【1】从$f[k−1][k][j]$转移而来，表示i到j的最短路径不经过k这个节点<br>【2】从$f[k−1][i][k]+f[k−1][k][j]$转移而来，表示i到j的最短路径经过k这个节点</p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/dp%E5%88%86%E6%9E%90%E6%B3%95.png" alt="dp分析法"></p><h2 id="Prim"><a href="#Prim" class="headerlink" title="Prim"></a>Prim</h2><h3 id="Prim算法求最小生成树"><a href="#Prim算法求最小生成树" class="headerlink" title="Prim算法求最小生成树"></a>Prim算法求最小生成树</h3><h4 id="题目描述-13"><a href="#题目描述-13" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/Prim%E7%AE%97%E6%B3%95%E6%B1%82%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0.png" alt="Prim算法求最小生成树题目描述"></p><p>&#x3D;&#x3D;输入样例&#x3D;&#x3D;</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">4 5</span><br><span class="line">1 2 1</span><br><span class="line">1 3 2</span><br><span class="line">1 4 3</span><br><span class="line">2 3 2</span><br><span class="line">3 4 4</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;输出样例&#x3D;&#x3D;</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">6</span><br></pre></td></tr></table></figure><h4 id="完整代码-13"><a href="#完整代码-13" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">S:当前已经在联通块中的所有点的集合</span></span><br><span class="line"><span class="comment">1. dist[i] = inf</span></span><br><span class="line"><span class="comment">2. for n 次</span></span><br><span class="line"><span class="comment">    t&lt;-S外离S最近的点</span></span><br><span class="line"><span class="comment">    利用t更新S外点到S的距离</span></span><br><span class="line"><span class="comment">    st[t] = true</span></span><br><span class="line"><span class="comment">n次迭代之后所有点都已加入到S中</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">510</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> g[N][N];<span class="comment">//稠密图采用邻接矩阵存储</span></span><br><span class="line"><span class="type">int</span> dist[N];<span class="comment">//存储其他点到S的距离</span></span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">prim</span><span class="params">()</span> </span>&#123;<span class="comment">//如果图不连通返回INF, 否则返回re</span></span><br><span class="line">    <span class="built_in">memset</span>(dist, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> dist);</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//寻找离集合S最近的点 </span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="type">int</span> t = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">            <span class="keyword">if</span>(!st[j] &amp;&amp; (t == <span class="number">-1</span> || dist[t] &gt; dist[j]))</span><br><span class="line">                t = j;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//判断是否连通，有无最小生成树</span></span><br><span class="line">        <span class="keyword">if</span>(i &amp;&amp; dist[t] == INF) &#123;</span><br><span class="line">            res = INF;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(i) res += dist[t];</span><br><span class="line">        st[t] = <span class="literal">true</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) </span><br><span class="line">            dist[j] = <span class="built_in">min</span>(dist[j],g[t][j]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(res == INF) cout &lt;&lt; <span class="string">&quot;impossible&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">else</span> cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="built_in">memset</span>(g, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> g);</span><br><span class="line">    <span class="keyword">while</span>(m--) &#123;</span><br><span class="line">        <span class="type">int</span> a, b, c;</span><br><span class="line">        cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line">        g[a][b] = g[b][a] = <span class="built_in">min</span>(g[a][b],c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">prim</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//含路径</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">510</span>;</span><br><span class="line"><span class="type">int</span> g[N][N];<span class="comment">//存储图</span></span><br><span class="line"><span class="type">int</span> dt[N];<span class="comment">//存储各个节点到生成树的距离</span></span><br><span class="line"><span class="type">int</span> st[N];<span class="comment">//节点是否被加入到生成树中</span></span><br><span class="line"><span class="type">int</span> pre[N];<span class="comment">//节点的前去节点</span></span><br><span class="line"><span class="type">int</span> n, m;<span class="comment">//n 个节点，m 条边</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">prim</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dt,<span class="number">0x3f</span>, <span class="built_in">sizeof</span>(dt));<span class="comment">//初始化距离数组为一个很大的数（10亿左右）</span></span><br><span class="line">    <span class="type">int</span> res= <span class="number">0</span>;</span><br><span class="line">    dt[<span class="number">1</span>] = <span class="number">0</span>;<span class="comment">//从 1 号节点开始生成 </span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)<span class="comment">//每次循环选出一个点加入到生成树</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> t = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++)<span class="comment">//每个节点一次判断</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(!st[j] &amp;&amp; (t == <span class="number">-1</span> || dt[j] &lt; dt[t]))<span class="comment">//如果没有在树中，且到树的距离最短，则选择该点</span></span><br><span class="line">                t = j;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2022.6.1 发现测试用例加强后，需要判断孤立点了</span></span><br><span class="line">        <span class="comment">//如果孤立点，直返输出不能，然后退出</span></span><br><span class="line">        <span class="keyword">if</span>(dt[t] == <span class="number">0x3f3f3f3f</span>) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;impossible&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        st[t] = <span class="number">1</span>;<span class="comment">// 选择该点</span></span><br><span class="line">        res += dt[t];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)<span class="comment">//更新生成树外的点到生成树的距离</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(dt[i] &gt; g[t][i] &amp;&amp; !st[i])<span class="comment">//从 t 到节点 i 的距离小于原来距离，则更新。</span></span><br><span class="line">            &#123;</span><br><span class="line">                dt[i] = g[t][i];<span class="comment">//更新距离</span></span><br><span class="line">                pre[i] = t;<span class="comment">//从 t 到 i 的距离更短，i 的前驱变为 t.</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">getPath</span><span class="params">()</span><span class="comment">//输出各个边</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = n; i &gt; <span class="number">1</span>; i--)<span class="comment">//n 个节点，所以有 n-1 条边。</span></span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; i &lt;&lt;<span class="string">&quot; &quot;</span> &lt;&lt; pre[i] &lt;&lt; <span class="string">&quot; &quot;</span>&lt;&lt; endl;<span class="comment">// i 是节点编号，pre[i] 是 i 节点的前驱节点。他们构成一条边。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(g, <span class="number">0x3f</span>, <span class="built_in">sizeof</span>(g));<span class="comment">//各个点之间的距离初始化成很大的数</span></span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;<span class="comment">//输入节点数和边数</span></span><br><span class="line">    <span class="keyword">while</span>(m --)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a, b, w;</span><br><span class="line">        cin &gt;&gt; a &gt;&gt; b &gt;&gt; w;<span class="comment">//输出边的两个顶点和权重</span></span><br><span class="line">        g[a][b] = g[b][a] = <span class="built_in">min</span>(g[a][b],w);<span class="comment">//存储权重</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">prim</span>();<span class="comment">//求最下生成树</span></span><br><span class="line">    <span class="built_in">getPath</span>();<span class="comment">//输出路径</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="图解-3"><a href="#图解-3" class="headerlink" title="图解"></a>图解</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/%E5%9B%BE%E8%A7%A31.png" alt="图解1"></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/%E5%9B%BE%E8%A7%A32.png" alt="图解2"></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/%E5%9B%BE%E8%A7%A33.png" alt="图解3"></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/%E5%9B%BE%E8%A7%A34.png" alt="图解4"></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/%E5%9B%BE%E8%A7%A35.png" alt="图解5"></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/%E5%9B%BE%E8%A7%A36.png" alt="图解6"></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/%E5%9B%BE%E8%A7%A37.png" alt="图解7"></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/%E5%9B%BE%E8%A7%A38.png" alt="图解8"></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/%E5%9B%BE%E8%A7%A39.png" alt="图解9"></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/%E5%9B%BE%E8%A7%A310.png" alt="图解10"></p><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/%E5%9B%BE%E8%A7%A311.png" alt="图解11"></p><h2 id="Kruskal"><a href="#Kruskal" class="headerlink" title="Kruskal"></a>Kruskal</h2><h3 id="Kruskal算法求最小生成树"><a href="#Kruskal算法求最小生成树" class="headerlink" title="Kruskal算法求最小生成树"></a>Kruskal算法求最小生成树</h3><h4 id="题目描述-14"><a href="#题目描述-14" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/Kruskal%E7%AE%97%E6%B3%95%E6%B1%82%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0.png" alt="Kruskal算法求最小生成树题目描述"></p><p>&#x3D;&#x3D;输入样例&#x3D;&#x3D;</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">4 5</span><br><span class="line">1 2 1</span><br><span class="line">1 3 2</span><br><span class="line">1 4 3</span><br><span class="line">2 3 2</span><br><span class="line">3 4 4</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;输出样例&#x3D;&#x3D;</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">6</span><br></pre></td></tr></table></figure><h4 id="完整代码-14"><a href="#完整代码-14" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> p[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span> &#123;</span><br><span class="line">    <span class="type">int</span> a, b, w;</span><br><span class="line">    </span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span> &lt; (<span class="type">const</span> Edge &amp;W)<span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> w &lt; W.w;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;edges[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p[x] != x) p[x] = <span class="built_in">find</span>(p[x]);</span><br><span class="line">    <span class="keyword">return</span> p[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Kruskal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">sort</span>(edges, edges + m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) p[i] = i;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>, cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line">        <span class="type">int</span> a = edges[i].a, b = edges[i].b, w = edges[i].w;</span><br><span class="line">        a = <span class="built_in">find</span>(a), b = <span class="built_in">find</span>(b);</span><br><span class="line">        <span class="keyword">if</span>(a != b) &#123;<span class="comment">//不在一个集合</span></span><br><span class="line">            p[a] = b;</span><br><span class="line">            res += w;</span><br><span class="line">            ++cnt;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(cnt &lt; n - <span class="number">1</span>) cout &lt;&lt; <span class="string">&quot;impossible&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">else</span> cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line">        <span class="type">int</span> a, b, w;</span><br><span class="line">        cin &gt;&gt; a &gt;&gt; b &gt;&gt; w;</span><br><span class="line">        edges[i] = &#123;a,b,w&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Kruskal</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h4><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">将所有边按照权值的大小进行升序排序，然后从小到大一一判断。</span><br><span class="line"></span><br><span class="line">如果这个边与之前选择的所有边不会组成回路，就选择这条边分；反之，舍去。</span><br><span class="line"></span><br><span class="line">直到具有 n 个顶点的连通网筛选出来 n-1 条边为止。</span><br><span class="line"></span><br><span class="line">筛选出来的边和所有的顶点构成此连通网的最小生成树。</span><br></pre></td></tr></table></figure><p><strong>判断是否会产生回路的方法为：使用并查集。</strong></p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">在初始状态下给各个个顶点在不同的集合中。</span><br><span class="line"></span><br><span class="line">遍历过程的每条边，判断这两个顶点的是否在一个集合中。</span><br><span class="line"></span><br><span class="line">如果边上的这两个顶点在一个集合中，说明两个顶点已经连通，这条边不要。如果不在一个集合中，则要这条边。</span><br></pre></td></tr></table></figure><h4 id="图解-4"><a href="#图解-4" class="headerlink" title="图解"></a>图解</h4><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/sorted.jpg" alt="sorted" style="zoom:150%;" /><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/display.gif" alt="display" style="zoom:150%;" /><h2 id="染色法判定二分图"><a href="#染色法判定二分图" class="headerlink" title="染色法判定二分图"></a>染色法判定二分图</h2><p><em><strong>染色法</strong></em></p><p>​将所有点分成两个集合，使得所有边只出现在集合之间，就是二分图<br>​二分图：一定不含有奇数环，可能包含长度为偶数的环， 不一定是连通图</p><p><em><strong>如何判断一个图是不是二分图？</strong></em></p><p>​开始对任意一未染色的顶点染色。</p><p>​判断其相邻的顶点中，若未染色则将其染上和相邻顶点不同的颜色。</p><p>​若已经染色且颜色和相邻顶点的颜色相同则说明不是二分图，若颜色不同则继续判断。</p><h3 id="题目描述-15"><a href="#题目描述-15" class="headerlink" title="题目描述"></a>题目描述</h3><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/%E6%9F%93%E8%89%B2%E6%B3%95%E5%88%A4%E5%AE%9A%E4%BA%8C%E5%88%86%E5%9B%BE%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0.png" alt="染色法判定二分图题目描述"></p><p>&#x3D;&#x3D;输入样例&#x3D;&#x3D;</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">4 4</span><br><span class="line">1 3</span><br><span class="line">1 4</span><br><span class="line">2 3</span><br><span class="line">2 4</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;输出样例&#x3D;&#x3D;</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Yes</span><br></pre></td></tr></table></figure><h3 id="完整代码-15"><a href="#完整代码-15" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, M = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="comment">// 由于是无向图, 顶点数最大是N，那么边数M最大是顶点数的2倍</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n ,m;</span><br><span class="line"><span class="type">int</span> h[N], e[M] , ne[M], idx;</span><br><span class="line"><span class="type">int</span> color[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">    e[idx] = b, ne[idx] = h[a], h[a] = idx++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> c)</span> </span>&#123;</span><br><span class="line">    color[u] = c;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = h[u]; i != <span class="number">-1</span>; i = ne[i]) &#123;</span><br><span class="line">        <span class="type">int</span> j = e[i];</span><br><span class="line">        <span class="keyword">if</span>(!color[j]) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!<span class="built_in">dfs</span>(j, <span class="number">3</span> - c)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="comment">//（3 - 1 = 2， 如果 u 的颜色是2，则和 u 相邻的染成 1）</span></span><br><span class="line">            <span class="comment">//（3 - 2 = 1， 如果 u 的颜色是1，则和 u 相邻的染成 2）</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(color[j] == c) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="keyword">sizeof</span> h);<span class="comment">//初始化邻接表</span></span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">while</span>(m--) &#123;</span><br><span class="line">        <span class="type">int</span> a, b;</span><br><span class="line">        cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">        <span class="built_in">add</span>(a,b), <span class="built_in">add</span>(b,a);<span class="comment">// 无向图，a-&gt;b, b-&gt;a</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!color[i]) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!<span class="built_in">dfs</span>(i,<span class="number">1</span>)) &#123;</span><br><span class="line">                flag = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(flag) cout &lt;&lt; <span class="string">&quot;Yes&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;No&quot;</span> &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="匈牙利算法"><a href="#匈牙利算法" class="headerlink" title="匈牙利算法"></a>匈牙利算法</h2><h3 id="二分图的最大匹配"><a href="#二分图的最大匹配" class="headerlink" title="二分图的最大匹配"></a>二分图的最大匹配</h3><h4 id="题目描述-16"><a href="#题目描述-16" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/%E4%BA%8C%E5%88%86%E5%9B%BE%E7%9A%84%E6%9C%80%E5%A4%A7%E5%8C%B9%E9%85%8D%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0.png" alt="二分图的最大匹配题目描述"></p><p>&#x3D;&#x3D;输入样例&#x3D;&#x3D;</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2 2 4</span><br><span class="line">1 1</span><br><span class="line">1 2</span><br><span class="line">2 1</span><br><span class="line">2 2</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;输出样例&#x3D;&#x3D;</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure><h4 id="完整代码-16"><a href="#完整代码-16" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//时间复杂度最坏情况下：O(nm)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">510</span>, M = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n1, n2, m;</span><br><span class="line"><span class="type">int</span> h[N], e[M], ne[M], idx;</span><br><span class="line"><span class="type">int</span> match[N];</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"><span class="comment">//st 标记是否递归找过， match[x]：和 x 编号的男生的编号</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">    e[idx] = b, ne[idx] = h[a], h[a] = idx++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 和各个点尝试能否匹配</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = h[x]; i != <span class="number">-1</span>; i = ne[i]) &#123;</span><br><span class="line">        <span class="type">int</span> j = e[i];</span><br><span class="line">        <span class="keyword">if</span>(!st[j]) &#123;</span><br><span class="line">            st[j] = <span class="literal">true</span>;</span><br><span class="line">            <span class="comment">// 当前尝试点没有被匹配或者和当前尝试点匹配的那个点可以换另一个匹配</span></span><br><span class="line">            <span class="keyword">if</span>(match[j] == <span class="number">0</span> || <span class="built_in">find</span>(match[j])) &#123;</span><br><span class="line">                <span class="comment">// 和当前尝试点匹配在一起</span></span><br><span class="line">                match[j] = x;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="keyword">sizeof</span> h);</span><br><span class="line">    cin &gt;&gt; n1 &gt;&gt; n2 &gt;&gt; m;</span><br><span class="line">    <span class="keyword">while</span>(m--) &#123;</span><br><span class="line">        <span class="type">int</span> a, b;</span><br><span class="line">        cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">        <span class="built_in">add</span>(a,b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> cnt;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n1; ++i) &#123;</span><br><span class="line">        <span class="built_in">memset</span>(st,<span class="literal">false</span>,<span class="keyword">sizeof</span> st);</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">find</span>(i)) ++cnt;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; cnt &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="动态图解"><a href="#动态图解" class="headerlink" title="动态图解"></a>动态图解</h4><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/display.gif" alt="display"></p>]]></content>
      
      
      <categories>
          
          <category> AcWing </category>
          
          <category> 算法基础 </category>
          
          <category> 搜索与图论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法基础课 </tag>
            
            <tag> 搜索与图论 </tag>
            
            <tag> DFS </tag>
            
            <tag> BFS </tag>
            
            <tag> 深度优先遍历 </tag>
            
            <tag> 广度优先遍历 </tag>
            
            <tag> 拓扑排序 </tag>
            
            <tag> Dijkstra </tag>
            
            <tag> bellman-ford </tag>
            
            <tag> spfa </tag>
            
            <tag> Floyd </tag>
            
            <tag> Prim </tag>
            
            <tag> Kruskal </tag>
            
            <tag> 染色法 </tag>
            
            <tag> 二分图 </tag>
            
            <tag> 匈牙利算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最短路问题汇总</title>
      <link href="/AcWing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/Addition/%E6%9C%80%E7%9F%AD%E8%B7%AF%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/"/>
      <url>/AcWing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/Addition/%E6%9C%80%E7%9F%AD%E8%B7%AF%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="最短路问题汇总"><a href="#最短路问题汇总" class="headerlink" title="最短路问题汇总"></a>最短路问题汇总</h1><p><img src="https://eternity-1320026116.cos.ap-beijing.myqcloud.com/%E6%9C%80%E7%9F%AD%E8%B7%AF%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB.png" alt="最短路问题汇总"></p><h2 id="Dijkstra-朴素-O-n2"><a href="#Dijkstra-朴素-O-n2" class="headerlink" title="Dijkstra-朴素~O(n2)"></a>Dijkstra-朴素~O(n<sup>2</sup>)</h2><ol><li>初始化距离数组, dist[1] &#x3D; 0, dist[i] &#x3D; inf;</li><li>for n次循环 每次循环确定一个min加入S集合中，n次之后就得出所有的最短距离</li><li>将不在S中dist_min的点-&gt;t</li><li>t-&gt;S加入最短路集合</li><li>用t更新到其他点的距离</li></ol><h2 id="Dijkstra-堆优化-O-m-log-m"><a href="#Dijkstra-堆优化-O-m-log-m" class="headerlink" title="Dijkstra-堆优化~O($m\log m$)"></a>Dijkstra-堆优化~O($m\log m$)</h2><ol><li>利用邻接表，<strong>优先队列</strong></li><li>priority_queue&lt;PII, vector<PII>, greater<PII>&gt; heap;&#x2F;&#x2F;小根堆</li><li>利用堆顶来更新其他点，并加入堆中类似宽搜</li></ol><h2 id="Bellman-ford-O-nm"><a href="#Bellman-ford-O-nm" class="headerlink" title="Bellman_ford~O(nm)"></a>Bellman_ford~O(nm)</h2><ol><li>注意连锁想象需要备份, struct Edge{inta,b,c} Edge[M];</li><li>初始化dist, 松弛dist[x.b] &#x3D; min(dist[x.b], backup[x.a]+x.w);</li><li>松弛k次，每次访问m条边</li></ol><h2 id="Spfa-O-n-O-nm"><a href="#Spfa-O-n-O-nm" class="headerlink" title="Spfa~O(n)-O(nm)"></a>Spfa~O(n)-O(nm)</h2><ol><li>利用队列优化仅加入修改过的地方</li><li>for k次</li><li>for 所有边利用宽搜模型去优化bellman_ford算法</li><li>更新队列中当前点的所有出边</li></ol><h2 id="Floyd-O-n3"><a href="#Floyd-O-n3" class="headerlink" title="Floyd~O(n3)"></a>Floyd~O(n<sup>3</sup>)</h2><ol><li>初始化d</li><li>k, i, j 去更新d</li></ol>]]></content>
      
      
      <categories>
          
          <category> AcWing </category>
          
          <category> 算法基础 </category>
          
          <category> Addition </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法基础课 </tag>
            
            <tag> 搜索与图论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>由数据范围反推算法复杂度以及算法内容</title>
      <link href="/AcWing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/Addition/%E7%94%B1%E6%95%B0%E6%8D%AE%E8%8C%83%E5%9B%B4%E5%8F%8D%E6%8E%A8%E7%AE%97%E6%B3%95%E5%A4%8D%E6%9D%82%E5%BA%A6%E4%BB%A5%E5%8F%8A%E7%AE%97%E6%B3%95%E5%86%85%E5%AE%B9/"/>
      <url>/AcWing/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/Addition/%E7%94%B1%E6%95%B0%E6%8D%AE%E8%8C%83%E5%9B%B4%E5%8F%8D%E6%8E%A8%E7%AE%97%E6%B3%95%E5%A4%8D%E6%9D%82%E5%BA%A6%E4%BB%A5%E5%8F%8A%E7%AE%97%E6%B3%95%E5%86%85%E5%AE%B9/</url>
      
        <content type="html"><![CDATA[<h2 id="由数据范围反推算法复杂度以及算法内容"><a href="#由数据范围反推算法复杂度以及算法内容" class="headerlink" title="由数据范围反推算法复杂度以及算法内容"></a>由数据范围反推算法复杂度以及算法内容</h2><p>一般ACM或者笔试题的时间限制是1秒或2秒。</p><p>在这种情况下，C++代码中的操作次数控制在 **10<sup>7</sup> ~ 10<sup>8 </sup> **为最佳。</p><p>下面给出在不同数据范围下，代码的时间复杂度和算法该如何选择：</p><ol><li>n≤30, 指数级别, dfs+剪枝，状态压缩dp</li><li>n≤100 &#x3D;&gt; O(n<sup>3</sup>)，floyd，dp，高斯消元</li><li>n≤1000 &#x3D;&gt; O(n<sup>2</sup>)，O(n<sup>2</sup>logn)，dp，二分，朴素版Dijkstra、朴素版Prim、Bellman-Ford</li><li>n≤10000 &#x3D;&gt; O(n∗$\sqrt n$)，块状链表、分块、莫队</li><li>n≤100000 &#x3D;&gt; O(nlogn) &#x3D;&gt; 各种sort，线段树、树状数组、set&#x2F;map、heap、拓扑排序、dijkstra+heap、prim+heap、Kruskal、spfa、求凸包、求半平面交、二分、CDQ分治、整体二分、后缀数组、树链剖分、动态树</li><li>n≤1000000 &#x3D;&gt; O(n), 以及常数较小的 O(nlogn) 算法 &#x3D;&gt; 单调队列、 hash、双指针扫描、并查集，kmp、AC自动机，常数比较小的 O(nlogn) 的做法：sort、树状数组、heap、dijkstra、spfa</li><li>n≤10000000 &#x3D;&gt; O(n)，双指针扫描、kmp、AC自动机、线性筛素数</li><li>n≤10<sup>9</sup> &#x3D;&gt; O($\sqrt{n}$)，判断质数</li><li>n≤10<sup>18</sup> &#x3D;&gt; O(logn)，最大公约数，快速幂，数位DP</li><li>n≤10<sup>1000</sup> &#x3D;&gt; O((logn)<sup>2</sup>)，高精度加减乘除</li><li>n≤10<sup>100000</sup> &#x3D;&gt; O(logk×loglogk)，k表示位数，高精度加减、FFT&#x2F;NTT</li></ol>]]></content>
      
      
      <categories>
          
          <category> AcWing </category>
          
          <category> 算法基础 </category>
          
          <category> Addition </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AcWing </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/custom.css"/>
      <url>/css/custom.css</url>
      
        <content type="html"><![CDATA[/* @font-face {  font-family: Candyhome;  src: url(https://npm.elemecdn.com/anzhiyu-blog@1.1.6/fonts/Candyhome.ttf);  font-display: swap;  font-weight: lighter;} */@font-face {    font-family: ZhuZiAYuanJWD;    src: url(https://npm.elemecdn.com/anzhiyu-blog@1.1.6/fonts/ZhuZiAWan.woff2);    font-display: swap;    font-weight: lighter;  }    div#menus {    font-family: "ZhuZiAYuanJWD";  }  h1#site-title {    font-family: ZhuZiAYuanJWD;    font-size: 3em !important;  }  a.article-title,  a.blog-slider__title,  a.categoryBar-list-link,  h1.post-title {    font-family: ZhuZiAYuanJWD;  }    .iconfont {    font-family: "iconfont" !important;    font-size: 3em;    /* 可以定义图标大小 */    font-style: normal;    -webkit-font-smoothing: antialiased;    -moz-osx-font-smoothing: grayscale;  }    /* 时间轴生肖icon */  svg.icon {    /* 这里定义svg.icon，避免和Butterfly自带的note标签冲突 */    width: 1em;    height: 1em;    /* width和height定义图标的默认宽度和高度*/    vertical-align: -0.15em;    fill: currentColor;    overflow: hidden;  }    .icon-zhongbiao::before {    color: #f7c768;  }    /* 解决artitalk的图标问题 */  #uploadSource > svg {    width: 1.19em;    height: 1.5em;  }    /*top-img黑色透明玻璃效果移除，不建议加，除非你执着于完全一图流或者背景图对比色明显 */  #page-header:not(.not-top-img):before {    background-color: transparent !important;  }    /* 首页文章卡片 */  #recent-posts > .recent-post-item {    background: rgba(255, 255, 255, 0.9);  }    /* 首页侧栏卡片 */  #aside-content .card-widget {    background: rgba(255, 255, 255, 0.9);  }    /* 文章页面正文背景 */  div#post {    background: rgba(255, 255, 255, 0.9);  }    /* 分页页面 */  div#page {    background: rgba(255, 255, 255, 0.9);  }    /* 归档页面 */  div#archive {    background: rgba(255, 255, 255, 0.9);  }    /* 标签页面 */  div#tag {    background: rgba(255, 255, 255, 0.9);  }    /* 分类页面 */  div#category {    background: rgba(255, 255, 255, 0.9);  }    /*夜间模式伪类遮罩层透明*/  [data-theme="dark"] #recent-posts > .recent-post-item {    background: #121212;  }    [data-theme="dark"] .card-widget {    background: #121212 !important;  }    [data-theme="dark"] div#post {    background: #121212 !important;  }    [data-theme="dark"] div#tag {    background: #121212 !important;  }    [data-theme="dark"] div#archive {    background: #121212 !important;  }    [data-theme="dark"] div#page {    background: #121212 !important;  }    [data-theme="dark"] div#category {    background: #121212 !important;  }    [data-theme="dark"] div#category {    background: transparent !important;  }    #rightside > div > button {    border-radius: 5px;  }    /* 滚动条 */    ::-webkit-scrollbar {    width: 10px;    height: 10px;  }    ::-webkit-scrollbar-thumb {    background-color: #3b70fc;    border-radius: 2em;  }    ::-webkit-scrollbar-corner {    background-color: transparent;  }    ::-moz-selection {    color: #fff;    background-color: #3b70fc;  }    /* 鼠标样式 */  #cursor {    position: fixed;    width: 16px;    height: 16px;    /* 这里改变跟随的底色 */    background: rgb(57, 197, 187);    border-radius: 8px;    opacity: 0.25;    z-index: 10086;    pointer-events: none;    transition: 0.2s ease-in-out;    transition-property: background, opacity, transform;  }  #cursor.hidden {    opacity: 0;  }  #cursor.hover {    opacity: 0.1;    transform: scale(2.5);    -webkit-transform: scale(2.5);    -moz-transform: scale(2.5);    -ms-transform: scale(2.5);    -o-transform: scale(2.5);  }  #cursor.active {    opacity: 0.5;    transform: scale(0.5);    -webkit-transform: scale(0.5);    -moz-transform: scale(0.5);    -ms-transform: scale(0.5);    -o-transform: scale(0.5);  }/* 文章页H1-H6图标样式效果 *//* 控制风车转动速度 4s那里可以自己调节快慢 */h1::before,h2::before,h3::before,h4::before,h5::before,h6::before {  -webkit-animation: ccc 4s linear infinite;  animation: ccc 4s linear infinite;}/* 控制风车转动方向 -1turn 为逆时针转动，1turn 为顺时针转动，相同数字部分记得统一修改 */@-webkit-keyframes ccc {  0% {    -webkit-transform: rotate(0deg);    transform: rotate(0deg);  }  to {    -webkit-transform: rotate(-1turn);    transform: rotate(-1turn);  }}@keyframes ccc {  0% {    -webkit-transform: rotate(0deg);    transform: rotate(0deg);  }  to {    -webkit-transform: rotate(-1turn);    transform: rotate(-1turn);  }}/* 设置风车颜色 */#content-inner.layout h1::before {  color: #ef50a8;  margin-left: -1.55rem;  font-size: 1.3rem;  margin-top: -0.23rem;}#content-inner.layout h2::before {  color: #fb7061;  margin-left: -1.35rem;  font-size: 1.1rem;  margin-top: -0.12rem;}#content-inner.layout h3::before {  color: #ffbf00;  margin-left: -1.22rem;  font-size: 0.95rem;  margin-top: -0.09rem;}#content-inner.layout h4::before {  color: #a9e000;  margin-left: -1.05rem;  font-size: 0.8rem;  margin-top: -0.09rem;}#content-inner.layout h5::before {  color: #57c850;  margin-left: -0.9rem;  font-size: 0.7rem;  margin-top: 0rem;}#content-inner.layout h6::before {  color: #5ec1e0;  margin-left: -0.9rem;  font-size: 0.66rem;  margin-top: 0rem;}/* s设置风车hover动效 6s那里可以自己调节快慢*/#content-inner.layout h1:hover,#content-inner.layout h2:hover,#content-inner.layout h3:hover,#content-inner.layout h4:hover,#content-inner.layout h5:hover,#content-inner.layout h6:hover {  color: var(--theme-color);}#content-inner.layout h1:hover::before,#content-inner.layout h2:hover::before,#content-inner.layout h3:hover::before,#content-inner.layout h4:hover::before,#content-inner.layout h5:hover::before,#content-inner.layout h6:hover::before {  color: var(--theme-color);  -webkit-animation: ccc 6s linear infinite;  animation: ccc 6s linear infinite;}/* 帧率检测 */#fps {  position: fixed;  /* 指定位置 */  left: 10px;  bottom: 10px;  z-index: 1919810;}[data-theme="light"] #fps {  background-color: rgba(255, 255, 255, 0.85);  backdrop-filter: var(--backdrop-filter);  padding: 4px;  border-radius: 4px;}[data-theme="dark"] #fps {  background-color: rgba(0, 0, 0, 0.72);  backdrop-filter: var(--backdrop-filter);  padding: 4px;  border-radius: 4px;}  /* 评论框  */  .vwrap {    box-shadow: 2px 2px 5px #bbb;    background: rgba(255, 255, 255, 0.3);    border-radius: 8px;    padding: 30px;    margin: 30px 0px 30px 0px;  }    /* 设置评论框 */    .vcard {    box-shadow: 2px 2px 5px #bbb;    background: rgba(255, 255, 255, 0.3);    border-radius: 8px;    padding: 30px;    margin: 30px 0px 0px 0px;  }    /* md网站下划线 */  #article-container a:hover {    text-decoration: none !important;  }    #article-container #hpp_talk p img {    display: inline;  }    /* 404页面 */  #error-wrap {    position: absolute;    top: 40%;    right: 0;    left: 0;    margin: 0 auto;    padding: 0 1rem;    max-width: 1000px;    transform: translate(0, -50%);  }    #error-wrap .error-content {    display: flex;    flex-direction: row;    justify-content: center;    align-items: center;    margin: 0 1rem;    height: 18rem;    border-radius: 8px;    background: var(--card-bg);    box-shadow: var(--card-box-shadow);    transition: all 0.3s;  }    #error-wrap .error-content .error-img {    box-flex: 1;    flex: 1;    height: 100%;    border-top-left-radius: 8px;    border-bottom-left-radius: 8px;    background-color: #3b70fc;    background-position: center;    background-size: cover;  }    #error-wrap .error-content .error-info {    box-flex: 1;    flex: 1;    padding: 0.5rem;    text-align: center;    font-size: 14px;    font-family: Titillium Web, "PingFang SC", "Hiragino Sans GB", "Microsoft JhengHei", "Microsoft YaHei", sans-serif;  }  #error-wrap .error-content .error-info .error_title {    margin-top: -4rem;    font-size: 9em;  }  #error-wrap .error-content .error-info .error_subtitle {    margin-top: -3.5rem;    word-break: break-word;    font-size: 1.6em;  }  #error-wrap .error-content .error-info a {    display: inline-block;    margin-top: 0.5rem;    padding: 0.3rem 1.5rem;    background: var(--btn-bg);    color: var(--btn-color);  }    #body-wrap.error .aside-list {    display: flex;    flex-direction: row;    flex-wrap: nowrap;    bottom: 0px;    position: absolute;    padding: 1rem;    width: 100%;    overflow: scroll;  }    #body-wrap.error .aside-list .aside-list-group {    display: flex;    flex-direction: row;    flex-wrap: nowrap;    max-width: 1200px;    margin: 0 auto;  }    #body-wrap.error .aside-list .aside-list-item {    padding: 0.5rem;  }    #body-wrap.error .aside-list .aside-list-item img {    width: 100%;    object-fit: cover;    border-radius: 12px;  }    #body-wrap.error .aside-list .aside-list-item .thumbnail {    overflow: hidden;    width: 230px;    height: 143px;    background: var(--anzhiyu-card-bg);    display: flex;  }    #body-wrap.error .aside-list .aside-list-item .content .title {    -webkit-line-clamp: 2;    overflow: hidden;    display: -webkit-box;    -webkit-box-orient: vertical;    line-height: 1.5;    justify-content: center;    align-items: flex-end;    align-content: center;    padding-top: 0.5rem;    color: white;  }    #body-wrap.error .aside-list .aside-list-item .content time {    display: none;  }    /* 代码框主题 */  #article-container figure.highlight {    border-radius: 10px;  }  :root {    --trans-light: rgba(255, 255, 255, 0.88);    --trans-dark: rgba(25, 25, 25, 0.88);    --border-style: 1px solid rgb(169, 169, 169);    --backdrop-filter: blur(5px) saturate(150%);  }    /* 首页文章卡片 */  #recent-posts > .recent-post-item {    background: var(--trans-light);    backdrop-filter: var(--backdrop-filter);    border-radius: 25px;    border: var(--border-style);  }    /* 首页侧栏卡片 */  #aside-content .card-widget {    background: var(--trans-light);    backdrop-filter: var(--backdrop-filter);    border-radius: 18px;    border: var(--border-style);  }    /* 文章页、归档页、普通页面 */  div#post,  div#page,  div#archive {    background: var(--trans-light);    backdrop-filter: var(--backdrop-filter);    border: var(--border-style);    border-radius: 20px;  }    /* 导航栏 */  #page-header.nav-fixed #nav {    background: rgba(255, 255, 255, 0.75);    backdrop-filter: var(--backdrop-filter);  }    [data-theme="dark"] #page-header.nav-fixed #nav {    background: rgba(0, 0, 0, 0.7) !important;  }    /* 夜间模式遮罩 */  [data-theme="dark"] #recent-posts > .recent-post-item,  [data-theme="dark"] #aside-content .card-widget,  [data-theme="dark"] div#post,  [data-theme="dark"] div#archive,  [data-theme="dark"] div#page {    background: var(--trans-dark);  }      /* 夜间模式页脚页头遮罩透明 */  [data-theme="dark"] #footer::before {    background: transparent !important;  }  [data-theme="dark"] #page-header::before {    background: transparent !important;  }    /* 阅读模式 */  .read-mode #aside-content .card-widget {    background: rgba(158, 204, 171, 0.5) !important;  }  .read-mode div#post {    background: rgba(158, 204, 171, 0.5) !important;  }    /* 夜间模式下的阅读模式 */  [data-theme="dark"] .read-mode #aside-content .card-widget {    background: rgba(25, 25, 25, 0.9) !important;    color: #ffffff;  }  [data-theme="dark"] .read-mode div#post {    background: rgba(25, 25, 25, 0.9) !important;    color: #ffffff;  }  ]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>关于</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>charts</title>
      <link href="/charts/index.html"/>
      <url>/charts/index.html</url>
      
        <content type="html"><![CDATA[<!-- 文章发布时间统计图 --><div id="posts-chart" data-start="2021-01" style="border-radius: 8px; height: 300px; padding: 10px;"></div><!-- 文章标签统计图 --><div id="tags-chart" data-length="10" style="border-radius: 8px; height: 300px; padding: 10px;"></div><!-- 文章分类统计图 --><div id="categories-chart" style="border-radius: 8px; height: 300px; padding: 10px;"></div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/readPercent.css"/>
      <url>/css/readPercent.css</url>
      
        <content type="html"><![CDATA[/* 返回顶部 */button#go-up #percent {    display: none;    font-weight: bold;    font-size: 15px !important;}button#go-up span {    font-size: 12px!important;    margin-right: -1px;}/* 鼠标滑动到按钮上时显示返回顶部图标 */button#go-up:hover i {    display: block !important;}button#go-up:hover #percent {    display: none !important;}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/console.js"/>
      <url>/js/console.js</url>
      
        <content type="html"><![CDATA[var now1 = new Date();function createtime1() {    var grt = new Date("08/09/2022 00:00:00"); //此处修改你的建站时间或者网站上线时间    now1.setTime(now1.getTime() + 250);    var days = (now1 - grt) / 1000 / 60 / 60 / 24;    var dnum = Math.floor(days);    var ascll = [        `欢迎来到Fomalhaut🥝の小家!`,        `Future is now 🍭🍭🍭`,        `        ███████  ██████  ███    ███  █████  ██      ██   ██  █████  ██    ██ ████████ ██      ██    ██ ████  ████ ██   ██ ██      ██   ██ ██   ██ ██    ██    ██    █████   ██    ██ ██ ████ ██ ███████ ██      ███████ ███████ ██    ██    ██    ██      ██    ██ ██  ██  ██ ██   ██ ██      ██   ██ ██   ██ ██    ██    ██    ██       ██████  ██      ██ ██   ██ ███████ ██   ██ ██   ██  ██████     ██                                                 `,        "小站已经苟活",        dnum,        "天啦!",        "©2022 By Fomalhaut",    ];    setTimeout(        console.log.bind(            console,            `\n%c${ascll[0]} %c ${ascll[1]} %c ${ascll[2]} %c${ascll[3]}%c ${ascll[4]}%c ${ascll[5]}\n\n%c ${ascll[6]}\n`,            "color:#39c5bb",            "",            "color:#39c5bb",            "color:#39c5bb",            "",            "color:#39c5bb",            ""        )    );}createtime1();function createtime2() {    var ascll2 = [`NCC2-036`, `调用前置摄像头拍照成功，识别为「大聪明」`, `Photo captured: `, ` 🤪 `];    setTimeout(        console.log.bind(            console,            `%c ${ascll2[0]} %c ${ascll2[1]} %c \n${ascll2[2]} %c\n${ascll2[3]}`,            "color:white; background-color:#10bcc0",            "",            "",            'background:url("https://unpkg.zhimg.com/anzhiyu-assets@latest/image/common/tinggge.gif") no-repeat;font-size:450%'        )    );    setTimeout(console.log.bind(console, "%c WELCOME %c 欢迎光临，大聪明", "color:white; background-color:#23c682", ""));    setTimeout(        console.warn.bind(            console,            "%c ⚡ Powered by Fomalhaut🥝 %c 你正在访问Fomalhaut🥝の小家",            "color:white; background-color:#f0ad4e",            ""        )    );    setTimeout(console.log.bind(console, "%c W23-12 %c 系统监测到你已打开控制台", "color:white; background-color:#4f90d9", ""));    setTimeout(        console.warn.bind(console, "%c S013-782 %c 你现在正处于监控中", "color:white; background-color:#d9534f", "")    );}createtime2();// 重写console方法console.log = function () { };console.error = function () { };console.warn = function () { };]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/cursor.js"/>
      <url>/js/cursor.js</url>
      
        <content type="html"><![CDATA[var CURSOR;Math.lerp = (a, b, n) => (1 - n) * a + n * b;const getStyle = (el, attr) => {    try {        return window.getComputedStyle            ? window.getComputedStyle(el)[attr]            : el.currentStyle[attr];    } catch (e) {}    return "";};class Cursor {    constructor() {        this.pos = {curr: null, prev: null};        this.pt = [];        this.create();        this.init();        this.render();    }    move(left, top) {        this.cursor.style["left"] = `${left}px`;        this.cursor.style["top"] = `${top}px`;    }    create() {        if (!this.cursor) {            this.cursor = document.createElement("div");            this.cursor.id = "cursor";            this.cursor.classList.add("hidden");            document.body.append(this.cursor);        }        var el = document.getElementsByTagName('*');        for (let i = 0; i < el.length; i++)            if (getStyle(el[i], "cursor") == "pointer")                this.pt.push(el[i].outerHTML);        document.body.appendChild((this.scr = document.createElement("style")));        // 这里改变鼠标指针的颜色 由svg生成        this.scr.innerHTML = `* {cursor: url("data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8' width='8px' height='8px'><circle cx='4' cy='4' r='4' opacity='.5'/></svg>") 4 4, auto}`;    }    refresh() {        this.scr.remove();        this.cursor.classList.remove("hover");        this.cursor.classList.remove("active");        this.pos = {curr: null, prev: null};        this.pt = [];        this.create();        this.init();        this.render();    }    init() {        document.onmouseover  = e => this.pt.includes(e.target.outerHTML) && this.cursor.classList.add("hover");        document.onmouseout   = e => this.pt.includes(e.target.outerHTML) && this.cursor.classList.remove("hover");        document.onmousemove  = e => {(this.pos.curr == null) && this.move(e.clientX - 8, e.clientY - 8); this.pos.curr = {x: e.clientX - 8, y: e.clientY - 8}; this.cursor.classList.remove("hidden");};        document.onmouseenter = e => this.cursor.classList.remove("hidden");        document.onmouseleave = e => this.cursor.classList.add("hidden");        document.onmousedown  = e => this.cursor.classList.add("active");        document.onmouseup    = e => this.cursor.classList.remove("active");    }    render() {        if (this.pos.prev) {            this.pos.prev.x = Math.lerp(this.pos.prev.x, this.pos.curr.x, 0.15);            this.pos.prev.y = Math.lerp(this.pos.prev.y, this.pos.curr.y, 0.15);            this.move(this.pos.prev.x, this.pos.prev.y);        } else {            this.pos.prev = this.pos.curr;        }        requestAnimationFrame(() => this.render());    }}(() => {    CURSOR = new Cursor();    // 需要重新获取列表时，使用 CURSOR.refresh()})();]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[<p>title: 友情链接<br>date: 2018-06-07 22:17:49<br>type: “link”</p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标签</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/fps.js"/>
      <url>/js/fps.js</url>
      
        <content type="html"><![CDATA[if (window.localStorage.getItem("fpson") == undefined || window.localStorage.getItem("fpson") == "1") {    var rAF = function () {        return (            window.requestAnimationFrame ||            window.webkitRequestAnimationFrame ||            function (callback) {                window.setTimeout(callback, 1000 / 60);            }        );    }();    var frame = 0;    var allFrameCount = 0;    var lastTime = Date.now();    var lastFameTime = Date.now();    var loop = function () {        var now = Date.now();        var fs = (now - lastFameTime);        var fps = Math.round(1000 / fs);        lastFameTime = now;        // 不置 0，在动画的开头及结尾记录此值的差值算出 FPS        allFrameCount++;        frame++;        if (now > 1000 + lastTime) {            var fps = Math.round((frame * 1000) / (now - lastTime));            if (fps <= 5) {                var kd = `<span style="color:#bd0000">卡成ppt🤢</span>`            } else if (fps <= 15) {                var kd = `<span style="color:red">电竞级帧率😖</span>`            } else if (fps <= 25) {                var kd = `<span style="color:orange">有点难受😨</span>`            } else if (fps < 35) {                var kd = `<span style="color:#9338e6">不太流畅🙄</span>`            } else if (fps <= 45) {                var kd = `<span style="color:#08b7e4">还不错哦😁</span>`            } else {                var kd = `<span style="color:#39c5bb">十分流畅🤣</span>`            }            document.getElementById("fps").innerHTML = `FPS:${fps} ${kd}`;            frame = 0;            lastTime = now;        };        rAF(loop);    }    loop();} else {    document.getElementById("fps").style = "display:none!important"}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/readPercent.js"/>
      <url>/js/readPercent.js</url>
      
        <content type="html"><![CDATA[window.onscroll = percent;// 执行函数// 页面百分比function percent() {    let a = document.documentElement.scrollTop || window.pageYOffset, // 卷去高度        b = Math.max(document.body.scrollHeight, document.documentElement.scrollHeight, document.body.offsetHeight, document.documentElement.offsetHeight, document.body.clientHeight, document.documentElement.clientHeight) - document.documentElement.clientHeight, // 整个网页高度        result = Math.round(a / b * 100), // 计算百分比        up = document.querySelector("#go-up") // 获取按钮    if (result <= 95) {        up.childNodes[0].style.display = 'none'        up.childNodes[1].style.display = 'block'        up.childNodes[1].innerHTML = result;    } else {        up.childNodes[1].style.display = 'none'        up.childNodes[0].style.display = 'block'    }}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/title.js"/>
      <url>/js/title.js</url>
      
        <content type="html"><![CDATA[//动态标题var OriginTitile = document.title;var titleTime;document.addEventListener('visibilitychange', function () {  if (document.hidden) {    //离开当前页面时标签显示内容    document.title = '👀跑哪里去了~';    clearTimeout(titleTime);  } else {    //返回当前页面时标签显示内容    document.title = '🐖抓到你啦～';    //两秒后变回正常标题    titleTime = setTimeout(function () {      document.title = OriginTitile;    }, 2000);  }});]]></content>
      
    </entry>
    
    
  
</search>
